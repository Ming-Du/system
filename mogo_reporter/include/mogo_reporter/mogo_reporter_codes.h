/**
 * 注意:
 * 本文件即将弃用！！！
 * 本文件即将弃用！！！
 * 本文件即将弃用！！！
 * 请使用事件码字符串进行上报！
 */
#pragma once

#include <string>

namespace mogo_msg
{
  enum ReportMsgCode
  {
    DEFAULT = 0,
    IINIT_BOOST = 1,
    IINIT_TIME_SYNC = 2,
    IINIT_SENSOR_NORMAL = 3,
    IBOOT_MAP_STARTED = 4,
    IMAP_TRA_EXIST = 5,
    IMAP_TRA_LOADED = 6,
    ITELEMATICS_AUTOPILOT_CMD_FORWARDED = 8,
    ITELEMATICS_AICLOUD_AUTH_OK = 9,
    ISYS_STARTING = 10,
    ISYS_RUNNING = 11,
    ISYS_EXITING = 12,
    ISYS_AUTOPILOT_READY = 13,
    ISYS_AUTOPILOT_STARTING = 14,
    ISYS_AUTOPILOT_RUNING = 15,
    ISYS_TOPIC_FREQ_NORMAL = 16,
    ISYS_REOMTEPILOT_STARTING = 17,
    IAGENT_EXECUTE_MASTER_COMMAND = 18,
    IMAP_TRA_ROUTING = 19,
    ISYS_CAN_NORMAL = 20,
    ICAM_READY = 21,
    ISYS_REOMTEPILOT_RUNING = 22,
    ILCT_RTK_STATUS_NORMAL = 23,
    ISYS_INIT_TRAJECTORY_START = 24,
    ISYS_INIT_TRAJECTORY_SUCCESS = 25,
    ISYS_INIT_TRAJECTORY_FAILURE = 26,
    ISYS_INIT_TRAJECTORY_WARNING = 27,
    ISYS_INIT_TRAJECTORY_TIMEOUT = 28,
    IMAP_DATA_EXIST = 29,
    ISYS_CONFIG_UPDATE_HADMAP = 30,
    IMAP_TRA_TYPE = 31,
    ISYS_SYSTEM_IN_IDLE = 32,
    ISYS_SYSTEM_OUT_IDLE = 33,
    ILCT_RTK_OR_SLAM_CHANGE = 34,
    EINIT_LOST_FILE = 1001,
    EHW_LIDAR = 1002,
    EHW_GNSS = 1003,
    EHW_RTK = 1004,
    EHW_CAN = 1005,
    EMAP_NODE = 1006,
    EMAP_NODE_DEAD = 1007,
    EMAP_TRA_NOT_EXIST = 1008,
    EMAP_TRA_LOAD_FAILED = 1009,
    EMAP_EXIT_AUTOPILOT_FOR_PLANNING = 1010,
    EMAP_EXIT_AUTOPILOT_FOR_LOCATION = 1011,
    EMAP_EXIT_AUTOPILOT_FOR_CHASSIS = 1012,
    EMAP_EXIT_AUTOPILOT_FOR_DISTANCE = 1013,
    EMAP_HADMAP_ENGINE_NO_ROUTING_INFO = 1014,
    EMAP_HADMAP_NO_TRAJECTORY = 1015,
    EMAP_HADMAP_PLANNING_NO_TRAJECTORY = 1016,
    EMAP_CONTROL_ABNORMAL_COMMAND = 1017,
    EMAP_CAN_ADAPTER_NO_CHASSIS_INFO = 1018,
    ETELEMATICS_AICLOUD_AUTH_ERROR = 1019,
    EVHC_GEAR_INFERENCE = 1020,
    EVHC_CSS = 1021,
    ESYS_AUTOPILOT_FAILED = 1022,
    ESYS_IN_EXIT = 1024,
    ESYS_NOT_ALLOW_AUTOPILOT_FOR_REMOTE = 1025,
    ESYS_NOT_ALLOW_REBOOT = 1026,
    ESYS_TOPIC_FREQ_DROPED = 1027,
    ESYS_ROUTING_REQ_TIMEOUT = 1028,
    ESYS_AUTOPILOT_TAKEN_OVER_BY_REMOTE = 1029,
    EAGENT_FATAL = 1030,
    EAGENT_MASTER_COMMAND_HANDLER_FAILED = 1031,
    ECAM_INIT = 1032,
    ECAM_CALIB = 1033,
    EVHC_BRAKE_INFERENCE = 1034,
    EVHC_STEER_INFERENCE = 1035,
    EVHC_ACCEL_INFERENCE = 1036,
    ESYS_FAULT = 1037,
    ELCT_RTK_STATUS_FAULT = 1038,
    ELCT_RTK_STATUS_UNKNOWN = 1039,
    EMAP_DATA_NOT_EXIST = 1040,
    ESYS_PLANNING_CHANGE_FAILIED = 1041,
    EMAP_EXIT_AUTOPILOT_FOR_BRAKE = 1042,
    EMAP_EXIT_AUTOPILOT_FOR_ACCEL = 1043,
    EMAP_EXIT_AUTOPILOT_FOR_STEER = 1044,
    EMAP_EXIT_AUTOPILOT_FOR_GEAR_SWITCH = 1045,
    EMAP_EXIT_AUTOPILOT_FOR_CHASSIS_NO_RESPONSE = 1046,
    EMAP_EXIT_AUTOPILOT_FOR_CHASSIS_UNKNOWN = 1047,
    ESYS_CHECK_TRAJECTORY_FAILURE = 1048,
    EVHC_GEAR = 1049,
    ECAM_GRAB_FATAL = 1050
  };

  std::string getReportMsgCode_Name(ReportMsgCode value)
  {
    switch (value)
    {
    case IINIT_BOOST:
      return "IINIT_BOOST";
    case IINIT_TIME_SYNC:
      return "IINIT_TIME_SYNC";
    case IINIT_SENSOR_NORMAL:
      return "IINIT_SENSOR_NORMAL";
    case IBOOT_MAP_STARTED:
      return "IBOOT_MAP_STARTED";
    case IMAP_TRA_EXIST:
      return "IMAP_TRA_EXIST";
    case IMAP_TRA_LOADED:
      return "IMAP_TRA_LOADED";
    case ITELEMATICS_AUTOPILOT_CMD_FORWARDED:
      return "ITELEMATICS_AUTOPILOT_CMD_FORWARDED";
    case ITELEMATICS_AICLOUD_AUTH_OK:
      return "ITELEMATICS_AICLOUD_AUTH_OK";
    case ISYS_STARTING:
      return "ISYS_STARTING";
    case ISYS_RUNNING:
      return "ISYS_RUNNING";
    case ISYS_EXITING:
      return "ISYS_EXITING";
    case ISYS_AUTOPILOT_READY:
      return "ISYS_AUTOPILOT_READY";
    case ISYS_AUTOPILOT_STARTING:
      return "ISYS_AUTOPILOT_STARTING";
    case ISYS_AUTOPILOT_RUNING:
      return "ISYS_AUTOPILOT_RUNING";
    case ISYS_TOPIC_FREQ_NORMAL:
      return "ISYS_TOPIC_FREQ_NORMAL";
    case ISYS_REOMTEPILOT_STARTING:
      return "ISYS_REOMTEPILOT_STARTING";
    case IAGENT_EXECUTE_MASTER_COMMAND:
      return "IAGENT_EXECUTE_MASTER_COMMAND";
    case IMAP_TRA_ROUTING:
      return "IMAP_TRA_ROUTING";
    case ISYS_CAN_NORMAL:
      return "ISYS_CAN_NORMAL";
    case ICAM_READY:
      return "ICAM_READY";
    case ISYS_REOMTEPILOT_RUNING:
      return "ISYS_REOMTEPILOT_RUNING";
    case ILCT_RTK_STATUS_NORMAL:
      return "ILCT_RTK_STATUS_NORMAL";
    case ISYS_INIT_TRAJECTORY_START:
      return "ISYS_INIT_TRAJECTORY_START";
    case ISYS_INIT_TRAJECTORY_SUCCESS:
      return "ISYS_INIT_TRAJECTORY_SUCCESS";
    case ISYS_INIT_TRAJECTORY_FAILURE:
      return "ISYS_INIT_TRAJECTORY_FAILURE";
    case ISYS_INIT_TRAJECTORY_WARNING:
      return "ISYS_INIT_TRAJECTORY_WARNING";
    case ISYS_INIT_TRAJECTORY_TIMEOUT:
      return "ISYS_INIT_TRAJECTORY_TIMEOUT";
    case IMAP_DATA_EXIST:
      return "IMAP_DATA_EXIST";
    case ISYS_CONFIG_UPDATE_HADMAP:
      return "ISYS_CONFIG_UPDATE_HADMAP";
    case IMAP_TRA_TYPE:
      return "IMAP_TRA_TYPE";
    case ISYS_SYSTEM_IN_IDLE:
      return "ISYS_SYSTEM_IN_IDLE";
    case ISYS_SYSTEM_OUT_IDLE:
      return "ISYS_SYSTEM_OUT_IDLE";
    case ILCT_RTK_OR_SLAM_CHANGE:
      return "ILCT_RTK_OR_SLAM_CHANGE";
    case EINIT_LOST_FILE:
      return "EINIT_LOST_FILE";
    case EHW_LIDAR:
      return "EHW_LIDAR";
    case EHW_GNSS:
      return "EHW_GNSS";
    case EHW_RTK:
      return "EHW_RTK";
    case EHW_CAN:
      return "EHW_CAN";
    case EMAP_NODE:
      return "EMAP_NODE";
    case EMAP_NODE_DEAD:
      return "EMAP_NODE_DEAD";
    case EMAP_TRA_NOT_EXIST:
      return "EMAP_TRA_NOT_EXIST";
    case EMAP_TRA_LOAD_FAILED:
      return "EMAP_TRA_LOAD_FAILED";
    case EMAP_EXIT_AUTOPILOT_FOR_PLANNING:
      return "EMAP_EXIT_AUTOPILOT_FOR_PLANNING";
    case EMAP_EXIT_AUTOPILOT_FOR_LOCATION:
      return "EMAP_EXIT_AUTOPILOT_FOR_LOCATION";
    case EMAP_EXIT_AUTOPILOT_FOR_CHASSIS:
      return "EMAP_EXIT_AUTOPILOT_FOR_CHASSIS";
    case EMAP_EXIT_AUTOPILOT_FOR_DISTANCE:
      return "EMAP_EXIT_AUTOPILOT_FOR_DISTANCE";
    case EMAP_HADMAP_ENGINE_NO_ROUTING_INFO:
      return "EMAP_HADMAP_ENGINE_NO_ROUTING_INFO";
    case EMAP_HADMAP_NO_TRAJECTORY:
      return "EMAP_HADMAP_NO_TRAJECTORY";
    case EMAP_HADMAP_PLANNING_NO_TRAJECTORY:
      return "EMAP_HADMAP_PLANNING_NO_TRAJECTORY";
    case EMAP_CONTROL_ABNORMAL_COMMAND:
      return "EMAP_CONTROL_ABNORMAL_COMMAND";
    case EMAP_CAN_ADAPTER_NO_CHASSIS_INFO:
      return "EMAP_CAN_ADAPTER_NO_CHASSIS_INFO";
    case ETELEMATICS_AICLOUD_AUTH_ERROR:
      return "ETELEMATICS_AICLOUD_AUTH_ERROR";
    case EVHC_GEAR_INFERENCE:
      return "EVHC_GEAR_INFERENCE";
    case EVHC_CSS:
      return "EVHC_CSS";
    case ESYS_AUTOPILOT_FAILED:
      return "ESYS_AUTOPILOT_FAILED";
    case ESYS_IN_EXIT:
      return "ESYS_IN_EXIT";
    case ESYS_NOT_ALLOW_AUTOPILOT_FOR_REMOTE:
      return "ESYS_NOT_ALLOW_AUTOPILOT_FOR_REMOTE";
    case ESYS_NOT_ALLOW_REBOOT:
      return "ESYS_NOT_ALLOW_REBOOT";
    case ESYS_TOPIC_FREQ_DROPED:
      return "ESYS_TOPIC_FREQ_DROPED";
    case ESYS_ROUTING_REQ_TIMEOUT:
      return "ESYS_ROUTING_REQ_TIMEOUT";
    case ESYS_AUTOPILOT_TAKEN_OVER_BY_REMOTE:
      return "ESYS_AUTOPILOT_TAKEN_OVER_BY_REMOTE";
    case EAGENT_FATAL:
      return "EAGENT_FATAL";
    case EAGENT_MASTER_COMMAND_HANDLER_FAILED:
      return "EAGENT_MASTER_COMMAND_HANDLER_FAILED";
    case ECAM_INIT:
      return "ECAM_INIT";
    case ECAM_CALIB:
      return "ECAM_CALIB";
    case EVHC_BRAKE_INFERENCE:
      return "EVHC_BRAKE_INFERENCE";
    case EVHC_STEER_INFERENCE:
      return "EVHC_STEER_INFERENCE";
    case EVHC_ACCEL_INFERENCE:
      return "EVHC_ACCEL_INFERENCE";
    case ESYS_FAULT:
      return "ESYS_FAULT";
    case ELCT_RTK_STATUS_FAULT:
      return "ELCT_RTK_STATUS_FAULT";
    case ELCT_RTK_STATUS_UNKNOWN:
      return "ELCT_RTK_STATUS_UNKNOWN";
    case EMAP_DATA_NOT_EXIST:
      return "EMAP_DATA_NOT_EXIST";
    case ESYS_PLANNING_CHANGE_FAILIED:
      return "ESYS_PLANNING_CHANGE_FAILIED";
    case EMAP_EXIT_AUTOPILOT_FOR_BRAKE:
      return "EMAP_EXIT_AUTOPILOT_FOR_BRAKE";
    case EMAP_EXIT_AUTOPILOT_FOR_ACCEL:
      return "EMAP_EXIT_AUTOPILOT_FOR_ACCEL";
    case EMAP_EXIT_AUTOPILOT_FOR_STEER:
      return "EMAP_EXIT_AUTOPILOT_FOR_STEER";
    case EMAP_EXIT_AUTOPILOT_FOR_GEAR_SWITCH:
      return "EMAP_EXIT_AUTOPILOT_FOR_GEAR_SWITCH";
    case EMAP_EXIT_AUTOPILOT_FOR_CHASSIS_NO_RESPONSE:
      return "EMAP_EXIT_AUTOPILOT_FOR_CHASSIS_NO_RESPONSE";
    case EMAP_EXIT_AUTOPILOT_FOR_CHASSIS_UNKNOWN:
      return "EMAP_EXIT_AUTOPILOT_FOR_CHASSIS_UNKNOWN";
    case ESYS_CHECK_TRAJECTORY_FAILURE:
      return "ESYS_CHECK_TRAJECTORY_FAILURE";
    case EVHC_GEAR:
      return "EVHC_GEAR";
    case ECAM_GRAB_FATAL:
      return "ECAM_GRAB_FATAL";

    default:
      return "";
    };
  }
}