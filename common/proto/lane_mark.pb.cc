// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lane_mark.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "lane_mark.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace perception {

namespace {

const ::google::protobuf::Descriptor* Point2D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point2D_reflection_ = NULL;
const ::google::protobuf::Descriptor* LaneMark_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LaneMark_reflection_ = NULL;
const ::google::protobuf::Descriptor* LaneMarks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LaneMarks_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LaneMarkColor_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LaneMarkType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_lane_5fmark_2eproto() {
  protobuf_AddDesc_lane_5fmark_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "lane_mark.proto");
  GOOGLE_CHECK(file != NULL);
  Point2D_descriptor_ = file->message_type(0);
  static const int Point2D_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2D, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2D, y_),
  };
  Point2D_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Point2D_descriptor_,
      Point2D::default_instance_,
      Point2D_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2D, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2D, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Point2D));
  LaneMark_descriptor_ = file->message_type(1);
  static const int LaneMark_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMark, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMark, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMark, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMark, points_),
  };
  LaneMark_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LaneMark_descriptor_,
      LaneMark::default_instance_,
      LaneMark_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMark, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMark, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LaneMark));
  LaneMarks_descriptor_ = file->message_type(2);
  static const int LaneMarks_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarks, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarks, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarks, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarks, left2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarks, right2_),
  };
  LaneMarks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LaneMarks_descriptor_,
      LaneMarks::default_instance_,
      LaneMarks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LaneMarks));
  LaneMarkColor_descriptor_ = file->enum_type(0);
  LaneMarkType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_lane_5fmark_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Point2D_descriptor_, &Point2D::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LaneMark_descriptor_, &LaneMark::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LaneMarks_descriptor_, &LaneMarks::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_lane_5fmark_2eproto() {
  delete Point2D::default_instance_;
  delete Point2D_reflection_;
  delete LaneMark::default_instance_;
  delete LaneMark_reflection_;
  delete LaneMarks::default_instance_;
  delete LaneMarks_reflection_;
}

void protobuf_AddDesc_lane_5fmark_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::common::protobuf_AddDesc_header_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017lane_mark.proto\022\nperception\032\014header.pr"
    "oto\")\n\007Point2D\022\016\n\001x\030\001 \001(\001:\003nan\022\016\n\001y\030\002 \001("
    "\001:\003nan\"\225\001\n\010LaneMark\022(\n\005color\030\001 \001(\0162\031.per"
    "ception.LaneMarkColor\022&\n\004type\030\002 \001(\0162\030.pe"
    "rception.LaneMarkType\022\022\n\nconfidence\030\003 \001("
    "\002\022#\n\006points\030\004 \003(\0132\023.perception.Point2D\"\277"
    "\001\n\tLaneMarks\022\036\n\006header\030\001 \001(\0132\016.common.He"
    "ader\022\"\n\004left\030\002 \001(\0132\024.perception.LaneMark"
    "\022#\n\005right\030\003 \001(\0132\024.perception.LaneMark\022#\n"
    "\005left2\030\004 \001(\0132\024.perception.LaneMark\022$\n\006ri"
    "ght2\030\005 \001(\0132\024.perception.LaneMark*2\n\rLane"
    "MarkColor\022\017\n\013COLOR_WHITE\020\000\022\020\n\014COLOR_YELL"
    "OW\020\001*M\n\014LaneMarkType\022\022\n\016LANE_MARK_NONE\020\000"
    "\022\023\n\017LANE_MARK_SOLID\020\001\022\024\n\020LANE_MARK_BROKE"
    "N\020\002", 563);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lane_mark.proto", &protobuf_RegisterTypes);
  Point2D::default_instance_ = new Point2D();
  LaneMark::default_instance_ = new LaneMark();
  LaneMarks::default_instance_ = new LaneMarks();
  Point2D::default_instance_->InitAsDefaultInstance();
  LaneMark::default_instance_->InitAsDefaultInstance();
  LaneMarks::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_lane_5fmark_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_lane_5fmark_2eproto {
  StaticDescriptorInitializer_lane_5fmark_2eproto() {
    protobuf_AddDesc_lane_5fmark_2eproto();
  }
} static_descriptor_initializer_lane_5fmark_2eproto_;
const ::google::protobuf::EnumDescriptor* LaneMarkColor_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LaneMarkColor_descriptor_;
}
bool LaneMarkColor_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LaneMarkType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LaneMarkType_descriptor_;
}
bool LaneMarkType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Point2D::kXFieldNumber;
const int Point2D::kYFieldNumber;
#endif  // !_MSC_VER

Point2D::Point2D()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perception.Point2D)
}

void Point2D::InitAsDefaultInstance() {
}

Point2D::Point2D(const Point2D& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:perception.Point2D)
}

void Point2D::SharedCtor() {
  _cached_size_ = 0;
  x_ = ::google::protobuf::internal::NaN();
  y_ = ::google::protobuf::internal::NaN();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point2D::~Point2D() {
  // @@protoc_insertion_point(destructor:perception.Point2D)
  SharedDtor();
}

void Point2D::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point2D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point2D_descriptor_;
}

const Point2D& Point2D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lane_5fmark_2eproto();
  return *default_instance_;
}

Point2D* Point2D::default_instance_ = NULL;

Point2D* Point2D::New() const {
  return new Point2D;
}

void Point2D::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    x_ = ::google::protobuf::internal::NaN();
    y_ = ::google::protobuf::internal::NaN();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Point2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:perception.Point2D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1 [default = nan];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2 [default = nan];
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perception.Point2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perception.Point2D)
  return false;
#undef DO_
}

void Point2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perception.Point2D)
  // optional double x = 1 [default = nan];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2 [default = nan];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:perception.Point2D)
}

::google::protobuf::uint8* Point2D::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.Point2D)
  // optional double x = 1 [default = nan];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2 [default = nan];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.Point2D)
  return target;
}

int Point2D::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double x = 1 [default = nan];
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2 [default = nan];
    if (has_y()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point2D::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Point2D* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Point2D*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Point2D::MergeFrom(const Point2D& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Point2D::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point2D::CopyFrom(const Point2D& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point2D::IsInitialized() const {

  return true;
}

void Point2D::Swap(Point2D* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Point2D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point2D_descriptor_;
  metadata.reflection = Point2D_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LaneMark::kColorFieldNumber;
const int LaneMark::kTypeFieldNumber;
const int LaneMark::kConfidenceFieldNumber;
const int LaneMark::kPointsFieldNumber;
#endif  // !_MSC_VER

LaneMark::LaneMark()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perception.LaneMark)
}

void LaneMark::InitAsDefaultInstance() {
}

LaneMark::LaneMark(const LaneMark& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:perception.LaneMark)
}

void LaneMark::SharedCtor() {
  _cached_size_ = 0;
  color_ = 0;
  type_ = 0;
  confidence_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LaneMark::~LaneMark() {
  // @@protoc_insertion_point(destructor:perception.LaneMark)
  SharedDtor();
}

void LaneMark::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LaneMark::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneMark::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LaneMark_descriptor_;
}

const LaneMark& LaneMark::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lane_5fmark_2eproto();
  return *default_instance_;
}

LaneMark* LaneMark::default_instance_ = NULL;

LaneMark* LaneMark::New() const {
  return new LaneMark;
}

void LaneMark::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LaneMark*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(color_, type_);
    confidence_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LaneMark::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:perception.LaneMark)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .perception.LaneMarkColor color = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perception::LaneMarkColor_IsValid(value)) {
            set_color(static_cast< ::perception::LaneMarkColor >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .perception.LaneMarkType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perception::LaneMarkType_IsValid(value)) {
            set_type(static_cast< ::perception::LaneMarkType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_confidence;
        break;
      }

      // optional float confidence = 3;
      case 3: {
        if (tag == 29) {
         parse_confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
          set_has_confidence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_points;
        break;
      }

      // repeated .perception.Point2D points = 4;
      case 4: {
        if (tag == 34) {
         parse_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_points;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perception.LaneMark)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perception.LaneMark)
  return false;
#undef DO_
}

void LaneMark::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perception.LaneMark)
  // optional .perception.LaneMarkColor color = 1;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->color(), output);
  }

  // optional .perception.LaneMarkType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional float confidence = 3;
  if (has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->confidence(), output);
  }

  // repeated .perception.Point2D points = 4;
  for (int i = 0; i < this->points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->points(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:perception.LaneMark)
}

::google::protobuf::uint8* LaneMark::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.LaneMark)
  // optional .perception.LaneMarkColor color = 1;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->color(), target);
  }

  // optional .perception.LaneMarkType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional float confidence = 3;
  if (has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->confidence(), target);
  }

  // repeated .perception.Point2D points = 4;
  for (int i = 0; i < this->points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->points(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.LaneMark)
  return target;
}

int LaneMark::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .perception.LaneMarkColor color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
    }

    // optional .perception.LaneMarkType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional float confidence = 3;
    if (has_confidence()) {
      total_size += 1 + 4;
    }

  }
  // repeated .perception.Point2D points = 4;
  total_size += 1 * this->points_size();
  for (int i = 0; i < this->points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->points(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneMark::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LaneMark* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LaneMark*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LaneMark::MergeFrom(const LaneMark& from) {
  GOOGLE_CHECK_NE(&from, this);
  points_.MergeFrom(from.points_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_confidence()) {
      set_confidence(from.confidence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LaneMark::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneMark::CopyFrom(const LaneMark& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneMark::IsInitialized() const {

  return true;
}

void LaneMark::Swap(LaneMark* other) {
  if (other != this) {
    std::swap(color_, other->color_);
    std::swap(type_, other->type_);
    std::swap(confidence_, other->confidence_);
    points_.Swap(&other->points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LaneMark::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LaneMark_descriptor_;
  metadata.reflection = LaneMark_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LaneMarks::kHeaderFieldNumber;
const int LaneMarks::kLeftFieldNumber;
const int LaneMarks::kRightFieldNumber;
const int LaneMarks::kLeft2FieldNumber;
const int LaneMarks::kRight2FieldNumber;
#endif  // !_MSC_VER

LaneMarks::LaneMarks()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perception.LaneMarks)
}

void LaneMarks::InitAsDefaultInstance() {
  header_ = const_cast< ::common::Header*>(&::common::Header::default_instance());
  left_ = const_cast< ::perception::LaneMark*>(&::perception::LaneMark::default_instance());
  right_ = const_cast< ::perception::LaneMark*>(&::perception::LaneMark::default_instance());
  left2_ = const_cast< ::perception::LaneMark*>(&::perception::LaneMark::default_instance());
  right2_ = const_cast< ::perception::LaneMark*>(&::perception::LaneMark::default_instance());
}

LaneMarks::LaneMarks(const LaneMarks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:perception.LaneMarks)
}

void LaneMarks::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  left_ = NULL;
  right_ = NULL;
  left2_ = NULL;
  right2_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LaneMarks::~LaneMarks() {
  // @@protoc_insertion_point(destructor:perception.LaneMarks)
  SharedDtor();
}

void LaneMarks::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete left_;
    delete right_;
    delete left2_;
    delete right2_;
  }
}

void LaneMarks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneMarks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LaneMarks_descriptor_;
}

const LaneMarks& LaneMarks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lane_5fmark_2eproto();
  return *default_instance_;
}

LaneMarks* LaneMarks::default_instance_ = NULL;

LaneMarks* LaneMarks::New() const {
  return new LaneMarks;
}

void LaneMarks::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_header()) {
      if (header_ != NULL) header_->::common::Header::Clear();
    }
    if (has_left()) {
      if (left_ != NULL) left_->::perception::LaneMark::Clear();
    }
    if (has_right()) {
      if (right_ != NULL) right_->::perception::LaneMark::Clear();
    }
    if (has_left2()) {
      if (left2_ != NULL) left2_->::perception::LaneMark::Clear();
    }
    if (has_right2()) {
      if (right2_ != NULL) right2_->::perception::LaneMark::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LaneMarks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:perception.LaneMarks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_left;
        break;
      }

      // optional .perception.LaneMark left = 2;
      case 2: {
        if (tag == 18) {
         parse_left:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_right;
        break;
      }

      // optional .perception.LaneMark right = 3;
      case 3: {
        if (tag == 26) {
         parse_right:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_left2;
        break;
      }

      // optional .perception.LaneMark left2 = 4;
      case 4: {
        if (tag == 34) {
         parse_left2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_right2;
        break;
      }

      // optional .perception.LaneMark right2 = 5;
      case 5: {
        if (tag == 42) {
         parse_right2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perception.LaneMarks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perception.LaneMarks)
  return false;
#undef DO_
}

void LaneMarks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perception.LaneMarks)
  // optional .common.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional .perception.LaneMark left = 2;
  if (has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->left(), output);
  }

  // optional .perception.LaneMark right = 3;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->right(), output);
  }

  // optional .perception.LaneMark left2 = 4;
  if (has_left2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->left2(), output);
  }

  // optional .perception.LaneMark right2 = 5;
  if (has_right2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->right2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:perception.LaneMarks)
}

::google::protobuf::uint8* LaneMarks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.LaneMarks)
  // optional .common.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional .perception.LaneMark left = 2;
  if (has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->left(), target);
  }

  // optional .perception.LaneMark right = 3;
  if (has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->right(), target);
  }

  // optional .perception.LaneMark left2 = 4;
  if (has_left2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->left2(), target);
  }

  // optional .perception.LaneMark right2 = 5;
  if (has_right2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->right2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.LaneMarks)
  return target;
}

int LaneMarks::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .perception.LaneMark left = 2;
    if (has_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->left());
    }

    // optional .perception.LaneMark right = 3;
    if (has_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->right());
    }

    // optional .perception.LaneMark left2 = 4;
    if (has_left2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->left2());
    }

    // optional .perception.LaneMark right2 = 5;
    if (has_right2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->right2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneMarks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LaneMarks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LaneMarks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LaneMarks::MergeFrom(const LaneMarks& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::common::Header::MergeFrom(from.header());
    }
    if (from.has_left()) {
      mutable_left()->::perception::LaneMark::MergeFrom(from.left());
    }
    if (from.has_right()) {
      mutable_right()->::perception::LaneMark::MergeFrom(from.right());
    }
    if (from.has_left2()) {
      mutable_left2()->::perception::LaneMark::MergeFrom(from.left2());
    }
    if (from.has_right2()) {
      mutable_right2()->::perception::LaneMark::MergeFrom(from.right2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LaneMarks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneMarks::CopyFrom(const LaneMarks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneMarks::IsInitialized() const {

  return true;
}

void LaneMarks::Swap(LaneMarks* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(left_, other->left_);
    std::swap(right_, other->right_);
    std::swap(left2_, other->left2_);
    std::swap(right2_, other->right2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LaneMarks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LaneMarks_descriptor_;
  metadata.reflection = LaneMarks_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception

// @@protoc_insertion_point(global_scope)
