// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_command.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "control_command.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace chassis {

namespace {

const ::google::protobuf::Descriptor* ControlCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ControlCommand_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_control_5fcommand_2eproto() {
  protobuf_AddDesc_control_5fcommand_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "control_command.proto");
  GOOGLE_CHECK(file != NULL);
  ControlCommand_descriptor_ = file->message_type(0);
  static const int ControlCommand_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, pilot_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, steering_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, accel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, throttle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, brake_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, gear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, light_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, horn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, highbeam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, lowbeam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, foglight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, clearance_lamps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, warn_light_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, parking_brake_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, drive_off_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, dec_to_stop_),
  };
  ControlCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ControlCommand_descriptor_,
      ControlCommand::default_instance_,
      ControlCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ControlCommand));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_control_5fcommand_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ControlCommand_descriptor_, &ControlCommand::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_control_5fcommand_2eproto() {
  delete ControlCommand::default_instance_;
  delete ControlCommand_reflection_;
}

void protobuf_AddDesc_control_5fcommand_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::common::protobuf_AddDesc_header_2eproto();
  ::chassis::protobuf_AddDesc_chassis_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025control_command.proto\022\007chassis\032\014header"
    ".proto\032\rchassis.proto\"\206\004\n\016ControlCommand"
    "\022\036\n\006header\030\001 \001(\0132\016.common.Header\0223\n\npilo"
    "t_mode\030\002 \001(\0162\022.chassis.PilotMode:\013MODE_M"
    "ANUAL\022\023\n\010steering\030\003 \001(\002:\0010\022\020\n\005speed\030\004 \001("
    "\002:\0010\022\020\n\005accel\030\005 \001(\002:\0010\022\023\n\010throttle\030\006 \001(\002"
    ":\0010\022\020\n\005brake\030\007 \001(\002:\0010\022.\n\004gear\030\010 \001(\0162\025.ch"
    "assis.GearPosition:\tGEAR_NONE\022/\n\005light\030\t"
    " \001(\0162\024.chassis.LightSwitch:\nLIGHT_NONE\022\023"
    "\n\004horn\030\n \001(\010:\005false\022\027\n\010highbeam\030\013 \001(\010:\005f"
    "alse\022\026\n\007lowbeam\030\014 \001(\010:\005false\022\027\n\010foglight"
    "\030\r \001(\010:\005false\022\036\n\017clearance_lamps\030\016 \001(\010:\005"
    "false\022\031\n\nwarn_light\030\017 \001(\010:\005false\022\034\n\rpark"
    "ing_brake\030\020 \001(\010:\005false\022\021\n\tdrive_off\030\024 \001("
    "\010\022\023\n\013dec_to_stop\030\025 \001(\010", 582);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "control_command.proto", &protobuf_RegisterTypes);
  ControlCommand::default_instance_ = new ControlCommand();
  ControlCommand::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_control_5fcommand_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_control_5fcommand_2eproto {
  StaticDescriptorInitializer_control_5fcommand_2eproto() {
    protobuf_AddDesc_control_5fcommand_2eproto();
  }
} static_descriptor_initializer_control_5fcommand_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ControlCommand::kHeaderFieldNumber;
const int ControlCommand::kPilotModeFieldNumber;
const int ControlCommand::kSteeringFieldNumber;
const int ControlCommand::kSpeedFieldNumber;
const int ControlCommand::kAccelFieldNumber;
const int ControlCommand::kThrottleFieldNumber;
const int ControlCommand::kBrakeFieldNumber;
const int ControlCommand::kGearFieldNumber;
const int ControlCommand::kLightFieldNumber;
const int ControlCommand::kHornFieldNumber;
const int ControlCommand::kHighbeamFieldNumber;
const int ControlCommand::kLowbeamFieldNumber;
const int ControlCommand::kFoglightFieldNumber;
const int ControlCommand::kClearanceLampsFieldNumber;
const int ControlCommand::kWarnLightFieldNumber;
const int ControlCommand::kParkingBrakeFieldNumber;
const int ControlCommand::kDriveOffFieldNumber;
const int ControlCommand::kDecToStopFieldNumber;
#endif  // !_MSC_VER

ControlCommand::ControlCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chassis.ControlCommand)
}

void ControlCommand::InitAsDefaultInstance() {
  header_ = const_cast< ::common::Header*>(&::common::Header::default_instance());
}

ControlCommand::ControlCommand(const ControlCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chassis.ControlCommand)
}

void ControlCommand::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  pilot_mode_ = 0;
  steering_ = 0;
  speed_ = 0;
  accel_ = 0;
  throttle_ = 0;
  brake_ = 0;
  gear_ = 0;
  light_ = 0;
  horn_ = false;
  highbeam_ = false;
  lowbeam_ = false;
  foglight_ = false;
  clearance_lamps_ = false;
  warn_light_ = false;
  parking_brake_ = false;
  drive_off_ = false;
  dec_to_stop_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ControlCommand::~ControlCommand() {
  // @@protoc_insertion_point(destructor:chassis.ControlCommand)
  SharedDtor();
}

void ControlCommand::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void ControlCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControlCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControlCommand_descriptor_;
}

const ControlCommand& ControlCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_control_5fcommand_2eproto();
  return *default_instance_;
}

ControlCommand* ControlCommand::default_instance_ = NULL;

ControlCommand* ControlCommand::New() const {
  return new ControlCommand;
}

void ControlCommand::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ControlCommand*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(pilot_mode_, gear_);
    if (has_header()) {
      if (header_ != NULL) header_->::common::Header::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(light_, parking_brake_);
  }
  ZR_(drive_off_, dec_to_stop_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ControlCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chassis.ControlCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pilot_mode;
        break;
      }

      // optional .chassis.PilotMode pilot_mode = 2 [default = MODE_MANUAL];
      case 2: {
        if (tag == 16) {
         parse_pilot_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::chassis::PilotMode_IsValid(value)) {
            set_pilot_mode(static_cast< ::chassis::PilotMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_steering;
        break;
      }

      // optional float steering = 3 [default = 0];
      case 3: {
        if (tag == 29) {
         parse_steering:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steering_)));
          set_has_steering();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_speed;
        break;
      }

      // optional float speed = 4 [default = 0];
      case 4: {
        if (tag == 37) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_accel;
        break;
      }

      // optional float accel = 5 [default = 0];
      case 5: {
        if (tag == 45) {
         parse_accel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accel_)));
          set_has_accel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_throttle;
        break;
      }

      // optional float throttle = 6 [default = 0];
      case 6: {
        if (tag == 53) {
         parse_throttle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &throttle_)));
          set_has_throttle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_brake;
        break;
      }

      // optional float brake = 7 [default = 0];
      case 7: {
        if (tag == 61) {
         parse_brake:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &brake_)));
          set_has_brake();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_gear;
        break;
      }

      // optional .chassis.GearPosition gear = 8 [default = GEAR_NONE];
      case 8: {
        if (tag == 64) {
         parse_gear:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::chassis::GearPosition_IsValid(value)) {
            set_gear(static_cast< ::chassis::GearPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_light;
        break;
      }

      // optional .chassis.LightSwitch light = 9 [default = LIGHT_NONE];
      case 9: {
        if (tag == 72) {
         parse_light:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::chassis::LightSwitch_IsValid(value)) {
            set_light(static_cast< ::chassis::LightSwitch >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_horn;
        break;
      }

      // optional bool horn = 10 [default = false];
      case 10: {
        if (tag == 80) {
         parse_horn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &horn_)));
          set_has_horn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_highbeam;
        break;
      }

      // optional bool highbeam = 11 [default = false];
      case 11: {
        if (tag == 88) {
         parse_highbeam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &highbeam_)));
          set_has_highbeam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_lowbeam;
        break;
      }

      // optional bool lowbeam = 12 [default = false];
      case 12: {
        if (tag == 96) {
         parse_lowbeam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lowbeam_)));
          set_has_lowbeam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_foglight;
        break;
      }

      // optional bool foglight = 13 [default = false];
      case 13: {
        if (tag == 104) {
         parse_foglight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &foglight_)));
          set_has_foglight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_clearance_lamps;
        break;
      }

      // optional bool clearance_lamps = 14 [default = false];
      case 14: {
        if (tag == 112) {
         parse_clearance_lamps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clearance_lamps_)));
          set_has_clearance_lamps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_warn_light;
        break;
      }

      // optional bool warn_light = 15 [default = false];
      case 15: {
        if (tag == 120) {
         parse_warn_light:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &warn_light_)));
          set_has_warn_light();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_parking_brake;
        break;
      }

      // optional bool parking_brake = 16 [default = false];
      case 16: {
        if (tag == 128) {
         parse_parking_brake:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &parking_brake_)));
          set_has_parking_brake();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_drive_off;
        break;
      }

      // optional bool drive_off = 20;
      case 20: {
        if (tag == 160) {
         parse_drive_off:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &drive_off_)));
          set_has_drive_off();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_dec_to_stop;
        break;
      }

      // optional bool dec_to_stop = 21;
      case 21: {
        if (tag == 168) {
         parse_dec_to_stop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dec_to_stop_)));
          set_has_dec_to_stop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chassis.ControlCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chassis.ControlCommand)
  return false;
#undef DO_
}

void ControlCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chassis.ControlCommand)
  // optional .common.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional .chassis.PilotMode pilot_mode = 2 [default = MODE_MANUAL];
  if (has_pilot_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->pilot_mode(), output);
  }

  // optional float steering = 3 [default = 0];
  if (has_steering()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->steering(), output);
  }

  // optional float speed = 4 [default = 0];
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->speed(), output);
  }

  // optional float accel = 5 [default = 0];
  if (has_accel()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->accel(), output);
  }

  // optional float throttle = 6 [default = 0];
  if (has_throttle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->throttle(), output);
  }

  // optional float brake = 7 [default = 0];
  if (has_brake()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->brake(), output);
  }

  // optional .chassis.GearPosition gear = 8 [default = GEAR_NONE];
  if (has_gear()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->gear(), output);
  }

  // optional .chassis.LightSwitch light = 9 [default = LIGHT_NONE];
  if (has_light()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->light(), output);
  }

  // optional bool horn = 10 [default = false];
  if (has_horn()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->horn(), output);
  }

  // optional bool highbeam = 11 [default = false];
  if (has_highbeam()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->highbeam(), output);
  }

  // optional bool lowbeam = 12 [default = false];
  if (has_lowbeam()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->lowbeam(), output);
  }

  // optional bool foglight = 13 [default = false];
  if (has_foglight()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->foglight(), output);
  }

  // optional bool clearance_lamps = 14 [default = false];
  if (has_clearance_lamps()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->clearance_lamps(), output);
  }

  // optional bool warn_light = 15 [default = false];
  if (has_warn_light()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->warn_light(), output);
  }

  // optional bool parking_brake = 16 [default = false];
  if (has_parking_brake()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->parking_brake(), output);
  }

  // optional bool drive_off = 20;
  if (has_drive_off()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->drive_off(), output);
  }

  // optional bool dec_to_stop = 21;
  if (has_dec_to_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->dec_to_stop(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chassis.ControlCommand)
}

::google::protobuf::uint8* ControlCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chassis.ControlCommand)
  // optional .common.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional .chassis.PilotMode pilot_mode = 2 [default = MODE_MANUAL];
  if (has_pilot_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->pilot_mode(), target);
  }

  // optional float steering = 3 [default = 0];
  if (has_steering()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->steering(), target);
  }

  // optional float speed = 4 [default = 0];
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->speed(), target);
  }

  // optional float accel = 5 [default = 0];
  if (has_accel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->accel(), target);
  }

  // optional float throttle = 6 [default = 0];
  if (has_throttle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->throttle(), target);
  }

  // optional float brake = 7 [default = 0];
  if (has_brake()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->brake(), target);
  }

  // optional .chassis.GearPosition gear = 8 [default = GEAR_NONE];
  if (has_gear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->gear(), target);
  }

  // optional .chassis.LightSwitch light = 9 [default = LIGHT_NONE];
  if (has_light()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->light(), target);
  }

  // optional bool horn = 10 [default = false];
  if (has_horn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->horn(), target);
  }

  // optional bool highbeam = 11 [default = false];
  if (has_highbeam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->highbeam(), target);
  }

  // optional bool lowbeam = 12 [default = false];
  if (has_lowbeam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->lowbeam(), target);
  }

  // optional bool foglight = 13 [default = false];
  if (has_foglight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->foglight(), target);
  }

  // optional bool clearance_lamps = 14 [default = false];
  if (has_clearance_lamps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->clearance_lamps(), target);
  }

  // optional bool warn_light = 15 [default = false];
  if (has_warn_light()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->warn_light(), target);
  }

  // optional bool parking_brake = 16 [default = false];
  if (has_parking_brake()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->parking_brake(), target);
  }

  // optional bool drive_off = 20;
  if (has_drive_off()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->drive_off(), target);
  }

  // optional bool dec_to_stop = 21;
  if (has_dec_to_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->dec_to_stop(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chassis.ControlCommand)
  return target;
}

int ControlCommand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .chassis.PilotMode pilot_mode = 2 [default = MODE_MANUAL];
    if (has_pilot_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pilot_mode());
    }

    // optional float steering = 3 [default = 0];
    if (has_steering()) {
      total_size += 1 + 4;
    }

    // optional float speed = 4 [default = 0];
    if (has_speed()) {
      total_size += 1 + 4;
    }

    // optional float accel = 5 [default = 0];
    if (has_accel()) {
      total_size += 1 + 4;
    }

    // optional float throttle = 6 [default = 0];
    if (has_throttle()) {
      total_size += 1 + 4;
    }

    // optional float brake = 7 [default = 0];
    if (has_brake()) {
      total_size += 1 + 4;
    }

    // optional .chassis.GearPosition gear = 8 [default = GEAR_NONE];
    if (has_gear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gear());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .chassis.LightSwitch light = 9 [default = LIGHT_NONE];
    if (has_light()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->light());
    }

    // optional bool horn = 10 [default = false];
    if (has_horn()) {
      total_size += 1 + 1;
    }

    // optional bool highbeam = 11 [default = false];
    if (has_highbeam()) {
      total_size += 1 + 1;
    }

    // optional bool lowbeam = 12 [default = false];
    if (has_lowbeam()) {
      total_size += 1 + 1;
    }

    // optional bool foglight = 13 [default = false];
    if (has_foglight()) {
      total_size += 1 + 1;
    }

    // optional bool clearance_lamps = 14 [default = false];
    if (has_clearance_lamps()) {
      total_size += 1 + 1;
    }

    // optional bool warn_light = 15 [default = false];
    if (has_warn_light()) {
      total_size += 1 + 1;
    }

    // optional bool parking_brake = 16 [default = false];
    if (has_parking_brake()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool drive_off = 20;
    if (has_drive_off()) {
      total_size += 2 + 1;
    }

    // optional bool dec_to_stop = 21;
    if (has_dec_to_stop()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControlCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ControlCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ControlCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ControlCommand::MergeFrom(const ControlCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::common::Header::MergeFrom(from.header());
    }
    if (from.has_pilot_mode()) {
      set_pilot_mode(from.pilot_mode());
    }
    if (from.has_steering()) {
      set_steering(from.steering());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_accel()) {
      set_accel(from.accel());
    }
    if (from.has_throttle()) {
      set_throttle(from.throttle());
    }
    if (from.has_brake()) {
      set_brake(from.brake());
    }
    if (from.has_gear()) {
      set_gear(from.gear());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_light()) {
      set_light(from.light());
    }
    if (from.has_horn()) {
      set_horn(from.horn());
    }
    if (from.has_highbeam()) {
      set_highbeam(from.highbeam());
    }
    if (from.has_lowbeam()) {
      set_lowbeam(from.lowbeam());
    }
    if (from.has_foglight()) {
      set_foglight(from.foglight());
    }
    if (from.has_clearance_lamps()) {
      set_clearance_lamps(from.clearance_lamps());
    }
    if (from.has_warn_light()) {
      set_warn_light(from.warn_light());
    }
    if (from.has_parking_brake()) {
      set_parking_brake(from.parking_brake());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_drive_off()) {
      set_drive_off(from.drive_off());
    }
    if (from.has_dec_to_stop()) {
      set_dec_to_stop(from.dec_to_stop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ControlCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlCommand::CopyFrom(const ControlCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlCommand::IsInitialized() const {

  return true;
}

void ControlCommand::Swap(ControlCommand* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(pilot_mode_, other->pilot_mode_);
    std::swap(steering_, other->steering_);
    std::swap(speed_, other->speed_);
    std::swap(accel_, other->accel_);
    std::swap(throttle_, other->throttle_);
    std::swap(brake_, other->brake_);
    std::swap(gear_, other->gear_);
    std::swap(light_, other->light_);
    std::swap(horn_, other->horn_);
    std::swap(highbeam_, other->highbeam_);
    std::swap(lowbeam_, other->lowbeam_);
    std::swap(foglight_, other->foglight_);
    std::swap(clearance_lamps_, other->clearance_lamps_);
    std::swap(warn_light_, other->warn_light_);
    std::swap(parking_brake_, other->parking_brake_);
    std::swap(drive_off_, other->drive_off_);
    std::swap(dec_to_stop_, other->dec_to_stop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ControlCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ControlCommand_descriptor_;
  metadata.reflection = ControlCommand_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace chassis

// @@protoc_insertion_point(global_scope)
