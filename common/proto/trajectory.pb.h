// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trajectory.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_trajectory_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_trajectory_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
#include "chassis.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_trajectory_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_trajectory_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_trajectory_2eproto;
namespace planning {
class Trajectory;
class TrajectoryDefaultTypeInternal;
extern TrajectoryDefaultTypeInternal _Trajectory_default_instance_;
class TrajectoryPoint;
class TrajectoryPointDefaultTypeInternal;
extern TrajectoryPointDefaultTypeInternal _TrajectoryPoint_default_instance_;
}  // namespace planning
PROTOBUF_NAMESPACE_OPEN
template<> ::planning::Trajectory* Arena::CreateMaybeMessage<::planning::Trajectory>(Arena*);
template<> ::planning::TrajectoryPoint* Arena::CreateMaybeMessage<::planning::TrajectoryPoint>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace planning {

enum LaneChange : int {
  LANE_KEEPING = 0,
  MERGE_LEFT = 1,
  MERGE_RIGHT = 2
};
bool LaneChange_IsValid(int value);
constexpr LaneChange LaneChange_MIN = LANE_KEEPING;
constexpr LaneChange LaneChange_MAX = MERGE_RIGHT;
constexpr int LaneChange_ARRAYSIZE = LaneChange_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LaneChange_descriptor();
template<typename T>
inline const std::string& LaneChange_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LaneChange>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LaneChange_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LaneChange_descriptor(), enum_t_value);
}
inline bool LaneChange_Parse(
    const std::string& name, LaneChange* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LaneChange>(
    LaneChange_descriptor(), name, value);
}
enum CoordFrame : int {
  FRAME_DEFAULT = 0,
  FRAME_ENU = 1,
  FRAME_LLH = 2,
  FRAME_IMU = 3,
  FRAME_VEHICLE = 5
};
bool CoordFrame_IsValid(int value);
constexpr CoordFrame CoordFrame_MIN = FRAME_DEFAULT;
constexpr CoordFrame CoordFrame_MAX = FRAME_VEHICLE;
constexpr int CoordFrame_ARRAYSIZE = CoordFrame_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CoordFrame_descriptor();
template<typename T>
inline const std::string& CoordFrame_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CoordFrame>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CoordFrame_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CoordFrame_descriptor(), enum_t_value);
}
inline bool CoordFrame_Parse(
    const std::string& name, CoordFrame* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CoordFrame>(
    CoordFrame_descriptor(), name, value);
}
// ===================================================================

class TrajectoryPoint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:planning.TrajectoryPoint) */ {
 public:
  TrajectoryPoint();
  virtual ~TrajectoryPoint();

  TrajectoryPoint(const TrajectoryPoint& from);
  TrajectoryPoint(TrajectoryPoint&& from) noexcept
    : TrajectoryPoint() {
    *this = ::std::move(from);
  }

  inline TrajectoryPoint& operator=(const TrajectoryPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrajectoryPoint& operator=(TrajectoryPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrajectoryPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrajectoryPoint* internal_default_instance() {
    return reinterpret_cast<const TrajectoryPoint*>(
               &_TrajectoryPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrajectoryPoint& a, TrajectoryPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(TrajectoryPoint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrajectoryPoint* New() const final {
    return CreateMaybeMessage<TrajectoryPoint>(nullptr);
  }

  TrajectoryPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrajectoryPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrajectoryPoint& from);
  void MergeFrom(const TrajectoryPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrajectoryPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "planning.TrajectoryPoint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trajectory_2eproto);
    return ::descriptor_table_trajectory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kTFieldNumber = 4,
    kVFieldNumber = 5,
    kAFieldNumber = 6,
    kThetaFieldNumber = 7,
    kKappaFieldNumber = 8,
    kSFieldNumber = 9,
  };
  // optional double x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // optional double y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // optional double z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // optional double t = 4;
  bool has_t() const;
  private:
  bool _internal_has_t() const;
  public:
  void clear_t();
  double t() const;
  void set_t(double value);
  private:
  double _internal_t() const;
  void _internal_set_t(double value);
  public:

  // optional double v = 5;
  bool has_v() const;
  private:
  bool _internal_has_v() const;
  public:
  void clear_v();
  double v() const;
  void set_v(double value);
  private:
  double _internal_v() const;
  void _internal_set_v(double value);
  public:

  // optional double a = 6;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  double a() const;
  void set_a(double value);
  private:
  double _internal_a() const;
  void _internal_set_a(double value);
  public:

  // optional double theta = 7;
  bool has_theta() const;
  private:
  bool _internal_has_theta() const;
  public:
  void clear_theta();
  double theta() const;
  void set_theta(double value);
  private:
  double _internal_theta() const;
  void _internal_set_theta(double value);
  public:

  // optional double kappa = 8;
  bool has_kappa() const;
  private:
  bool _internal_has_kappa() const;
  public:
  void clear_kappa();
  double kappa() const;
  void set_kappa(double value);
  private:
  double _internal_kappa() const;
  void _internal_set_kappa(double value);
  public:

  // optional double s = 9;
  bool has_s() const;
  private:
  bool _internal_has_s() const;
  public:
  void clear_s();
  double s() const;
  void set_s(double value);
  private:
  double _internal_s() const;
  void _internal_set_s(double value);
  public:

  // @@protoc_insertion_point(class_scope:planning.TrajectoryPoint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  double z_;
  double t_;
  double v_;
  double a_;
  double theta_;
  double kappa_;
  double s_;
  friend struct ::TableStruct_trajectory_2eproto;
};
// -------------------------------------------------------------------

class Trajectory :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:planning.Trajectory) */ {
 public:
  Trajectory();
  virtual ~Trajectory();

  Trajectory(const Trajectory& from);
  Trajectory(Trajectory&& from) noexcept
    : Trajectory() {
    *this = ::std::move(from);
  }

  inline Trajectory& operator=(const Trajectory& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trajectory& operator=(Trajectory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trajectory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trajectory* internal_default_instance() {
    return reinterpret_cast<const Trajectory*>(
               &_Trajectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Trajectory& a, Trajectory& b) {
    a.Swap(&b);
  }
  inline void Swap(Trajectory* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trajectory* New() const final {
    return CreateMaybeMessage<Trajectory>(nullptr);
  }

  Trajectory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trajectory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trajectory& from);
  void MergeFrom(const Trajectory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trajectory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "planning.Trajectory";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trajectory_2eproto);
    return ::descriptor_table_trajectory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kFrameFieldNumber = 2,
    kLaneChangeFieldNumber = 5,
    kAFieldNumber = 4,
    kLightFieldNumber = 6,
  };
  // repeated .planning.TrajectoryPoint points = 3;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::planning::TrajectoryPoint* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::planning::TrajectoryPoint >*
      mutable_points();
  private:
  const ::planning::TrajectoryPoint& _internal_points(int index) const;
  ::planning::TrajectoryPoint* _internal_add_points();
  public:
  const ::planning::TrajectoryPoint& points(int index) const;
  ::planning::TrajectoryPoint* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::planning::TrajectoryPoint >&
      points() const;

  // optional .common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::common::Header& header() const;
  ::common::Header* release_header();
  ::common::Header* mutable_header();
  void set_allocated_header(::common::Header* header);
  private:
  const ::common::Header& _internal_header() const;
  ::common::Header* _internal_mutable_header();
  public:

  // optional .planning.CoordFrame frame = 2;
  bool has_frame() const;
  private:
  bool _internal_has_frame() const;
  public:
  void clear_frame();
  ::planning::CoordFrame frame() const;
  void set_frame(::planning::CoordFrame value);
  private:
  ::planning::CoordFrame _internal_frame() const;
  void _internal_set_frame(::planning::CoordFrame value);
  public:

  // optional .planning.LaneChange lane_change = 5;
  bool has_lane_change() const;
  private:
  bool _internal_has_lane_change() const;
  public:
  void clear_lane_change();
  ::planning::LaneChange lane_change() const;
  void set_lane_change(::planning::LaneChange value);
  private:
  ::planning::LaneChange _internal_lane_change() const;
  void _internal_set_lane_change(::planning::LaneChange value);
  public:

  // optional double a = 4;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  double a() const;
  void set_a(double value);
  private:
  double _internal_a() const;
  void _internal_set_a(double value);
  public:

  // optional .chassis.LightSwitch light = 6 [default = LIGHT_NONE];
  bool has_light() const;
  private:
  bool _internal_has_light() const;
  public:
  void clear_light();
  ::chassis::LightSwitch light() const;
  void set_light(::chassis::LightSwitch value);
  private:
  ::chassis::LightSwitch _internal_light() const;
  void _internal_set_light(::chassis::LightSwitch value);
  public:

  // @@protoc_insertion_point(class_scope:planning.Trajectory)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::planning::TrajectoryPoint > points_;
  ::common::Header* header_;
  int frame_;
  int lane_change_;
  double a_;
  int light_;
  friend struct ::TableStruct_trajectory_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrajectoryPoint

// optional double x = 1;
inline bool TrajectoryPoint::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrajectoryPoint::has_x() const {
  return _internal_has_x();
}
inline void TrajectoryPoint::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double TrajectoryPoint::_internal_x() const {
  return x_;
}
inline double TrajectoryPoint::x() const {
  // @@protoc_insertion_point(field_get:planning.TrajectoryPoint.x)
  return _internal_x();
}
inline void TrajectoryPoint::_internal_set_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void TrajectoryPoint::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:planning.TrajectoryPoint.x)
}

// optional double y = 2;
inline bool TrajectoryPoint::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrajectoryPoint::has_y() const {
  return _internal_has_y();
}
inline void TrajectoryPoint::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double TrajectoryPoint::_internal_y() const {
  return y_;
}
inline double TrajectoryPoint::y() const {
  // @@protoc_insertion_point(field_get:planning.TrajectoryPoint.y)
  return _internal_y();
}
inline void TrajectoryPoint::_internal_set_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void TrajectoryPoint::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:planning.TrajectoryPoint.y)
}

// optional double z = 3;
inline bool TrajectoryPoint::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrajectoryPoint::has_z() const {
  return _internal_has_z();
}
inline void TrajectoryPoint::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double TrajectoryPoint::_internal_z() const {
  return z_;
}
inline double TrajectoryPoint::z() const {
  // @@protoc_insertion_point(field_get:planning.TrajectoryPoint.z)
  return _internal_z();
}
inline void TrajectoryPoint::_internal_set_z(double value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void TrajectoryPoint::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:planning.TrajectoryPoint.z)
}

// optional double t = 4;
inline bool TrajectoryPoint::_internal_has_t() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TrajectoryPoint::has_t() const {
  return _internal_has_t();
}
inline void TrajectoryPoint::clear_t() {
  t_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double TrajectoryPoint::_internal_t() const {
  return t_;
}
inline double TrajectoryPoint::t() const {
  // @@protoc_insertion_point(field_get:planning.TrajectoryPoint.t)
  return _internal_t();
}
inline void TrajectoryPoint::_internal_set_t(double value) {
  _has_bits_[0] |= 0x00000008u;
  t_ = value;
}
inline void TrajectoryPoint::set_t(double value) {
  _internal_set_t(value);
  // @@protoc_insertion_point(field_set:planning.TrajectoryPoint.t)
}

// optional double v = 5;
inline bool TrajectoryPoint::_internal_has_v() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TrajectoryPoint::has_v() const {
  return _internal_has_v();
}
inline void TrajectoryPoint::clear_v() {
  v_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double TrajectoryPoint::_internal_v() const {
  return v_;
}
inline double TrajectoryPoint::v() const {
  // @@protoc_insertion_point(field_get:planning.TrajectoryPoint.v)
  return _internal_v();
}
inline void TrajectoryPoint::_internal_set_v(double value) {
  _has_bits_[0] |= 0x00000010u;
  v_ = value;
}
inline void TrajectoryPoint::set_v(double value) {
  _internal_set_v(value);
  // @@protoc_insertion_point(field_set:planning.TrajectoryPoint.v)
}

// optional double a = 6;
inline bool TrajectoryPoint::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TrajectoryPoint::has_a() const {
  return _internal_has_a();
}
inline void TrajectoryPoint::clear_a() {
  a_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double TrajectoryPoint::_internal_a() const {
  return a_;
}
inline double TrajectoryPoint::a() const {
  // @@protoc_insertion_point(field_get:planning.TrajectoryPoint.a)
  return _internal_a();
}
inline void TrajectoryPoint::_internal_set_a(double value) {
  _has_bits_[0] |= 0x00000020u;
  a_ = value;
}
inline void TrajectoryPoint::set_a(double value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:planning.TrajectoryPoint.a)
}

// optional double theta = 7;
inline bool TrajectoryPoint::_internal_has_theta() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TrajectoryPoint::has_theta() const {
  return _internal_has_theta();
}
inline void TrajectoryPoint::clear_theta() {
  theta_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double TrajectoryPoint::_internal_theta() const {
  return theta_;
}
inline double TrajectoryPoint::theta() const {
  // @@protoc_insertion_point(field_get:planning.TrajectoryPoint.theta)
  return _internal_theta();
}
inline void TrajectoryPoint::_internal_set_theta(double value) {
  _has_bits_[0] |= 0x00000040u;
  theta_ = value;
}
inline void TrajectoryPoint::set_theta(double value) {
  _internal_set_theta(value);
  // @@protoc_insertion_point(field_set:planning.TrajectoryPoint.theta)
}

// optional double kappa = 8;
inline bool TrajectoryPoint::_internal_has_kappa() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TrajectoryPoint::has_kappa() const {
  return _internal_has_kappa();
}
inline void TrajectoryPoint::clear_kappa() {
  kappa_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double TrajectoryPoint::_internal_kappa() const {
  return kappa_;
}
inline double TrajectoryPoint::kappa() const {
  // @@protoc_insertion_point(field_get:planning.TrajectoryPoint.kappa)
  return _internal_kappa();
}
inline void TrajectoryPoint::_internal_set_kappa(double value) {
  _has_bits_[0] |= 0x00000080u;
  kappa_ = value;
}
inline void TrajectoryPoint::set_kappa(double value) {
  _internal_set_kappa(value);
  // @@protoc_insertion_point(field_set:planning.TrajectoryPoint.kappa)
}

// optional double s = 9;
inline bool TrajectoryPoint::_internal_has_s() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TrajectoryPoint::has_s() const {
  return _internal_has_s();
}
inline void TrajectoryPoint::clear_s() {
  s_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double TrajectoryPoint::_internal_s() const {
  return s_;
}
inline double TrajectoryPoint::s() const {
  // @@protoc_insertion_point(field_get:planning.TrajectoryPoint.s)
  return _internal_s();
}
inline void TrajectoryPoint::_internal_set_s(double value) {
  _has_bits_[0] |= 0x00000100u;
  s_ = value;
}
inline void TrajectoryPoint::set_s(double value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:planning.TrajectoryPoint.s)
}

// -------------------------------------------------------------------

// Trajectory

// optional .common.Header header = 1;
inline bool Trajectory::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool Trajectory::has_header() const {
  return _internal_has_header();
}
inline const ::common::Header& Trajectory::_internal_header() const {
  const ::common::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::Header*>(
      &::common::_Header_default_instance_);
}
inline const ::common::Header& Trajectory::header() const {
  // @@protoc_insertion_point(field_get:planning.Trajectory.header)
  return _internal_header();
}
inline ::common::Header* Trajectory::release_header() {
  // @@protoc_insertion_point(field_release:planning.Trajectory.header)
  _has_bits_[0] &= ~0x00000001u;
  ::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::Header* Trajectory::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::common::Header* Trajectory::mutable_header() {
  // @@protoc_insertion_point(field_mutable:planning.Trajectory.header)
  return _internal_mutable_header();
}
inline void Trajectory::set_allocated_header(::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:planning.Trajectory.header)
}

// optional .planning.CoordFrame frame = 2;
inline bool Trajectory::_internal_has_frame() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Trajectory::has_frame() const {
  return _internal_has_frame();
}
inline void Trajectory::clear_frame() {
  frame_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::planning::CoordFrame Trajectory::_internal_frame() const {
  return static_cast< ::planning::CoordFrame >(frame_);
}
inline ::planning::CoordFrame Trajectory::frame() const {
  // @@protoc_insertion_point(field_get:planning.Trajectory.frame)
  return _internal_frame();
}
inline void Trajectory::_internal_set_frame(::planning::CoordFrame value) {
  assert(::planning::CoordFrame_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  frame_ = value;
}
inline void Trajectory::set_frame(::planning::CoordFrame value) {
  _internal_set_frame(value);
  // @@protoc_insertion_point(field_set:planning.Trajectory.frame)
}

// repeated .planning.TrajectoryPoint points = 3;
inline int Trajectory::_internal_points_size() const {
  return points_.size();
}
inline int Trajectory::points_size() const {
  return _internal_points_size();
}
inline void Trajectory::clear_points() {
  points_.Clear();
}
inline ::planning::TrajectoryPoint* Trajectory::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:planning.Trajectory.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::planning::TrajectoryPoint >*
Trajectory::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:planning.Trajectory.points)
  return &points_;
}
inline const ::planning::TrajectoryPoint& Trajectory::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::planning::TrajectoryPoint& Trajectory::points(int index) const {
  // @@protoc_insertion_point(field_get:planning.Trajectory.points)
  return _internal_points(index);
}
inline ::planning::TrajectoryPoint* Trajectory::_internal_add_points() {
  return points_.Add();
}
inline ::planning::TrajectoryPoint* Trajectory::add_points() {
  // @@protoc_insertion_point(field_add:planning.Trajectory.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::planning::TrajectoryPoint >&
Trajectory::points() const {
  // @@protoc_insertion_point(field_list:planning.Trajectory.points)
  return points_;
}

// optional double a = 4;
inline bool Trajectory::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Trajectory::has_a() const {
  return _internal_has_a();
}
inline void Trajectory::clear_a() {
  a_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Trajectory::_internal_a() const {
  return a_;
}
inline double Trajectory::a() const {
  // @@protoc_insertion_point(field_get:planning.Trajectory.a)
  return _internal_a();
}
inline void Trajectory::_internal_set_a(double value) {
  _has_bits_[0] |= 0x00000008u;
  a_ = value;
}
inline void Trajectory::set_a(double value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:planning.Trajectory.a)
}

// optional .planning.LaneChange lane_change = 5;
inline bool Trajectory::_internal_has_lane_change() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Trajectory::has_lane_change() const {
  return _internal_has_lane_change();
}
inline void Trajectory::clear_lane_change() {
  lane_change_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::planning::LaneChange Trajectory::_internal_lane_change() const {
  return static_cast< ::planning::LaneChange >(lane_change_);
}
inline ::planning::LaneChange Trajectory::lane_change() const {
  // @@protoc_insertion_point(field_get:planning.Trajectory.lane_change)
  return _internal_lane_change();
}
inline void Trajectory::_internal_set_lane_change(::planning::LaneChange value) {
  assert(::planning::LaneChange_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  lane_change_ = value;
}
inline void Trajectory::set_lane_change(::planning::LaneChange value) {
  _internal_set_lane_change(value);
  // @@protoc_insertion_point(field_set:planning.Trajectory.lane_change)
}

// optional .chassis.LightSwitch light = 6 [default = LIGHT_NONE];
inline bool Trajectory::_internal_has_light() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Trajectory::has_light() const {
  return _internal_has_light();
}
inline void Trajectory::clear_light() {
  light_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::chassis::LightSwitch Trajectory::_internal_light() const {
  return static_cast< ::chassis::LightSwitch >(light_);
}
inline ::chassis::LightSwitch Trajectory::light() const {
  // @@protoc_insertion_point(field_get:planning.Trajectory.light)
  return _internal_light();
}
inline void Trajectory::_internal_set_light(::chassis::LightSwitch value) {
  assert(::chassis::LightSwitch_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  light_ = value;
}
inline void Trajectory::set_light(::chassis::LightSwitch value) {
  _internal_set_light(value);
  // @@protoc_insertion_point(field_set:planning.Trajectory.light)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::planning::LaneChange> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::planning::LaneChange>() {
  return ::planning::LaneChange_descriptor();
}
template <> struct is_proto_enum< ::planning::CoordFrame> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::planning::CoordFrame>() {
  return ::planning::CoordFrame_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_trajectory_2eproto
