// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trajectory.proto

#ifndef PROTOBUF_trajectory_2eproto__INCLUDED
#define PROTOBUF_trajectory_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
#include "chassis.pb.h"
// @@protoc_insertion_point(includes)

namespace planning {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_trajectory_2eproto();
void protobuf_AssignDesc_trajectory_2eproto();
void protobuf_ShutdownFile_trajectory_2eproto();

class TrajectoryPoint;
class Trajectory;

enum LaneChange {
  LANE_KEEPING = 0,
  MERGE_LEFT = 1,
  MERGE_RIGHT = 2
};
bool LaneChange_IsValid(int value);
const LaneChange LaneChange_MIN = LANE_KEEPING;
const LaneChange LaneChange_MAX = MERGE_RIGHT;
const int LaneChange_ARRAYSIZE = LaneChange_MAX + 1;

const ::google::protobuf::EnumDescriptor* LaneChange_descriptor();
inline const ::std::string& LaneChange_Name(LaneChange value) {
  return ::google::protobuf::internal::NameOfEnum(
    LaneChange_descriptor(), value);
}
inline bool LaneChange_Parse(
    const ::std::string& name, LaneChange* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LaneChange>(
    LaneChange_descriptor(), name, value);
}
enum CoordFrame {
  FRAME_DEFAULT = 0,
  FRAME_ENU = 1,
  FRAME_LLH = 2,
  FRAME_IMU = 3,
  FRAME_VEHICLE = 5
};
bool CoordFrame_IsValid(int value);
const CoordFrame CoordFrame_MIN = FRAME_DEFAULT;
const CoordFrame CoordFrame_MAX = FRAME_VEHICLE;
const int CoordFrame_ARRAYSIZE = CoordFrame_MAX + 1;

const ::google::protobuf::EnumDescriptor* CoordFrame_descriptor();
inline const ::std::string& CoordFrame_Name(CoordFrame value) {
  return ::google::protobuf::internal::NameOfEnum(
    CoordFrame_descriptor(), value);
}
inline bool CoordFrame_Parse(
    const ::std::string& name, CoordFrame* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CoordFrame>(
    CoordFrame_descriptor(), name, value);
}
// ===================================================================

class TrajectoryPoint : public ::google::protobuf::Message {
 public:
  TrajectoryPoint();
  virtual ~TrajectoryPoint();

  TrajectoryPoint(const TrajectoryPoint& from);

  inline TrajectoryPoint& operator=(const TrajectoryPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrajectoryPoint& default_instance();

  void Swap(TrajectoryPoint* other);

  // implements Message ----------------------------------------------

  TrajectoryPoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrajectoryPoint& from);
  void MergeFrom(const TrajectoryPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x() const;
  inline void set_x(double value);

  // optional double y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y() const;
  inline void set_y(double value);

  // optional double z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline double z() const;
  inline void set_z(double value);

  // optional double t = 4;
  inline bool has_t() const;
  inline void clear_t();
  static const int kTFieldNumber = 4;
  inline double t() const;
  inline void set_t(double value);

  // optional double v = 5;
  inline bool has_v() const;
  inline void clear_v();
  static const int kVFieldNumber = 5;
  inline double v() const;
  inline void set_v(double value);

  // optional double a = 6;
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 6;
  inline double a() const;
  inline void set_a(double value);

  // optional double theta = 7;
  inline bool has_theta() const;
  inline void clear_theta();
  static const int kThetaFieldNumber = 7;
  inline double theta() const;
  inline void set_theta(double value);

  // optional double kappa = 8;
  inline bool has_kappa() const;
  inline void clear_kappa();
  static const int kKappaFieldNumber = 8;
  inline double kappa() const;
  inline void set_kappa(double value);

  // optional double s = 9;
  inline bool has_s() const;
  inline void clear_s();
  static const int kSFieldNumber = 9;
  inline double s() const;
  inline void set_s(double value);

  // @@protoc_insertion_point(class_scope:planning.TrajectoryPoint)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_t();
  inline void clear_has_t();
  inline void set_has_v();
  inline void clear_has_v();
  inline void set_has_a();
  inline void clear_has_a();
  inline void set_has_theta();
  inline void clear_has_theta();
  inline void set_has_kappa();
  inline void clear_has_kappa();
  inline void set_has_s();
  inline void clear_has_s();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double x_;
  double y_;
  double z_;
  double t_;
  double v_;
  double a_;
  double theta_;
  double kappa_;
  double s_;
  friend void  protobuf_AddDesc_trajectory_2eproto();
  friend void protobuf_AssignDesc_trajectory_2eproto();
  friend void protobuf_ShutdownFile_trajectory_2eproto();

  void InitAsDefaultInstance();
  static TrajectoryPoint* default_instance_;
};
// -------------------------------------------------------------------

class Trajectory : public ::google::protobuf::Message {
 public:
  Trajectory();
  virtual ~Trajectory();

  Trajectory(const Trajectory& from);

  inline Trajectory& operator=(const Trajectory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Trajectory& default_instance();

  void Swap(Trajectory* other);

  // implements Message ----------------------------------------------

  Trajectory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Trajectory& from);
  void MergeFrom(const Trajectory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.Header header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::common::Header& header() const;
  inline ::common::Header* mutable_header();
  inline ::common::Header* release_header();
  inline void set_allocated_header(::common::Header* header);

  // optional .planning.CoordFrame frame = 2;
  inline bool has_frame() const;
  inline void clear_frame();
  static const int kFrameFieldNumber = 2;
  inline ::planning::CoordFrame frame() const;
  inline void set_frame(::planning::CoordFrame value);

  // repeated .planning.TrajectoryPoint points = 3;
  inline int points_size() const;
  inline void clear_points();
  static const int kPointsFieldNumber = 3;
  inline const ::planning::TrajectoryPoint& points(int index) const;
  inline ::planning::TrajectoryPoint* mutable_points(int index);
  inline ::planning::TrajectoryPoint* add_points();
  inline const ::google::protobuf::RepeatedPtrField< ::planning::TrajectoryPoint >&
      points() const;
  inline ::google::protobuf::RepeatedPtrField< ::planning::TrajectoryPoint >*
      mutable_points();

  // optional double a = 4;
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 4;
  inline double a() const;
  inline void set_a(double value);

  // optional .planning.LaneChange lane_change = 5;
  inline bool has_lane_change() const;
  inline void clear_lane_change();
  static const int kLaneChangeFieldNumber = 5;
  inline ::planning::LaneChange lane_change() const;
  inline void set_lane_change(::planning::LaneChange value);

  // optional .chassis.LightSwitch light = 6 [default = LIGHT_NONE];
  inline bool has_light() const;
  inline void clear_light();
  static const int kLightFieldNumber = 6;
  inline ::chassis::LightSwitch light() const;
  inline void set_light(::chassis::LightSwitch value);

  // @@protoc_insertion_point(class_scope:planning.Trajectory)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_frame();
  inline void clear_has_frame();
  inline void set_has_a();
  inline void clear_has_a();
  inline void set_has_lane_change();
  inline void clear_has_lane_change();
  inline void set_has_light();
  inline void clear_has_light();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::Header* header_;
  ::google::protobuf::RepeatedPtrField< ::planning::TrajectoryPoint > points_;
  int frame_;
  int lane_change_;
  double a_;
  int light_;
  friend void  protobuf_AddDesc_trajectory_2eproto();
  friend void protobuf_AssignDesc_trajectory_2eproto();
  friend void protobuf_ShutdownFile_trajectory_2eproto();

  void InitAsDefaultInstance();
  static Trajectory* default_instance_;
};
// ===================================================================


// ===================================================================

// TrajectoryPoint

// optional double x = 1;
inline bool TrajectoryPoint::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrajectoryPoint::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrajectoryPoint::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrajectoryPoint::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double TrajectoryPoint::x() const {
  // @@protoc_insertion_point(field_get:planning.TrajectoryPoint.x)
  return x_;
}
inline void TrajectoryPoint::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:planning.TrajectoryPoint.x)
}

// optional double y = 2;
inline bool TrajectoryPoint::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrajectoryPoint::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrajectoryPoint::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrajectoryPoint::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double TrajectoryPoint::y() const {
  // @@protoc_insertion_point(field_get:planning.TrajectoryPoint.y)
  return y_;
}
inline void TrajectoryPoint::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:planning.TrajectoryPoint.y)
}

// optional double z = 3;
inline bool TrajectoryPoint::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrajectoryPoint::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrajectoryPoint::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrajectoryPoint::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double TrajectoryPoint::z() const {
  // @@protoc_insertion_point(field_get:planning.TrajectoryPoint.z)
  return z_;
}
inline void TrajectoryPoint::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:planning.TrajectoryPoint.z)
}

// optional double t = 4;
inline bool TrajectoryPoint::has_t() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrajectoryPoint::set_has_t() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrajectoryPoint::clear_has_t() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrajectoryPoint::clear_t() {
  t_ = 0;
  clear_has_t();
}
inline double TrajectoryPoint::t() const {
  // @@protoc_insertion_point(field_get:planning.TrajectoryPoint.t)
  return t_;
}
inline void TrajectoryPoint::set_t(double value) {
  set_has_t();
  t_ = value;
  // @@protoc_insertion_point(field_set:planning.TrajectoryPoint.t)
}

// optional double v = 5;
inline bool TrajectoryPoint::has_v() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrajectoryPoint::set_has_v() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrajectoryPoint::clear_has_v() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrajectoryPoint::clear_v() {
  v_ = 0;
  clear_has_v();
}
inline double TrajectoryPoint::v() const {
  // @@protoc_insertion_point(field_get:planning.TrajectoryPoint.v)
  return v_;
}
inline void TrajectoryPoint::set_v(double value) {
  set_has_v();
  v_ = value;
  // @@protoc_insertion_point(field_set:planning.TrajectoryPoint.v)
}

// optional double a = 6;
inline bool TrajectoryPoint::has_a() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TrajectoryPoint::set_has_a() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TrajectoryPoint::clear_has_a() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TrajectoryPoint::clear_a() {
  a_ = 0;
  clear_has_a();
}
inline double TrajectoryPoint::a() const {
  // @@protoc_insertion_point(field_get:planning.TrajectoryPoint.a)
  return a_;
}
inline void TrajectoryPoint::set_a(double value) {
  set_has_a();
  a_ = value;
  // @@protoc_insertion_point(field_set:planning.TrajectoryPoint.a)
}

// optional double theta = 7;
inline bool TrajectoryPoint::has_theta() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TrajectoryPoint::set_has_theta() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TrajectoryPoint::clear_has_theta() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TrajectoryPoint::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
inline double TrajectoryPoint::theta() const {
  // @@protoc_insertion_point(field_get:planning.TrajectoryPoint.theta)
  return theta_;
}
inline void TrajectoryPoint::set_theta(double value) {
  set_has_theta();
  theta_ = value;
  // @@protoc_insertion_point(field_set:planning.TrajectoryPoint.theta)
}

// optional double kappa = 8;
inline bool TrajectoryPoint::has_kappa() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TrajectoryPoint::set_has_kappa() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TrajectoryPoint::clear_has_kappa() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TrajectoryPoint::clear_kappa() {
  kappa_ = 0;
  clear_has_kappa();
}
inline double TrajectoryPoint::kappa() const {
  // @@protoc_insertion_point(field_get:planning.TrajectoryPoint.kappa)
  return kappa_;
}
inline void TrajectoryPoint::set_kappa(double value) {
  set_has_kappa();
  kappa_ = value;
  // @@protoc_insertion_point(field_set:planning.TrajectoryPoint.kappa)
}

// optional double s = 9;
inline bool TrajectoryPoint::has_s() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TrajectoryPoint::set_has_s() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TrajectoryPoint::clear_has_s() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TrajectoryPoint::clear_s() {
  s_ = 0;
  clear_has_s();
}
inline double TrajectoryPoint::s() const {
  // @@protoc_insertion_point(field_get:planning.TrajectoryPoint.s)
  return s_;
}
inline void TrajectoryPoint::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:planning.TrajectoryPoint.s)
}

// -------------------------------------------------------------------

// Trajectory

// optional .common.Header header = 1;
inline bool Trajectory::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Trajectory::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Trajectory::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Trajectory::clear_header() {
  if (header_ != NULL) header_->::common::Header::Clear();
  clear_has_header();
}
inline const ::common::Header& Trajectory::header() const {
  // @@protoc_insertion_point(field_get:planning.Trajectory.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::common::Header* Trajectory::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::common::Header;
  // @@protoc_insertion_point(field_mutable:planning.Trajectory.header)
  return header_;
}
inline ::common::Header* Trajectory::release_header() {
  clear_has_header();
  ::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Trajectory::set_allocated_header(::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:planning.Trajectory.header)
}

// optional .planning.CoordFrame frame = 2;
inline bool Trajectory::has_frame() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Trajectory::set_has_frame() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Trajectory::clear_has_frame() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Trajectory::clear_frame() {
  frame_ = 0;
  clear_has_frame();
}
inline ::planning::CoordFrame Trajectory::frame() const {
  // @@protoc_insertion_point(field_get:planning.Trajectory.frame)
  return static_cast< ::planning::CoordFrame >(frame_);
}
inline void Trajectory::set_frame(::planning::CoordFrame value) {
  assert(::planning::CoordFrame_IsValid(value));
  set_has_frame();
  frame_ = value;
  // @@protoc_insertion_point(field_set:planning.Trajectory.frame)
}

// repeated .planning.TrajectoryPoint points = 3;
inline int Trajectory::points_size() const {
  return points_.size();
}
inline void Trajectory::clear_points() {
  points_.Clear();
}
inline const ::planning::TrajectoryPoint& Trajectory::points(int index) const {
  // @@protoc_insertion_point(field_get:planning.Trajectory.points)
  return points_.Get(index);
}
inline ::planning::TrajectoryPoint* Trajectory::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:planning.Trajectory.points)
  return points_.Mutable(index);
}
inline ::planning::TrajectoryPoint* Trajectory::add_points() {
  // @@protoc_insertion_point(field_add:planning.Trajectory.points)
  return points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::planning::TrajectoryPoint >&
Trajectory::points() const {
  // @@protoc_insertion_point(field_list:planning.Trajectory.points)
  return points_;
}
inline ::google::protobuf::RepeatedPtrField< ::planning::TrajectoryPoint >*
Trajectory::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:planning.Trajectory.points)
  return &points_;
}

// optional double a = 4;
inline bool Trajectory::has_a() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Trajectory::set_has_a() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Trajectory::clear_has_a() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Trajectory::clear_a() {
  a_ = 0;
  clear_has_a();
}
inline double Trajectory::a() const {
  // @@protoc_insertion_point(field_get:planning.Trajectory.a)
  return a_;
}
inline void Trajectory::set_a(double value) {
  set_has_a();
  a_ = value;
  // @@protoc_insertion_point(field_set:planning.Trajectory.a)
}

// optional .planning.LaneChange lane_change = 5;
inline bool Trajectory::has_lane_change() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Trajectory::set_has_lane_change() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Trajectory::clear_has_lane_change() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Trajectory::clear_lane_change() {
  lane_change_ = 0;
  clear_has_lane_change();
}
inline ::planning::LaneChange Trajectory::lane_change() const {
  // @@protoc_insertion_point(field_get:planning.Trajectory.lane_change)
  return static_cast< ::planning::LaneChange >(lane_change_);
}
inline void Trajectory::set_lane_change(::planning::LaneChange value) {
  assert(::planning::LaneChange_IsValid(value));
  set_has_lane_change();
  lane_change_ = value;
  // @@protoc_insertion_point(field_set:planning.Trajectory.lane_change)
}

// optional .chassis.LightSwitch light = 6 [default = LIGHT_NONE];
inline bool Trajectory::has_light() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Trajectory::set_has_light() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Trajectory::clear_has_light() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Trajectory::clear_light() {
  light_ = 0;
  clear_has_light();
}
inline ::chassis::LightSwitch Trajectory::light() const {
  // @@protoc_insertion_point(field_get:planning.Trajectory.light)
  return static_cast< ::chassis::LightSwitch >(light_);
}
inline void Trajectory::set_light(::chassis::LightSwitch value) {
  assert(::chassis::LightSwitch_IsValid(value));
  set_has_light();
  light_ = value;
  // @@protoc_insertion_point(field_set:planning.Trajectory.light)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::planning::LaneChange> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::planning::LaneChange>() {
  return ::planning::LaneChange_descriptor();
}
template <> struct is_proto_enum< ::planning::CoordFrame> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::planning::CoordFrame>() {
  return ::planning::CoordFrame_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_trajectory_2eproto__INCLUDED
