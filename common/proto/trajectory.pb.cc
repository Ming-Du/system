// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trajectory.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "trajectory.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace planning {

namespace {

const ::google::protobuf::Descriptor* TrajectoryPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrajectoryPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* Trajectory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Trajectory_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LaneChange_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CoordFrame_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_trajectory_2eproto() {
  protobuf_AddDesc_trajectory_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "trajectory.proto");
  GOOGLE_CHECK(file != NULL);
  TrajectoryPoint_descriptor_ = file->message_type(0);
  static const int TrajectoryPoint_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, kappa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, s_),
  };
  TrajectoryPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrajectoryPoint_descriptor_,
      TrajectoryPoint::default_instance_,
      TrajectoryPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrajectoryPoint));
  Trajectory_descriptor_ = file->message_type(1);
  static const int Trajectory_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, lane_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, light_),
  };
  Trajectory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Trajectory_descriptor_,
      Trajectory::default_instance_,
      Trajectory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Trajectory));
  LaneChange_descriptor_ = file->enum_type(0);
  CoordFrame_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_trajectory_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrajectoryPoint_descriptor_, &TrajectoryPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Trajectory_descriptor_, &Trajectory::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_trajectory_2eproto() {
  delete TrajectoryPoint::default_instance_;
  delete TrajectoryPoint_reflection_;
  delete Trajectory::default_instance_;
  delete Trajectory_reflection_;
}

void protobuf_AddDesc_trajectory_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::common::protobuf_AddDesc_header_2eproto();
  ::chassis::protobuf_AddDesc_chassis_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020trajectory.proto\022\010planning\032\014header.pro"
    "to\032\rchassis.proto\"|\n\017TrajectoryPoint\022\t\n\001"
    "x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\t\n\001t\030\004 \001(\001"
    "\022\t\n\001v\030\005 \001(\001\022\t\n\001a\030\006 \001(\001\022\r\n\005theta\030\007 \001(\001\022\r\n"
    "\005kappa\030\010 \001(\001\022\t\n\001s\030\t \001(\001\"\343\001\n\nTrajectory\022\036"
    "\n\006header\030\001 \001(\0132\016.common.Header\022#\n\005frame\030"
    "\002 \001(\0162\024.planning.CoordFrame\022)\n\006points\030\003 "
    "\003(\0132\031.planning.TrajectoryPoint\022\t\n\001a\030\004 \001("
    "\001\022)\n\013lane_change\030\005 \001(\0162\024.planning.LaneCh"
    "ange\022/\n\005light\030\006 \001(\0162\024.chassis.LightSwitc"
    "h:\nLIGHT_NONE*\?\n\nLaneChange\022\020\n\014LANE_KEEP"
    "ING\020\000\022\016\n\nMERGE_LEFT\020\001\022\017\n\013MERGE_RIGHT\020\002*_"
    "\n\nCoordFrame\022\021\n\rFRAME_DEFAULT\020\000\022\r\n\tFRAME"
    "_ENU\020\001\022\r\n\tFRAME_LLH\020\002\022\r\n\tFRAME_IMU\020\003\022\021\n\r"
    "FRAME_VEHICLE\020\005", 575);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "trajectory.proto", &protobuf_RegisterTypes);
  TrajectoryPoint::default_instance_ = new TrajectoryPoint();
  Trajectory::default_instance_ = new Trajectory();
  TrajectoryPoint::default_instance_->InitAsDefaultInstance();
  Trajectory::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_trajectory_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_trajectory_2eproto {
  StaticDescriptorInitializer_trajectory_2eproto() {
    protobuf_AddDesc_trajectory_2eproto();
  }
} static_descriptor_initializer_trajectory_2eproto_;
const ::google::protobuf::EnumDescriptor* LaneChange_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LaneChange_descriptor_;
}
bool LaneChange_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CoordFrame_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CoordFrame_descriptor_;
}
bool CoordFrame_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TrajectoryPoint::kXFieldNumber;
const int TrajectoryPoint::kYFieldNumber;
const int TrajectoryPoint::kZFieldNumber;
const int TrajectoryPoint::kTFieldNumber;
const int TrajectoryPoint::kVFieldNumber;
const int TrajectoryPoint::kAFieldNumber;
const int TrajectoryPoint::kThetaFieldNumber;
const int TrajectoryPoint::kKappaFieldNumber;
const int TrajectoryPoint::kSFieldNumber;
#endif  // !_MSC_VER

TrajectoryPoint::TrajectoryPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning.TrajectoryPoint)
}

void TrajectoryPoint::InitAsDefaultInstance() {
}

TrajectoryPoint::TrajectoryPoint(const TrajectoryPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:planning.TrajectoryPoint)
}

void TrajectoryPoint::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  t_ = 0;
  v_ = 0;
  a_ = 0;
  theta_ = 0;
  kappa_ = 0;
  s_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrajectoryPoint::~TrajectoryPoint() {
  // @@protoc_insertion_point(destructor:planning.TrajectoryPoint)
  SharedDtor();
}

void TrajectoryPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrajectoryPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrajectoryPoint_descriptor_;
}

const TrajectoryPoint& TrajectoryPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trajectory_2eproto();
  return *default_instance_;
}

TrajectoryPoint* TrajectoryPoint::default_instance_ = NULL;

TrajectoryPoint* TrajectoryPoint::New() const {
  return new TrajectoryPoint;
}

void TrajectoryPoint::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TrajectoryPoint*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(x_, kappa_);
  }
  s_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrajectoryPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning.TrajectoryPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // optional double z = 3;
      case 3: {
        if (tag == 25) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_t;
        break;
      }

      // optional double t = 4;
      case 4: {
        if (tag == 33) {
         parse_t:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_)));
          set_has_t();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_v;
        break;
      }

      // optional double v = 5;
      case 5: {
        if (tag == 41) {
         parse_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_a;
        break;
      }

      // optional double a = 6;
      case 6: {
        if (tag == 49) {
         parse_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_theta;
        break;
      }

      // optional double theta = 7;
      case 7: {
        if (tag == 57) {
         parse_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
          set_has_theta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_kappa;
        break;
      }

      // optional double kappa = 8;
      case 8: {
        if (tag == 65) {
         parse_kappa:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kappa_)));
          set_has_kappa();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_s;
        break;
      }

      // optional double s = 9;
      case 9: {
        if (tag == 73) {
         parse_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
          set_has_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning.TrajectoryPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning.TrajectoryPoint)
  return false;
#undef DO_
}

void TrajectoryPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning.TrajectoryPoint)
  // optional double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // optional double t = 4;
  if (has_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->t(), output);
  }

  // optional double v = 5;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->v(), output);
  }

  // optional double a = 6;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->a(), output);
  }

  // optional double theta = 7;
  if (has_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->theta(), output);
  }

  // optional double kappa = 8;
  if (has_kappa()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->kappa(), output);
  }

  // optional double s = 9;
  if (has_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->s(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:planning.TrajectoryPoint)
}

::google::protobuf::uint8* TrajectoryPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:planning.TrajectoryPoint)
  // optional double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // optional double t = 4;
  if (has_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->t(), target);
  }

  // optional double v = 5;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->v(), target);
  }

  // optional double a = 6;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->a(), target);
  }

  // optional double theta = 7;
  if (has_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->theta(), target);
  }

  // optional double kappa = 8;
  if (has_kappa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->kappa(), target);
  }

  // optional double s = 9;
  if (has_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->s(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning.TrajectoryPoint)
  return target;
}

int TrajectoryPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

    // optional double t = 4;
    if (has_t()) {
      total_size += 1 + 8;
    }

    // optional double v = 5;
    if (has_v()) {
      total_size += 1 + 8;
    }

    // optional double a = 6;
    if (has_a()) {
      total_size += 1 + 8;
    }

    // optional double theta = 7;
    if (has_theta()) {
      total_size += 1 + 8;
    }

    // optional double kappa = 8;
    if (has_kappa()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double s = 9;
    if (has_s()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrajectoryPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrajectoryPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrajectoryPoint::MergeFrom(const TrajectoryPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_t()) {
      set_t(from.t());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
    if (from.has_a()) {
      set_a(from.a());
    }
    if (from.has_theta()) {
      set_theta(from.theta());
    }
    if (from.has_kappa()) {
      set_kappa(from.kappa());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_s()) {
      set_s(from.s());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrajectoryPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryPoint::CopyFrom(const TrajectoryPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryPoint::IsInitialized() const {

  return true;
}

void TrajectoryPoint::Swap(TrajectoryPoint* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(t_, other->t_);
    std::swap(v_, other->v_);
    std::swap(a_, other->a_);
    std::swap(theta_, other->theta_);
    std::swap(kappa_, other->kappa_);
    std::swap(s_, other->s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrajectoryPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrajectoryPoint_descriptor_;
  metadata.reflection = TrajectoryPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Trajectory::kHeaderFieldNumber;
const int Trajectory::kFrameFieldNumber;
const int Trajectory::kPointsFieldNumber;
const int Trajectory::kAFieldNumber;
const int Trajectory::kLaneChangeFieldNumber;
const int Trajectory::kLightFieldNumber;
#endif  // !_MSC_VER

Trajectory::Trajectory()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning.Trajectory)
}

void Trajectory::InitAsDefaultInstance() {
  header_ = const_cast< ::common::Header*>(&::common::Header::default_instance());
}

Trajectory::Trajectory(const Trajectory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:planning.Trajectory)
}

void Trajectory::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  frame_ = 0;
  a_ = 0;
  lane_change_ = 0;
  light_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Trajectory::~Trajectory() {
  // @@protoc_insertion_point(destructor:planning.Trajectory)
  SharedDtor();
}

void Trajectory::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void Trajectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trajectory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Trajectory_descriptor_;
}

const Trajectory& Trajectory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trajectory_2eproto();
  return *default_instance_;
}

Trajectory* Trajectory::default_instance_ = NULL;

Trajectory* Trajectory::New() const {
  return new Trajectory;
}

void Trajectory::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Trajectory*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 59) {
    ZR_(frame_, light_);
    if (has_header()) {
      if (header_ != NULL) header_->::common::Header::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Trajectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning.Trajectory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_frame;
        break;
      }

      // optional .planning.CoordFrame frame = 2;
      case 2: {
        if (tag == 16) {
         parse_frame:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::planning::CoordFrame_IsValid(value)) {
            set_frame(static_cast< ::planning::CoordFrame >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_points;
        break;
      }

      // repeated .planning.TrajectoryPoint points = 3;
      case 3: {
        if (tag == 26) {
         parse_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_points;
        if (input->ExpectTag(33)) goto parse_a;
        break;
      }

      // optional double a = 4;
      case 4: {
        if (tag == 33) {
         parse_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_lane_change;
        break;
      }

      // optional .planning.LaneChange lane_change = 5;
      case 5: {
        if (tag == 40) {
         parse_lane_change:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::planning::LaneChange_IsValid(value)) {
            set_lane_change(static_cast< ::planning::LaneChange >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_light;
        break;
      }

      // optional .chassis.LightSwitch light = 6 [default = LIGHT_NONE];
      case 6: {
        if (tag == 48) {
         parse_light:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::chassis::LightSwitch_IsValid(value)) {
            set_light(static_cast< ::chassis::LightSwitch >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning.Trajectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning.Trajectory)
  return false;
#undef DO_
}

void Trajectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning.Trajectory)
  // optional .common.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional .planning.CoordFrame frame = 2;
  if (has_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->frame(), output);
  }

  // repeated .planning.TrajectoryPoint points = 3;
  for (int i = 0; i < this->points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->points(i), output);
  }

  // optional double a = 4;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->a(), output);
  }

  // optional .planning.LaneChange lane_change = 5;
  if (has_lane_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->lane_change(), output);
  }

  // optional .chassis.LightSwitch light = 6 [default = LIGHT_NONE];
  if (has_light()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->light(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:planning.Trajectory)
}

::google::protobuf::uint8* Trajectory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:planning.Trajectory)
  // optional .common.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional .planning.CoordFrame frame = 2;
  if (has_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->frame(), target);
  }

  // repeated .planning.TrajectoryPoint points = 3;
  for (int i = 0; i < this->points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->points(i), target);
  }

  // optional double a = 4;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->a(), target);
  }

  // optional .planning.LaneChange lane_change = 5;
  if (has_lane_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->lane_change(), target);
  }

  // optional .chassis.LightSwitch light = 6 [default = LIGHT_NONE];
  if (has_light()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->light(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning.Trajectory)
  return target;
}

int Trajectory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .planning.CoordFrame frame = 2;
    if (has_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->frame());
    }

    // optional double a = 4;
    if (has_a()) {
      total_size += 1 + 8;
    }

    // optional .planning.LaneChange lane_change = 5;
    if (has_lane_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lane_change());
    }

    // optional .chassis.LightSwitch light = 6 [default = LIGHT_NONE];
    if (has_light()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->light());
    }

  }
  // repeated .planning.TrajectoryPoint points = 3;
  total_size += 1 * this->points_size();
  for (int i = 0; i < this->points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->points(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trajectory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Trajectory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Trajectory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Trajectory::MergeFrom(const Trajectory& from) {
  GOOGLE_CHECK_NE(&from, this);
  points_.MergeFrom(from.points_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::common::Header::MergeFrom(from.header());
    }
    if (from.has_frame()) {
      set_frame(from.frame());
    }
    if (from.has_a()) {
      set_a(from.a());
    }
    if (from.has_lane_change()) {
      set_lane_change(from.lane_change());
    }
    if (from.has_light()) {
      set_light(from.light());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Trajectory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectory::CopyFrom(const Trajectory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory::IsInitialized() const {

  return true;
}

void Trajectory::Swap(Trajectory* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(frame_, other->frame_);
    points_.Swap(&other->points_);
    std::swap(a_, other->a_);
    std::swap(lane_change_, other->lane_change_);
    std::swap(light_, other->light_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Trajectory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Trajectory_descriptor_;
  metadata.reflection = Trajectory_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning

// @@protoc_insertion_point(global_scope)
