// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_command.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_control_5fcommand_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_control_5fcommand_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
#include "chassis.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_control_5fcommand_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_control_5fcommand_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_control_5fcommand_2eproto;
namespace chassis {
class ControlCommand;
class ControlCommandDefaultTypeInternal;
extern ControlCommandDefaultTypeInternal _ControlCommand_default_instance_;
}  // namespace chassis
PROTOBUF_NAMESPACE_OPEN
template<> ::chassis::ControlCommand* Arena::CreateMaybeMessage<::chassis::ControlCommand>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chassis {

// ===================================================================

class ControlCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chassis.ControlCommand) */ {
 public:
  ControlCommand();
  virtual ~ControlCommand();

  ControlCommand(const ControlCommand& from);
  ControlCommand(ControlCommand&& from) noexcept
    : ControlCommand() {
    *this = ::std::move(from);
  }

  inline ControlCommand& operator=(const ControlCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlCommand& operator=(ControlCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControlCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlCommand* internal_default_instance() {
    return reinterpret_cast<const ControlCommand*>(
               &_ControlCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ControlCommand& a, ControlCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControlCommand* New() const final {
    return CreateMaybeMessage<ControlCommand>(nullptr);
  }

  ControlCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControlCommand& from);
  void MergeFrom(const ControlCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chassis.ControlCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fcommand_2eproto);
    return ::descriptor_table_control_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kPilotModeFieldNumber = 2,
    kSteeringFieldNumber = 3,
    kSpeedFieldNumber = 4,
    kAccelFieldNumber = 5,
    kThrottleFieldNumber = 6,
    kBrakeFieldNumber = 7,
    kGearFieldNumber = 8,
    kLightFieldNumber = 9,
    kHornFieldNumber = 10,
    kHighbeamFieldNumber = 11,
    kLowbeamFieldNumber = 12,
    kFoglightFieldNumber = 13,
    kClearanceLampsFieldNumber = 14,
    kWarnLightFieldNumber = 15,
    kParkingBrakeFieldNumber = 16,
    kDriveOffFieldNumber = 20,
    kDecToStopFieldNumber = 21,
  };
  // optional .common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::common::Header& header() const;
  ::common::Header* release_header();
  ::common::Header* mutable_header();
  void set_allocated_header(::common::Header* header);
  private:
  const ::common::Header& _internal_header() const;
  ::common::Header* _internal_mutable_header();
  public:

  // optional .chassis.PilotMode pilot_mode = 2 [default = MODE_MANUAL];
  bool has_pilot_mode() const;
  private:
  bool _internal_has_pilot_mode() const;
  public:
  void clear_pilot_mode();
  ::chassis::PilotMode pilot_mode() const;
  void set_pilot_mode(::chassis::PilotMode value);
  private:
  ::chassis::PilotMode _internal_pilot_mode() const;
  void _internal_set_pilot_mode(::chassis::PilotMode value);
  public:

  // optional float steering = 3 [default = 0];
  bool has_steering() const;
  private:
  bool _internal_has_steering() const;
  public:
  void clear_steering();
  float steering() const;
  void set_steering(float value);
  private:
  float _internal_steering() const;
  void _internal_set_steering(float value);
  public:

  // optional float speed = 4 [default = 0];
  bool has_speed() const;
  private:
  bool _internal_has_speed() const;
  public:
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // optional float accel = 5 [default = 0];
  bool has_accel() const;
  private:
  bool _internal_has_accel() const;
  public:
  void clear_accel();
  float accel() const;
  void set_accel(float value);
  private:
  float _internal_accel() const;
  void _internal_set_accel(float value);
  public:

  // optional float throttle = 6 [default = 0];
  bool has_throttle() const;
  private:
  bool _internal_has_throttle() const;
  public:
  void clear_throttle();
  float throttle() const;
  void set_throttle(float value);
  private:
  float _internal_throttle() const;
  void _internal_set_throttle(float value);
  public:

  // optional float brake = 7 [default = 0];
  bool has_brake() const;
  private:
  bool _internal_has_brake() const;
  public:
  void clear_brake();
  float brake() const;
  void set_brake(float value);
  private:
  float _internal_brake() const;
  void _internal_set_brake(float value);
  public:

  // optional .chassis.GearPosition gear = 8 [default = GEAR_NONE];
  bool has_gear() const;
  private:
  bool _internal_has_gear() const;
  public:
  void clear_gear();
  ::chassis::GearPosition gear() const;
  void set_gear(::chassis::GearPosition value);
  private:
  ::chassis::GearPosition _internal_gear() const;
  void _internal_set_gear(::chassis::GearPosition value);
  public:

  // optional .chassis.LightSwitch light = 9 [default = LIGHT_NONE];
  bool has_light() const;
  private:
  bool _internal_has_light() const;
  public:
  void clear_light();
  ::chassis::LightSwitch light() const;
  void set_light(::chassis::LightSwitch value);
  private:
  ::chassis::LightSwitch _internal_light() const;
  void _internal_set_light(::chassis::LightSwitch value);
  public:

  // optional bool horn = 10 [default = false];
  bool has_horn() const;
  private:
  bool _internal_has_horn() const;
  public:
  void clear_horn();
  bool horn() const;
  void set_horn(bool value);
  private:
  bool _internal_horn() const;
  void _internal_set_horn(bool value);
  public:

  // optional bool highbeam = 11 [default = false];
  bool has_highbeam() const;
  private:
  bool _internal_has_highbeam() const;
  public:
  void clear_highbeam();
  bool highbeam() const;
  void set_highbeam(bool value);
  private:
  bool _internal_highbeam() const;
  void _internal_set_highbeam(bool value);
  public:

  // optional bool lowbeam = 12 [default = false];
  bool has_lowbeam() const;
  private:
  bool _internal_has_lowbeam() const;
  public:
  void clear_lowbeam();
  bool lowbeam() const;
  void set_lowbeam(bool value);
  private:
  bool _internal_lowbeam() const;
  void _internal_set_lowbeam(bool value);
  public:

  // optional bool foglight = 13 [default = false];
  bool has_foglight() const;
  private:
  bool _internal_has_foglight() const;
  public:
  void clear_foglight();
  bool foglight() const;
  void set_foglight(bool value);
  private:
  bool _internal_foglight() const;
  void _internal_set_foglight(bool value);
  public:

  // optional bool clearance_lamps = 14 [default = false];
  bool has_clearance_lamps() const;
  private:
  bool _internal_has_clearance_lamps() const;
  public:
  void clear_clearance_lamps();
  bool clearance_lamps() const;
  void set_clearance_lamps(bool value);
  private:
  bool _internal_clearance_lamps() const;
  void _internal_set_clearance_lamps(bool value);
  public:

  // optional bool warn_light = 15 [default = false];
  bool has_warn_light() const;
  private:
  bool _internal_has_warn_light() const;
  public:
  void clear_warn_light();
  bool warn_light() const;
  void set_warn_light(bool value);
  private:
  bool _internal_warn_light() const;
  void _internal_set_warn_light(bool value);
  public:

  // optional bool parking_brake = 16 [default = false];
  bool has_parking_brake() const;
  private:
  bool _internal_has_parking_brake() const;
  public:
  void clear_parking_brake();
  bool parking_brake() const;
  void set_parking_brake(bool value);
  private:
  bool _internal_parking_brake() const;
  void _internal_set_parking_brake(bool value);
  public:

  // optional bool drive_off = 20;
  bool has_drive_off() const;
  private:
  bool _internal_has_drive_off() const;
  public:
  void clear_drive_off();
  bool drive_off() const;
  void set_drive_off(bool value);
  private:
  bool _internal_drive_off() const;
  void _internal_set_drive_off(bool value);
  public:

  // optional bool dec_to_stop = 21;
  bool has_dec_to_stop() const;
  private:
  bool _internal_has_dec_to_stop() const;
  public:
  void clear_dec_to_stop();
  bool dec_to_stop() const;
  void set_dec_to_stop(bool value);
  private:
  bool _internal_dec_to_stop() const;
  void _internal_set_dec_to_stop(bool value);
  public:

  // @@protoc_insertion_point(class_scope:chassis.ControlCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::common::Header* header_;
  int pilot_mode_;
  float steering_;
  float speed_;
  float accel_;
  float throttle_;
  float brake_;
  int gear_;
  int light_;
  bool horn_;
  bool highbeam_;
  bool lowbeam_;
  bool foglight_;
  bool clearance_lamps_;
  bool warn_light_;
  bool parking_brake_;
  bool drive_off_;
  bool dec_to_stop_;
  friend struct ::TableStruct_control_5fcommand_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ControlCommand

// optional .common.Header header = 1;
inline bool ControlCommand::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool ControlCommand::has_header() const {
  return _internal_has_header();
}
inline const ::common::Header& ControlCommand::_internal_header() const {
  const ::common::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::Header*>(
      &::common::_Header_default_instance_);
}
inline const ::common::Header& ControlCommand::header() const {
  // @@protoc_insertion_point(field_get:chassis.ControlCommand.header)
  return _internal_header();
}
inline ::common::Header* ControlCommand::release_header() {
  // @@protoc_insertion_point(field_release:chassis.ControlCommand.header)
  _has_bits_[0] &= ~0x00000001u;
  ::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::Header* ControlCommand::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::common::Header* ControlCommand::mutable_header() {
  // @@protoc_insertion_point(field_mutable:chassis.ControlCommand.header)
  return _internal_mutable_header();
}
inline void ControlCommand::set_allocated_header(::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:chassis.ControlCommand.header)
}

// optional .chassis.PilotMode pilot_mode = 2 [default = MODE_MANUAL];
inline bool ControlCommand::_internal_has_pilot_mode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ControlCommand::has_pilot_mode() const {
  return _internal_has_pilot_mode();
}
inline void ControlCommand::clear_pilot_mode() {
  pilot_mode_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::chassis::PilotMode ControlCommand::_internal_pilot_mode() const {
  return static_cast< ::chassis::PilotMode >(pilot_mode_);
}
inline ::chassis::PilotMode ControlCommand::pilot_mode() const {
  // @@protoc_insertion_point(field_get:chassis.ControlCommand.pilot_mode)
  return _internal_pilot_mode();
}
inline void ControlCommand::_internal_set_pilot_mode(::chassis::PilotMode value) {
  assert(::chassis::PilotMode_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  pilot_mode_ = value;
}
inline void ControlCommand::set_pilot_mode(::chassis::PilotMode value) {
  _internal_set_pilot_mode(value);
  // @@protoc_insertion_point(field_set:chassis.ControlCommand.pilot_mode)
}

// optional float steering = 3 [default = 0];
inline bool ControlCommand::_internal_has_steering() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ControlCommand::has_steering() const {
  return _internal_has_steering();
}
inline void ControlCommand::clear_steering() {
  steering_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float ControlCommand::_internal_steering() const {
  return steering_;
}
inline float ControlCommand::steering() const {
  // @@protoc_insertion_point(field_get:chassis.ControlCommand.steering)
  return _internal_steering();
}
inline void ControlCommand::_internal_set_steering(float value) {
  _has_bits_[0] |= 0x00000004u;
  steering_ = value;
}
inline void ControlCommand::set_steering(float value) {
  _internal_set_steering(value);
  // @@protoc_insertion_point(field_set:chassis.ControlCommand.steering)
}

// optional float speed = 4 [default = 0];
inline bool ControlCommand::_internal_has_speed() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ControlCommand::has_speed() const {
  return _internal_has_speed();
}
inline void ControlCommand::clear_speed() {
  speed_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float ControlCommand::_internal_speed() const {
  return speed_;
}
inline float ControlCommand::speed() const {
  // @@protoc_insertion_point(field_get:chassis.ControlCommand.speed)
  return _internal_speed();
}
inline void ControlCommand::_internal_set_speed(float value) {
  _has_bits_[0] |= 0x00000008u;
  speed_ = value;
}
inline void ControlCommand::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:chassis.ControlCommand.speed)
}

// optional float accel = 5 [default = 0];
inline bool ControlCommand::_internal_has_accel() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ControlCommand::has_accel() const {
  return _internal_has_accel();
}
inline void ControlCommand::clear_accel() {
  accel_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float ControlCommand::_internal_accel() const {
  return accel_;
}
inline float ControlCommand::accel() const {
  // @@protoc_insertion_point(field_get:chassis.ControlCommand.accel)
  return _internal_accel();
}
inline void ControlCommand::_internal_set_accel(float value) {
  _has_bits_[0] |= 0x00000010u;
  accel_ = value;
}
inline void ControlCommand::set_accel(float value) {
  _internal_set_accel(value);
  // @@protoc_insertion_point(field_set:chassis.ControlCommand.accel)
}

// optional float throttle = 6 [default = 0];
inline bool ControlCommand::_internal_has_throttle() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ControlCommand::has_throttle() const {
  return _internal_has_throttle();
}
inline void ControlCommand::clear_throttle() {
  throttle_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float ControlCommand::_internal_throttle() const {
  return throttle_;
}
inline float ControlCommand::throttle() const {
  // @@protoc_insertion_point(field_get:chassis.ControlCommand.throttle)
  return _internal_throttle();
}
inline void ControlCommand::_internal_set_throttle(float value) {
  _has_bits_[0] |= 0x00000020u;
  throttle_ = value;
}
inline void ControlCommand::set_throttle(float value) {
  _internal_set_throttle(value);
  // @@protoc_insertion_point(field_set:chassis.ControlCommand.throttle)
}

// optional float brake = 7 [default = 0];
inline bool ControlCommand::_internal_has_brake() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ControlCommand::has_brake() const {
  return _internal_has_brake();
}
inline void ControlCommand::clear_brake() {
  brake_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float ControlCommand::_internal_brake() const {
  return brake_;
}
inline float ControlCommand::brake() const {
  // @@protoc_insertion_point(field_get:chassis.ControlCommand.brake)
  return _internal_brake();
}
inline void ControlCommand::_internal_set_brake(float value) {
  _has_bits_[0] |= 0x00000040u;
  brake_ = value;
}
inline void ControlCommand::set_brake(float value) {
  _internal_set_brake(value);
  // @@protoc_insertion_point(field_set:chassis.ControlCommand.brake)
}

// optional .chassis.GearPosition gear = 8 [default = GEAR_NONE];
inline bool ControlCommand::_internal_has_gear() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ControlCommand::has_gear() const {
  return _internal_has_gear();
}
inline void ControlCommand::clear_gear() {
  gear_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::chassis::GearPosition ControlCommand::_internal_gear() const {
  return static_cast< ::chassis::GearPosition >(gear_);
}
inline ::chassis::GearPosition ControlCommand::gear() const {
  // @@protoc_insertion_point(field_get:chassis.ControlCommand.gear)
  return _internal_gear();
}
inline void ControlCommand::_internal_set_gear(::chassis::GearPosition value) {
  assert(::chassis::GearPosition_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  gear_ = value;
}
inline void ControlCommand::set_gear(::chassis::GearPosition value) {
  _internal_set_gear(value);
  // @@protoc_insertion_point(field_set:chassis.ControlCommand.gear)
}

// optional .chassis.LightSwitch light = 9 [default = LIGHT_NONE];
inline bool ControlCommand::_internal_has_light() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ControlCommand::has_light() const {
  return _internal_has_light();
}
inline void ControlCommand::clear_light() {
  light_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::chassis::LightSwitch ControlCommand::_internal_light() const {
  return static_cast< ::chassis::LightSwitch >(light_);
}
inline ::chassis::LightSwitch ControlCommand::light() const {
  // @@protoc_insertion_point(field_get:chassis.ControlCommand.light)
  return _internal_light();
}
inline void ControlCommand::_internal_set_light(::chassis::LightSwitch value) {
  assert(::chassis::LightSwitch_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  light_ = value;
}
inline void ControlCommand::set_light(::chassis::LightSwitch value) {
  _internal_set_light(value);
  // @@protoc_insertion_point(field_set:chassis.ControlCommand.light)
}

// optional bool horn = 10 [default = false];
inline bool ControlCommand::_internal_has_horn() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ControlCommand::has_horn() const {
  return _internal_has_horn();
}
inline void ControlCommand::clear_horn() {
  horn_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool ControlCommand::_internal_horn() const {
  return horn_;
}
inline bool ControlCommand::horn() const {
  // @@protoc_insertion_point(field_get:chassis.ControlCommand.horn)
  return _internal_horn();
}
inline void ControlCommand::_internal_set_horn(bool value) {
  _has_bits_[0] |= 0x00000200u;
  horn_ = value;
}
inline void ControlCommand::set_horn(bool value) {
  _internal_set_horn(value);
  // @@protoc_insertion_point(field_set:chassis.ControlCommand.horn)
}

// optional bool highbeam = 11 [default = false];
inline bool ControlCommand::_internal_has_highbeam() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ControlCommand::has_highbeam() const {
  return _internal_has_highbeam();
}
inline void ControlCommand::clear_highbeam() {
  highbeam_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool ControlCommand::_internal_highbeam() const {
  return highbeam_;
}
inline bool ControlCommand::highbeam() const {
  // @@protoc_insertion_point(field_get:chassis.ControlCommand.highbeam)
  return _internal_highbeam();
}
inline void ControlCommand::_internal_set_highbeam(bool value) {
  _has_bits_[0] |= 0x00000400u;
  highbeam_ = value;
}
inline void ControlCommand::set_highbeam(bool value) {
  _internal_set_highbeam(value);
  // @@protoc_insertion_point(field_set:chassis.ControlCommand.highbeam)
}

// optional bool lowbeam = 12 [default = false];
inline bool ControlCommand::_internal_has_lowbeam() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ControlCommand::has_lowbeam() const {
  return _internal_has_lowbeam();
}
inline void ControlCommand::clear_lowbeam() {
  lowbeam_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool ControlCommand::_internal_lowbeam() const {
  return lowbeam_;
}
inline bool ControlCommand::lowbeam() const {
  // @@protoc_insertion_point(field_get:chassis.ControlCommand.lowbeam)
  return _internal_lowbeam();
}
inline void ControlCommand::_internal_set_lowbeam(bool value) {
  _has_bits_[0] |= 0x00000800u;
  lowbeam_ = value;
}
inline void ControlCommand::set_lowbeam(bool value) {
  _internal_set_lowbeam(value);
  // @@protoc_insertion_point(field_set:chassis.ControlCommand.lowbeam)
}

// optional bool foglight = 13 [default = false];
inline bool ControlCommand::_internal_has_foglight() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ControlCommand::has_foglight() const {
  return _internal_has_foglight();
}
inline void ControlCommand::clear_foglight() {
  foglight_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool ControlCommand::_internal_foglight() const {
  return foglight_;
}
inline bool ControlCommand::foglight() const {
  // @@protoc_insertion_point(field_get:chassis.ControlCommand.foglight)
  return _internal_foglight();
}
inline void ControlCommand::_internal_set_foglight(bool value) {
  _has_bits_[0] |= 0x00001000u;
  foglight_ = value;
}
inline void ControlCommand::set_foglight(bool value) {
  _internal_set_foglight(value);
  // @@protoc_insertion_point(field_set:chassis.ControlCommand.foglight)
}

// optional bool clearance_lamps = 14 [default = false];
inline bool ControlCommand::_internal_has_clearance_lamps() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ControlCommand::has_clearance_lamps() const {
  return _internal_has_clearance_lamps();
}
inline void ControlCommand::clear_clearance_lamps() {
  clearance_lamps_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool ControlCommand::_internal_clearance_lamps() const {
  return clearance_lamps_;
}
inline bool ControlCommand::clearance_lamps() const {
  // @@protoc_insertion_point(field_get:chassis.ControlCommand.clearance_lamps)
  return _internal_clearance_lamps();
}
inline void ControlCommand::_internal_set_clearance_lamps(bool value) {
  _has_bits_[0] |= 0x00002000u;
  clearance_lamps_ = value;
}
inline void ControlCommand::set_clearance_lamps(bool value) {
  _internal_set_clearance_lamps(value);
  // @@protoc_insertion_point(field_set:chassis.ControlCommand.clearance_lamps)
}

// optional bool warn_light = 15 [default = false];
inline bool ControlCommand::_internal_has_warn_light() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ControlCommand::has_warn_light() const {
  return _internal_has_warn_light();
}
inline void ControlCommand::clear_warn_light() {
  warn_light_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool ControlCommand::_internal_warn_light() const {
  return warn_light_;
}
inline bool ControlCommand::warn_light() const {
  // @@protoc_insertion_point(field_get:chassis.ControlCommand.warn_light)
  return _internal_warn_light();
}
inline void ControlCommand::_internal_set_warn_light(bool value) {
  _has_bits_[0] |= 0x00004000u;
  warn_light_ = value;
}
inline void ControlCommand::set_warn_light(bool value) {
  _internal_set_warn_light(value);
  // @@protoc_insertion_point(field_set:chassis.ControlCommand.warn_light)
}

// optional bool parking_brake = 16 [default = false];
inline bool ControlCommand::_internal_has_parking_brake() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ControlCommand::has_parking_brake() const {
  return _internal_has_parking_brake();
}
inline void ControlCommand::clear_parking_brake() {
  parking_brake_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool ControlCommand::_internal_parking_brake() const {
  return parking_brake_;
}
inline bool ControlCommand::parking_brake() const {
  // @@protoc_insertion_point(field_get:chassis.ControlCommand.parking_brake)
  return _internal_parking_brake();
}
inline void ControlCommand::_internal_set_parking_brake(bool value) {
  _has_bits_[0] |= 0x00008000u;
  parking_brake_ = value;
}
inline void ControlCommand::set_parking_brake(bool value) {
  _internal_set_parking_brake(value);
  // @@protoc_insertion_point(field_set:chassis.ControlCommand.parking_brake)
}

// optional bool drive_off = 20;
inline bool ControlCommand::_internal_has_drive_off() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ControlCommand::has_drive_off() const {
  return _internal_has_drive_off();
}
inline void ControlCommand::clear_drive_off() {
  drive_off_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool ControlCommand::_internal_drive_off() const {
  return drive_off_;
}
inline bool ControlCommand::drive_off() const {
  // @@protoc_insertion_point(field_get:chassis.ControlCommand.drive_off)
  return _internal_drive_off();
}
inline void ControlCommand::_internal_set_drive_off(bool value) {
  _has_bits_[0] |= 0x00010000u;
  drive_off_ = value;
}
inline void ControlCommand::set_drive_off(bool value) {
  _internal_set_drive_off(value);
  // @@protoc_insertion_point(field_set:chassis.ControlCommand.drive_off)
}

// optional bool dec_to_stop = 21;
inline bool ControlCommand::_internal_has_dec_to_stop() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ControlCommand::has_dec_to_stop() const {
  return _internal_has_dec_to_stop();
}
inline void ControlCommand::clear_dec_to_stop() {
  dec_to_stop_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool ControlCommand::_internal_dec_to_stop() const {
  return dec_to_stop_;
}
inline bool ControlCommand::dec_to_stop() const {
  // @@protoc_insertion_point(field_get:chassis.ControlCommand.dec_to_stop)
  return _internal_dec_to_stop();
}
inline void ControlCommand::_internal_set_dec_to_stop(bool value) {
  _has_bits_[0] |= 0x00020000u;
  dec_to_stop_ = value;
}
inline void ControlCommand::set_dec_to_stop(bool value) {
  _internal_set_dec_to_stop(value);
  // @@protoc_insertion_point(field_set:chassis.ControlCommand.dec_to_stop)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace chassis

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_control_5fcommand_2eproto
