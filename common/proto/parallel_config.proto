syntax = "proto3";
package parallel;
import "geometry.proto";

// 平行驾驶上传到云端的车辆标定文件、camera 信息
// 由平行驾驶长连接（在 103 节点上）读取车辆配置文件，不再让云端读取车端原始的私有配置文件，统一使用该 pb 为云端提供车辆各种配置
// /home/mogo/autopilot/share/config/vehicle/vehicle_config.txt    文件内容对应 pb: system/common/proto/vehicle_config.proto: VehicleConfig
// /home/mogo/autopilot/share/config/vehicle/sensor/calibrated_sensor.pb.txt    文件内容对应 pb：system/common/proto/sensor_meta.proto: SensorInfo

message VehicleConfig {
    string vin = 1;
    string plate = 2;
    string brand = 3;
    float length = 6; //meter
    float width  = 7; //meter;
    float height = 8; //meter;
    float weight = 9; //kg
    float accel_min = 10; //-m/s^2
    float accel_max = 11; //+m/s^2
    float steering_min = 12; //-degree
    float steering_max = 13; //+degree
    float wheel_base = 14; //meter
    float front_wheel_base = 15; //meter
    float rear_wheel_base = 16; //meter
    float steer_ratio = 17;
    float max_abs_speed_when_stopped = 18;
    double throttle_deadzone = 19; //m/s^2
    double brake_deadzone = 20;
    float center_to_front = 22; //meter
    float center_to_back  = 23; //meter
    float center_to_left  = 24; //meter
    float center_to_right = 25; //meter
    string vehicle_color = 26;
}

// 当前云端使用 SENSING_120 和 RSLIDAR_80
enum SensorType {
    GNSS = 0;
    CAMERA_6MM = 1;
    CAMERA_12MM = 2;
    SENSING_30 = 10;
    SENSING_60 = 11;
    SENSING_120 = 12;  //
    RSLIDAR_80 = 14;   //
    SENSING_190 = 34;
}

enum SensorOrientation {
    FRONT = 0;
    LEFT_FORWARD = 1;
    LEFT = 2;
    LEFT_BACKWARD = 3;
    REAR = 4;
    RIGHT_BACKWARD = 5;
    RIGHT = 6;
    RIGHT_FORWARD = 7;
    PANORAMIC = 8;
    MIDDLE = 9;
    FRONT_DOWN = 10;
    LEFT_DOWN = 11;
    RIGHT_DOWN = 12;
    REAR_DOWN = 13;
}

message Point3D {
    double x = 1;
    double y = 2;
    double z = 3;
}

message Quaternion {
    double x = 1;
    double y = 2;
    double z = 3;
    double w = 4;
}

message Extrinsic {
    Point3D translation = 1;
    Quaternion rotation = 2;
}

message Intrinsic {
    int32 width = 1;
    int32 height = 2;
    repeated double matrix = 3; // 3x3 matrix
}

message RegisteredSensor {
    repeated SensorInfo sensor_info = 1;
    string base = 2; // 车体坐标
}

message Distcoeff {
    repeated double distort_matrix = 1;  // 5x1 matrix
}

message SensorInfo {
    string name = 1;
    SensorType type = 2;
    SensorOrientation orientation = 3;
    string topic = 4;
    Extrinsic extrinsic = 6;
    Intrinsic intrinsic = 7;
    Distcoeff distcoeff = 8;
    double xi = 9;
}

message ParallelVehicleConfigs {
    VehicleConfig vehicle_config = 1;
    repeated SensorInfo sensor_infos = 2;
}
