// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: traffic_light.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "traffic_light.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace perception {

namespace {

const ::google::protobuf::Descriptor* TrafficLight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrafficLight_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrafficLights_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrafficLights_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LightType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LightState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_traffic_5flight_2eproto() {
  protobuf_AddDesc_traffic_5flight_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "traffic_light.proto");
  GOOGLE_CHECK(file != NULL);
  TrafficLight_descriptor_ = file->message_type(0);
  static const int TrafficLight_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, duration_),
  };
  TrafficLight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrafficLight_descriptor_,
      TrafficLight::default_instance_,
      TrafficLight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrafficLight));
  TrafficLights_descriptor_ = file->message_type(1);
  static const int TrafficLights_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLights, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLights, straight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLights, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLights, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLights, u_turn_),
  };
  TrafficLights_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrafficLights_descriptor_,
      TrafficLights::default_instance_,
      TrafficLights_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLights, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLights, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrafficLights));
  LightType_descriptor_ = file->enum_type(0);
  LightState_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_traffic_5flight_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrafficLight_descriptor_, &TrafficLight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrafficLights_descriptor_, &TrafficLights::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_traffic_5flight_2eproto() {
  delete TrafficLight::default_instance_;
  delete TrafficLight_reflection_;
  delete TrafficLights::default_instance_;
  delete TrafficLights_reflection_;
}

void protobuf_AddDesc_traffic_5flight_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::common::protobuf_AddDesc_header_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023traffic_light.proto\022\nperception\032\014heade"
    "r.proto\"\221\001\n\014TrafficLight\022\n\n\002id\030\001 \001(\003\0221\n\004"
    "type\030\002 \001(\0162\025.perception.LightType:\014TYPE_"
    "DEFAULT\0220\n\005state\030\003 \001(\0162\026.perception.Ligh"
    "tState:\tSTATE_OFF\022\020\n\010duration\030\004 \001(\002\"\326\001\n\r"
    "TrafficLights\022\036\n\006header\030\001 \001(\0132\016.common.H"
    "eader\022*\n\010straight\030\002 \001(\0132\030.perception.Tra"
    "fficLight\022&\n\004left\030\003 \001(\0132\030.perception.Tra"
    "fficLight\022\'\n\005right\030\004 \001(\0132\030.perception.Tr"
    "afficLight\022(\n\006u_turn\030\005 \001(\0132\030.perception."
    "TrafficLight*c\n\tLightType\022\020\n\014TYPE_DEFAUL"
    "T\020\000\022\020\n\014TYPE_VEHICLE\020\001\022\017\n\013TYPE_BICYLE\020\002\022\022"
    "\n\016TYPE_PEDSTRIAN\020\003\022\r\n\tTYPE_LANE\020\005*^\n\nLig"
    "htState\022\r\n\tSTATE_OFF\020\000\022\r\n\tSTATE_RED\020\001\022\020\n"
    "\014STATE_YELLOW\020\002\022\017\n\013STATE_GREEN\020\003\022\017\n\013STAT"
    "E_FLASH\020\004", 609);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "traffic_light.proto", &protobuf_RegisterTypes);
  TrafficLight::default_instance_ = new TrafficLight();
  TrafficLights::default_instance_ = new TrafficLights();
  TrafficLight::default_instance_->InitAsDefaultInstance();
  TrafficLights::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_traffic_5flight_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_traffic_5flight_2eproto {
  StaticDescriptorInitializer_traffic_5flight_2eproto() {
    protobuf_AddDesc_traffic_5flight_2eproto();
  }
} static_descriptor_initializer_traffic_5flight_2eproto_;
const ::google::protobuf::EnumDescriptor* LightType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LightType_descriptor_;
}
bool LightType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LightState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LightState_descriptor_;
}
bool LightState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TrafficLight::kIdFieldNumber;
const int TrafficLight::kTypeFieldNumber;
const int TrafficLight::kStateFieldNumber;
const int TrafficLight::kDurationFieldNumber;
#endif  // !_MSC_VER

TrafficLight::TrafficLight()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perception.TrafficLight)
}

void TrafficLight::InitAsDefaultInstance() {
}

TrafficLight::TrafficLight(const TrafficLight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:perception.TrafficLight)
}

void TrafficLight::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  state_ = 0;
  duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrafficLight::~TrafficLight() {
  // @@protoc_insertion_point(destructor:perception.TrafficLight)
  SharedDtor();
}

void TrafficLight::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrafficLight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficLight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrafficLight_descriptor_;
}

const TrafficLight& TrafficLight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_traffic_5flight_2eproto();
  return *default_instance_;
}

TrafficLight* TrafficLight::default_instance_ = NULL;

TrafficLight* TrafficLight::New() const {
  return new TrafficLight;
}

void TrafficLight::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TrafficLight*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, duration_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrafficLight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:perception.TrafficLight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .perception.LightType type = 2 [default = TYPE_DEFAULT];
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perception::LightType_IsValid(value)) {
            set_type(static_cast< ::perception::LightType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional .perception.LightState state = 3 [default = STATE_OFF];
      case 3: {
        if (tag == 24) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perception::LightState_IsValid(value)) {
            set_state(static_cast< ::perception::LightState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_duration;
        break;
      }

      // optional float duration = 4;
      case 4: {
        if (tag == 37) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perception.TrafficLight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perception.TrafficLight)
  return false;
#undef DO_
}

void TrafficLight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perception.TrafficLight)
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional .perception.LightType type = 2 [default = TYPE_DEFAULT];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .perception.LightState state = 3 [default = STATE_OFF];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  // optional float duration = 4;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->duration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:perception.TrafficLight)
}

::google::protobuf::uint8* TrafficLight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.TrafficLight)
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional .perception.LightType type = 2 [default = TYPE_DEFAULT];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .perception.LightState state = 3 [default = STATE_OFF];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  // optional float duration = 4;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->duration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.TrafficLight)
  return target;
}

int TrafficLight::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional .perception.LightType type = 2 [default = TYPE_DEFAULT];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .perception.LightState state = 3 [default = STATE_OFF];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional float duration = 4;
    if (has_duration()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficLight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrafficLight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrafficLight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrafficLight::MergeFrom(const TrafficLight& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrafficLight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLight::CopyFrom(const TrafficLight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLight::IsInitialized() const {

  return true;
}

void TrafficLight::Swap(TrafficLight* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(state_, other->state_);
    std::swap(duration_, other->duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrafficLight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrafficLight_descriptor_;
  metadata.reflection = TrafficLight_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrafficLights::kHeaderFieldNumber;
const int TrafficLights::kStraightFieldNumber;
const int TrafficLights::kLeftFieldNumber;
const int TrafficLights::kRightFieldNumber;
const int TrafficLights::kUTurnFieldNumber;
#endif  // !_MSC_VER

TrafficLights::TrafficLights()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perception.TrafficLights)
}

void TrafficLights::InitAsDefaultInstance() {
  header_ = const_cast< ::common::Header*>(&::common::Header::default_instance());
  straight_ = const_cast< ::perception::TrafficLight*>(&::perception::TrafficLight::default_instance());
  left_ = const_cast< ::perception::TrafficLight*>(&::perception::TrafficLight::default_instance());
  right_ = const_cast< ::perception::TrafficLight*>(&::perception::TrafficLight::default_instance());
  u_turn_ = const_cast< ::perception::TrafficLight*>(&::perception::TrafficLight::default_instance());
}

TrafficLights::TrafficLights(const TrafficLights& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:perception.TrafficLights)
}

void TrafficLights::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  straight_ = NULL;
  left_ = NULL;
  right_ = NULL;
  u_turn_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrafficLights::~TrafficLights() {
  // @@protoc_insertion_point(destructor:perception.TrafficLights)
  SharedDtor();
}

void TrafficLights::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete straight_;
    delete left_;
    delete right_;
    delete u_turn_;
  }
}

void TrafficLights::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficLights::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrafficLights_descriptor_;
}

const TrafficLights& TrafficLights::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_traffic_5flight_2eproto();
  return *default_instance_;
}

TrafficLights* TrafficLights::default_instance_ = NULL;

TrafficLights* TrafficLights::New() const {
  return new TrafficLights;
}

void TrafficLights::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_header()) {
      if (header_ != NULL) header_->::common::Header::Clear();
    }
    if (has_straight()) {
      if (straight_ != NULL) straight_->::perception::TrafficLight::Clear();
    }
    if (has_left()) {
      if (left_ != NULL) left_->::perception::TrafficLight::Clear();
    }
    if (has_right()) {
      if (right_ != NULL) right_->::perception::TrafficLight::Clear();
    }
    if (has_u_turn()) {
      if (u_turn_ != NULL) u_turn_->::perception::TrafficLight::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrafficLights::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:perception.TrafficLights)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_straight;
        break;
      }

      // optional .perception.TrafficLight straight = 2;
      case 2: {
        if (tag == 18) {
         parse_straight:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_straight()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_left;
        break;
      }

      // optional .perception.TrafficLight left = 3;
      case 3: {
        if (tag == 26) {
         parse_left:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_right;
        break;
      }

      // optional .perception.TrafficLight right = 4;
      case 4: {
        if (tag == 34) {
         parse_right:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_u_turn;
        break;
      }

      // optional .perception.TrafficLight u_turn = 5;
      case 5: {
        if (tag == 42) {
         parse_u_turn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_u_turn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perception.TrafficLights)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perception.TrafficLights)
  return false;
#undef DO_
}

void TrafficLights::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perception.TrafficLights)
  // optional .common.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional .perception.TrafficLight straight = 2;
  if (has_straight()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->straight(), output);
  }

  // optional .perception.TrafficLight left = 3;
  if (has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->left(), output);
  }

  // optional .perception.TrafficLight right = 4;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->right(), output);
  }

  // optional .perception.TrafficLight u_turn = 5;
  if (has_u_turn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->u_turn(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:perception.TrafficLights)
}

::google::protobuf::uint8* TrafficLights::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.TrafficLights)
  // optional .common.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional .perception.TrafficLight straight = 2;
  if (has_straight()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->straight(), target);
  }

  // optional .perception.TrafficLight left = 3;
  if (has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->left(), target);
  }

  // optional .perception.TrafficLight right = 4;
  if (has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->right(), target);
  }

  // optional .perception.TrafficLight u_turn = 5;
  if (has_u_turn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->u_turn(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.TrafficLights)
  return target;
}

int TrafficLights::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .perception.TrafficLight straight = 2;
    if (has_straight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->straight());
    }

    // optional .perception.TrafficLight left = 3;
    if (has_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->left());
    }

    // optional .perception.TrafficLight right = 4;
    if (has_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->right());
    }

    // optional .perception.TrafficLight u_turn = 5;
    if (has_u_turn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->u_turn());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficLights::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrafficLights* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrafficLights*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrafficLights::MergeFrom(const TrafficLights& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::common::Header::MergeFrom(from.header());
    }
    if (from.has_straight()) {
      mutable_straight()->::perception::TrafficLight::MergeFrom(from.straight());
    }
    if (from.has_left()) {
      mutable_left()->::perception::TrafficLight::MergeFrom(from.left());
    }
    if (from.has_right()) {
      mutable_right()->::perception::TrafficLight::MergeFrom(from.right());
    }
    if (from.has_u_turn()) {
      mutable_u_turn()->::perception::TrafficLight::MergeFrom(from.u_turn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrafficLights::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLights::CopyFrom(const TrafficLights& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLights::IsInitialized() const {

  return true;
}

void TrafficLights::Swap(TrafficLights* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(straight_, other->straight_);
    std::swap(left_, other->left_);
    std::swap(right_, other->right_);
    std::swap(u_turn_, other->u_turn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrafficLights::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrafficLights_descriptor_;
  metadata.reflection = TrafficLights_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception

// @@protoc_insertion_point(global_scope)
