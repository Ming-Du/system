// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chassis.proto

#ifndef PROTOBUF_chassis_2eproto__INCLUDED
#define PROTOBUF_chassis_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace chassis {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_chassis_2eproto();
void protobuf_AssignDesc_chassis_2eproto();
void protobuf_ShutdownFile_chassis_2eproto();


enum GearPosition {
  GEAR_NONE = 0,
  GEAR_N = 1,
  GEAR_R = 2,
  GEAR_P = 3,
  GEAR_D = 4
};
bool GearPosition_IsValid(int value);
const GearPosition GearPosition_MIN = GEAR_NONE;
const GearPosition GearPosition_MAX = GEAR_D;
const int GearPosition_ARRAYSIZE = GearPosition_MAX + 1;

const ::google::protobuf::EnumDescriptor* GearPosition_descriptor();
inline const ::std::string& GearPosition_Name(GearPosition value) {
  return ::google::protobuf::internal::NameOfEnum(
    GearPosition_descriptor(), value);
}
inline bool GearPosition_Parse(
    const ::std::string& name, GearPosition* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GearPosition>(
    GearPosition_descriptor(), name, value);
}
enum LightSwitch {
  LIGHT_NONE = 0,
  LIGHT_LEFT = 1,
  LIGHT_RIGHT = 2,
  LIGHT_FLASH = 3,
  LIGHT_MANUAL = 4,
  LIGHT_AUTO = 5
};
bool LightSwitch_IsValid(int value);
const LightSwitch LightSwitch_MIN = LIGHT_NONE;
const LightSwitch LightSwitch_MAX = LIGHT_AUTO;
const int LightSwitch_ARRAYSIZE = LightSwitch_MAX + 1;

const ::google::protobuf::EnumDescriptor* LightSwitch_descriptor();
inline const ::std::string& LightSwitch_Name(LightSwitch value) {
  return ::google::protobuf::internal::NameOfEnum(
    LightSwitch_descriptor(), value);
}
inline bool LightSwitch_Parse(
    const ::std::string& name, LightSwitch* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LightSwitch>(
    LightSwitch_descriptor(), name, value);
}
enum PilotMode {
  MODE_MANUAL = 0,
  MODE_AUTO_DRIVE = 1,
  MODE_STEER_ONLY = 2,
  MODE_SPEED_ONLY = 3
};
bool PilotMode_IsValid(int value);
const PilotMode PilotMode_MIN = MODE_MANUAL;
const PilotMode PilotMode_MAX = MODE_SPEED_ONLY;
const int PilotMode_ARRAYSIZE = PilotMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* PilotMode_descriptor();
inline const ::std::string& PilotMode_Name(PilotMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    PilotMode_descriptor(), value);
}
inline bool PilotMode_Parse(
    const ::std::string& name, PilotMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PilotMode>(
    PilotMode_descriptor(), name, value);
}
enum LongitudeDrivingMode {
  ManualMode = 0,
  AutomaticStandby = 1,
  AutomaticAcceleration = 2,
  AutomaticDeceleration = 3
};
bool LongitudeDrivingMode_IsValid(int value);
const LongitudeDrivingMode LongitudeDrivingMode_MIN = ManualMode;
const LongitudeDrivingMode LongitudeDrivingMode_MAX = AutomaticDeceleration;
const int LongitudeDrivingMode_ARRAYSIZE = LongitudeDrivingMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* LongitudeDrivingMode_descriptor();
inline const ::std::string& LongitudeDrivingMode_Name(LongitudeDrivingMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    LongitudeDrivingMode_descriptor(), value);
}
inline bool LongitudeDrivingMode_Parse(
    const ::std::string& name, LongitudeDrivingMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LongitudeDrivingMode>(
    LongitudeDrivingMode_descriptor(), name, value);
}
enum EPSSteeringMode {
  Manual = 0,
  Automatic = 1,
  ManualFromInterference = 2,
  ManualFromEPSFailure = 3,
  TemporaryInhibited = 4
};
bool EPSSteeringMode_IsValid(int value);
const EPSSteeringMode EPSSteeringMode_MIN = Manual;
const EPSSteeringMode EPSSteeringMode_MAX = TemporaryInhibited;
const int EPSSteeringMode_ARRAYSIZE = EPSSteeringMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* EPSSteeringMode_descriptor();
inline const ::std::string& EPSSteeringMode_Name(EPSSteeringMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EPSSteeringMode_descriptor(), value);
}
inline bool EPSSteeringMode_Parse(
    const ::std::string& name, EPSSteeringMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EPSSteeringMode>(
    EPSSteeringMode_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace chassis

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::chassis::GearPosition> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chassis::GearPosition>() {
  return ::chassis::GearPosition_descriptor();
}
template <> struct is_proto_enum< ::chassis::LightSwitch> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chassis::LightSwitch>() {
  return ::chassis::LightSwitch_descriptor();
}
template <> struct is_proto_enum< ::chassis::PilotMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chassis::PilotMode>() {
  return ::chassis::PilotMode_descriptor();
}
template <> struct is_proto_enum< ::chassis::LongitudeDrivingMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chassis::LongitudeDrivingMode>() {
  return ::chassis::LongitudeDrivingMode_descriptor();
}
template <> struct is_proto_enum< ::chassis::EPSSteeringMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chassis::EPSSteeringMode>() {
  return ::chassis::EPSSteeringMode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_chassis_2eproto__INCLUDED
