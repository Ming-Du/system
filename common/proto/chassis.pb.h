// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chassis.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chassis_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chassis_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chassis_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chassis_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chassis_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace chassis {

enum GearPosition : int {
  GEAR_NONE = 0,
  GEAR_N = 1,
  GEAR_R = 2,
  GEAR_P = 3,
  GEAR_D = 4
};
bool GearPosition_IsValid(int value);
constexpr GearPosition GearPosition_MIN = GEAR_NONE;
constexpr GearPosition GearPosition_MAX = GEAR_D;
constexpr int GearPosition_ARRAYSIZE = GearPosition_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GearPosition_descriptor();
template<typename T>
inline const std::string& GearPosition_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GearPosition>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GearPosition_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GearPosition_descriptor(), enum_t_value);
}
inline bool GearPosition_Parse(
    const std::string& name, GearPosition* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GearPosition>(
    GearPosition_descriptor(), name, value);
}
enum LightSwitch : int {
  LIGHT_NONE = 0,
  LIGHT_LEFT = 1,
  LIGHT_RIGHT = 2,
  LIGHT_FLASH = 3,
  LIGHT_MANUAL = 4,
  LIGHT_AUTO = 5
};
bool LightSwitch_IsValid(int value);
constexpr LightSwitch LightSwitch_MIN = LIGHT_NONE;
constexpr LightSwitch LightSwitch_MAX = LIGHT_AUTO;
constexpr int LightSwitch_ARRAYSIZE = LightSwitch_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LightSwitch_descriptor();
template<typename T>
inline const std::string& LightSwitch_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LightSwitch>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LightSwitch_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LightSwitch_descriptor(), enum_t_value);
}
inline bool LightSwitch_Parse(
    const std::string& name, LightSwitch* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LightSwitch>(
    LightSwitch_descriptor(), name, value);
}
enum PilotMode : int {
  MODE_MANUAL = 0,
  MODE_AUTO_DRIVE = 1,
  MODE_STEER_ONLY = 2,
  MODE_SPEED_ONLY = 3
};
bool PilotMode_IsValid(int value);
constexpr PilotMode PilotMode_MIN = MODE_MANUAL;
constexpr PilotMode PilotMode_MAX = MODE_SPEED_ONLY;
constexpr int PilotMode_ARRAYSIZE = PilotMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PilotMode_descriptor();
template<typename T>
inline const std::string& PilotMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PilotMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PilotMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PilotMode_descriptor(), enum_t_value);
}
inline bool PilotMode_Parse(
    const std::string& name, PilotMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PilotMode>(
    PilotMode_descriptor(), name, value);
}
enum LongitudeDrivingMode : int {
  ManualMode = 0,
  AutomaticStandby = 1,
  AutomaticAcceleration = 2,
  AutomaticDeceleration = 3
};
bool LongitudeDrivingMode_IsValid(int value);
constexpr LongitudeDrivingMode LongitudeDrivingMode_MIN = ManualMode;
constexpr LongitudeDrivingMode LongitudeDrivingMode_MAX = AutomaticDeceleration;
constexpr int LongitudeDrivingMode_ARRAYSIZE = LongitudeDrivingMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LongitudeDrivingMode_descriptor();
template<typename T>
inline const std::string& LongitudeDrivingMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LongitudeDrivingMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LongitudeDrivingMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LongitudeDrivingMode_descriptor(), enum_t_value);
}
inline bool LongitudeDrivingMode_Parse(
    const std::string& name, LongitudeDrivingMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LongitudeDrivingMode>(
    LongitudeDrivingMode_descriptor(), name, value);
}
enum EPSSteeringMode : int {
  Manual = 0,
  Automatic = 1,
  ManualFromInterference = 2,
  ManualFromEPSFailure = 3,
  TemporaryInhibited = 4
};
bool EPSSteeringMode_IsValid(int value);
constexpr EPSSteeringMode EPSSteeringMode_MIN = Manual;
constexpr EPSSteeringMode EPSSteeringMode_MAX = TemporaryInhibited;
constexpr int EPSSteeringMode_ARRAYSIZE = EPSSteeringMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPSSteeringMode_descriptor();
template<typename T>
inline const std::string& EPSSteeringMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EPSSteeringMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EPSSteeringMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EPSSteeringMode_descriptor(), enum_t_value);
}
inline bool EPSSteeringMode_Parse(
    const std::string& name, EPSSteeringMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EPSSteeringMode>(
    EPSSteeringMode_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace chassis

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::chassis::GearPosition> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chassis::GearPosition>() {
  return ::chassis::GearPosition_descriptor();
}
template <> struct is_proto_enum< ::chassis::LightSwitch> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chassis::LightSwitch>() {
  return ::chassis::LightSwitch_descriptor();
}
template <> struct is_proto_enum< ::chassis::PilotMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chassis::PilotMode>() {
  return ::chassis::PilotMode_descriptor();
}
template <> struct is_proto_enum< ::chassis::LongitudeDrivingMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chassis::LongitudeDrivingMode>() {
  return ::chassis::LongitudeDrivingMode_descriptor();
}
template <> struct is_proto_enum< ::chassis::EPSSteeringMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chassis::EPSSteeringMode>() {
  return ::chassis::EPSSteeringMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chassis_2eproto
