syntax = "proto2";
package perception;

import "header.proto";
import "geometry.proto";

enum ObjectType {
  TYPE_UNKNOWN = 0;
  TYPE_PEDESTRIAN = 3;
  TYPE_BICYCLE = 4;
  TYPE_MOTOR = 5;
  TYPE_RIDER = 6;
  TYPE_CAR = 7;
  TYPE_TRUCK = 8;
  TYPE_BUS = 9;
  TYPE_TRAIN = 10;
  TYPE_SIGN = 20;
  TYPE_LIGHT = 30;
  TYPE_RED = 31;
  TYPE_GREEN = 32;
  TYPE_YELLOW = 33;
  TYPE_BLACK = 34;
  TYPE_TRIANGLEROADBLOCK = 35;
  TYPE_WARNINGTRIANGLE = 36;
  TYPE_UNKNOWN_SMALL = 91;
  TYPE_UNKNOWN_BIG = 92;
  TYPE_UNKNOWN_STATIC = 93;
  TYPE_UNKNOWN_DYNAMIC = 94;
}

message BBox2D {
  optional double xmin = 1 [default = nan];  // in pixel.
  optional double ymin = 2 [default = nan];
  optional double xmax = 3 [default = nan];
  optional double ymax = 4 [default = nan];
}

message CameraObjectSupplement {
  optional bool on_use = 1 [default = false];
  optional BBox2D box = 2;
  optional int32 cols = 3;
  optional int32 rows = 4;
}

message LidarObjectSupplement {
  optional bool on_use = 1 [default = false];
  // Format: [x0, y0, z0, x1, y1, z1...]
  repeated double cloud = 2 [packed = true];
}

message FalconLidarObjectSupplement {
  optional bool on_use = 1 [default = false];
  // Format: [x0, y0, z0, x1, y1, z1...]
  repeated double cloud = 2 [packed = true];
}

message RadarObjectSupplement {
  optional bool on_use = 1 [default = false];  
  optional float x = 2;
  optional float y = 3;
  optional float relative_vel_x = 4;
  optional float relative_vel_y = 5;
  optional float absolute_vel_x = 6;
  optional float absolute_vel_y = 7;
  optional bool  is_rear = 8 [default = false];  // the object from which sensor
}
// Modify(@liuxinyu): obu_test
message ObuObjectsSupplement {
  optional bool on_use = 1 [default = false];  
  optional float x = 2;
  optional float y = 3;
  optional float relative_vel_x = 4;
  optional float relative_vel_y = 5;
  optional float absolute_vel_x = 6;
  optional float absolute_vel_y = 7;
}

message Object {
  optional uint32 id = 1;                // obj id, after tracked
  optional string sensor_name = 2;
  
  optional ObjectType type = 3;          // obj category
  
  optional double time_stamp = 4;        // sensing time
  optional float confidence = 5;         // probability
  optional int32 status = 6;             // reserved

  optional float x_distance = 7;         // longitudinal distance
  optional float y_distance = 8;         // lateral distance
  optional float angle = 9;              // obj angle relative to host vehicle

  optional geometry.Point center = 10;    // x,y,z in meter
  optional geometry.Point centroid = 11;
  optional geometry.Vector3 size = 12;   // length width height(in meter)
  repeated geometry.Point contour = 13;  // contour points

  optional geometry.Vector3 velocity = 14; // sharing with visual/tracked obj
  optional geometry.Vector3 acceleration = 15;

  optional double tracking_time = 16;

  // camera supplement
  optional CameraObjectSupplement camera_supplement = 17;
  // lidar supplement
  optional LidarObjectSupplement lidar_supplement = 18;
  // radar supplement
  optional RadarObjectSupplement radar_supplement = 19;
    //lidar polygon
  repeated geometry.Point polygon = 20;  // polygon points
  // Modify(@liuxinyu): obu_test
  // obu supplement
  optional ObuObjectsSupplement obu_supplement = 21;
  optional float state = 22;         // predict--2, detect--1
 //falcon lidar supplement
  optional FalconLidarObjectSupplement falcon_lidar_supplement = 23;
  //ming.du
  optional CameraObjectSupplement vidar_supplement = 24;

}

message VisualObject {
  optional Object obj = 1;

  //bounding box in pixels
  optional int32 x = 2;                    // rect.x
  optional int32 y = 3;                    // rect.y
  optional int32 width = 4;                // rect.width
  optional int32 height = 5;               // rect.height
}

message VisualObjects {
  optional common.Header header = 1;
  optional string sensor_name = 2;
  repeated VisualObject objs = 3;
  optional int32 width = 4;        // image width
  optional int32 height = 5;       // image height
}

message TrackedObject {
  optional Object obj = 1;

  optional float yaw = 2;       //box orientation angle from x axis, counter clockwise(in rad),range 0 to 2*pi
  optional float yaw_rate = 3 [default = 32767];  //in rad/s
  optional geometry.Vector3 velocity = 4; // absolute velocity, in m/s, vx, vy, vz
  repeated geometry.Trace trace = 5;    // historical positions
  repeated geometry.Trace prediction = 6; // predicted global position in future stamp

  optional float absolute_longitude_v = 7;   // along lane speed, m/s
  optional float absolute_longitude_a = 8;   // in m/s2, longitudinal acc
  optional float absolute_lateral_v = 9;     // vertical to lane speed, left positive, m/s

  optional double longitude = 10;   // longitude , in degrees
  optional double latitude = 11;   // latitude , in degrees
  optional double alt = 12;     // height above mean sea level in meters

  optional double longitude_p = 13;   // position in East , in meters
  optional double latitude_p = 14;   // position in North , in meters
 
  optional double speed  = 15;// m/s
  optional double heading =16;// degrees
  // 1 - participant; 2 - obstacle 
  optional int32  object_category = 17 [default = 1];
  optional int32  obu_participant_type = 18 [default = 0];
  optional int32  obu_obstacle_type = 19 [default = 0];
  
//float x_speed             // longitudinal speed relative to host vehicle, m/s
//float y_speed             // lateral speed relative to host vehicle, m/s
}

message TrackedObjects {
  optional common.Header header = 1;
  optional string sensor_name = 2;
  repeated TrackedObject objs = 3;
}

message RadarObject {
  optional Object obj = 1;

  optional float yaw = 2;       //box orientation angle from x axis, counter clockwise(in rad),range -pi to pi
  optional float yaw_rate = 3;  //in rad/s
  optional geometry.Vector3 velocity = 4; // absolute velocity, in m/s, vx, vy, vz
  repeated geometry.Trace trace = 5;    // historical positions
  repeated geometry.Trace prediction = 6; // predicted global position in future stamp

  optional float absolute_longitude_v = 7;   // along lane speed, m/s
  optional float absolute_longitude_a = 8;   // in m/s2, longitudinal acc
  optional float absolute_lateral_v = 9;     // vertical to lane speed, left positive, m/s

  // obstacle Radar Cross-Section; unit = dBsm
  optional double rcs = 10;
  // 0 = moving, 1 = stationary, 2 = oncoming, 3 = stationary candidate
  // 4 = unknown, 5 = crossing stationary, 6 = crossing moving, 7 = stopped
  optional int32 dynprop = 11;
  // longitude distance standard deviation to the radar; (+) = forward; unit = m
  optional double longitude_dist_rms = 12;
  // lateral distance standard deviation to the radar; (+) = left; unit = m
  optional double lateral_dist_rms = 13;
  // longitude velocity standard deviation to the radar; (+) = forward; unit = m/s
  optional double longitude_vel_rms = 14;
  //lateral velocity standard deviation to the radar; (+) = left; unit = m/s
  optional double lateral_vel_rms = 15;
  // obstacle probability of existence
  optional double probexist = 16;
  //The following is only valid for the track object message
  // 0 = deleted, 1 = new, 2 = measured, 3 = predicted, 4 = deleted for, 5 = new from merge
  optional int32 meas_state = 17;
  // longitude acceleration standard deviation to the radar; (+) = forward; unit = m/s2
  optional double longitude_accel_rms = 18;
  // lateral acceleration standard deviation to the radar; (+) = left; unit = m/s2
  optional double lateral_accel_rms = 19;
  // orientation angle standard deviation to the radar; (+) = counterclockwise; unit = degree
  optional double oritation_angle_rms = 20;

//float x_speed             // longitudinal speed relative to host vehicle, m/s
//float y_speed             // lateral speed relative to host vehicle, m/s
}

message RadarObjects {
  optional common.Header header = 1;
  optional string sensor_name = 2;
  repeated RadarObject objs = 3;
}

message ObuObject {
  optional Object obj = 1;
  optional double longitude = 2;          // longitude , in degrees
  optional double latitude = 3;           // latitude , in degrees
  optional double alt = 4;                // height above mean sea level in meters
  optional geometry.Vector3 velocity = 5; // absolute velocity, in m/s, vx, vy, vz
  optional float yaw = 6;                 // box orientation angle from x axis, counter clockwise(in rad),range -pi to pi
  optional float yaw_rate = 7;            // in rad/s
  optional float heading = 8;             // gps head 
  optional float speed = 9;               // gps speed
  repeated geometry.Trace trace = 10;      // historical positions
  optional string source = 11;
}

message ObuObjects {
  optional common.Header header = 1;
  optional string sensor_name = 2;
  repeated ObuObject objs =3;
}
