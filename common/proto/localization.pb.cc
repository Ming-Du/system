// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: localization.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "localization.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace localization {

namespace {

const ::google::protobuf::Descriptor* Localization_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Localization_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LocalizationMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LocalizationFrame_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_localization_2eproto() {
  protobuf_AddDesc_localization_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "localization.proto");
  GOOGLE_CHECK(file != NULL);
  Localization_descriptor_ = file->message_type(0);
  static const int Localization_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Localization, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Localization, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Localization, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Localization, local_frame_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Localization, transform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Localization, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Localization, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Localization, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Localization, altitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Localization, roll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Localization, pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Localization, yaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Localization, roll_v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Localization, pitch_v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Localization, yaw_v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Localization, lateral_v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Localization, longitudinal_v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Localization, vertical_v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Localization, lateral_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Localization, longitudinal_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Localization, vertical_a_),
  };
  Localization_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Localization_descriptor_,
      Localization::default_instance_,
      Localization_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Localization, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Localization, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Localization));
  LocalizationMode_descriptor_ = file->enum_type(0);
  LocalizationFrame_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_localization_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Localization_descriptor_, &Localization::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_localization_2eproto() {
  delete Localization::default_instance_;
  delete Localization_reflection_;
}

void protobuf_AddDesc_localization_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::common::protobuf_AddDesc_header_2eproto();
  ::geometry::protobuf_AddDesc_geometry_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022localization.proto\022\014localization\032\014head"
    "er.proto\032\016geometry.proto\"\373\003\n\014Localizatio"
    "n\022\036\n\006header\030\001 \001(\0132\016.common.Header\0222\n\004mod"
    "e\030\002 \001(\0162\036.localization.LocalizationMode:"
    "\004GNSS\0225\n\005frame\030\003 \001(\0162\037.localization.Loca"
    "lizationFrame:\005LOCAL\022\027\n\017local_frame_seq\030"
    "\004 \001(\r\022\025\n\ttransform\030\005 \003(\001B\002\020\001\022!\n\010position"
    "\030\007 \001(\0132\017.geometry.Point\022\021\n\tlongitude\030\010 \001"
    "(\001\022\020\n\010latitude\030\t \001(\001\022\020\n\010altitude\030\n \001(\001\022\014"
    "\n\004roll\030\013 \001(\001\022\r\n\005pitch\030\014 \001(\001\022\013\n\003yaw\030\r \001(\001"
    "\022\016\n\006roll_v\030\016 \001(\001\022\017\n\007pitch_v\030\017 \001(\001\022\r\n\005yaw"
    "_v\030\020 \001(\001\022\021\n\tlateral_v\030\021 \001(\001\022\026\n\016longitudi"
    "nal_v\030\022 \001(\001\022\022\n\nvertical_v\030\023 \001(\001\022\021\n\tlater"
    "al_a\030\024 \001(\001\022\026\n\016longitudinal_a\030\025 \001(\001\022\022\n\nve"
    "rtical_a\030\026 \001(\001*-\n\020LocalizationMode\022\010\n\004GN"
    "SS\020\000\022\017\n\013LIDAR_BASED\020\001*)\n\021LocalizationFra"
    "me\022\t\n\005LOCAL\020\000\022\t\n\005WGS84\020\001", 664);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "localization.proto", &protobuf_RegisterTypes);
  Localization::default_instance_ = new Localization();
  Localization::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_localization_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_localization_2eproto {
  StaticDescriptorInitializer_localization_2eproto() {
    protobuf_AddDesc_localization_2eproto();
  }
} static_descriptor_initializer_localization_2eproto_;
const ::google::protobuf::EnumDescriptor* LocalizationMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalizationMode_descriptor_;
}
bool LocalizationMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LocalizationFrame_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalizationFrame_descriptor_;
}
bool LocalizationFrame_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Localization::kHeaderFieldNumber;
const int Localization::kModeFieldNumber;
const int Localization::kFrameFieldNumber;
const int Localization::kLocalFrameSeqFieldNumber;
const int Localization::kTransformFieldNumber;
const int Localization::kPositionFieldNumber;
const int Localization::kLongitudeFieldNumber;
const int Localization::kLatitudeFieldNumber;
const int Localization::kAltitudeFieldNumber;
const int Localization::kRollFieldNumber;
const int Localization::kPitchFieldNumber;
const int Localization::kYawFieldNumber;
const int Localization::kRollVFieldNumber;
const int Localization::kPitchVFieldNumber;
const int Localization::kYawVFieldNumber;
const int Localization::kLateralVFieldNumber;
const int Localization::kLongitudinalVFieldNumber;
const int Localization::kVerticalVFieldNumber;
const int Localization::kLateralAFieldNumber;
const int Localization::kLongitudinalAFieldNumber;
const int Localization::kVerticalAFieldNumber;
#endif  // !_MSC_VER

Localization::Localization()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:localization.Localization)
}

void Localization::InitAsDefaultInstance() {
  header_ = const_cast< ::common::Header*>(&::common::Header::default_instance());
  position_ = const_cast< ::geometry::Point*>(&::geometry::Point::default_instance());
}

Localization::Localization(const Localization& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:localization.Localization)
}

void Localization::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  mode_ = 0;
  frame_ = 0;
  local_frame_seq_ = 0u;
  position_ = NULL;
  longitude_ = 0;
  latitude_ = 0;
  altitude_ = 0;
  roll_ = 0;
  pitch_ = 0;
  yaw_ = 0;
  roll_v_ = 0;
  pitch_v_ = 0;
  yaw_v_ = 0;
  lateral_v_ = 0;
  longitudinal_v_ = 0;
  vertical_v_ = 0;
  lateral_a_ = 0;
  longitudinal_a_ = 0;
  vertical_a_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Localization::~Localization() {
  // @@protoc_insertion_point(destructor:localization.Localization)
  SharedDtor();
}

void Localization::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete position_;
  }
}

void Localization::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Localization::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Localization_descriptor_;
}

const Localization& Localization::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_localization_2eproto();
  return *default_instance_;
}

Localization* Localization::default_instance_ = NULL;

Localization* Localization::New() const {
  return new Localization;
}

void Localization::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Localization*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 239) {
    ZR_(mode_, frame_);
    ZR_(longitude_, latitude_);
    if (has_header()) {
      if (header_ != NULL) header_->::common::Header::Clear();
    }
    local_frame_seq_ = 0u;
    if (has_position()) {
      if (position_ != NULL) position_->::geometry::Point::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(altitude_, lateral_v_);
  }
  if (_has_bits_[16 / 32] & 2031616) {
    ZR_(longitudinal_v_, vertical_a_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  transform_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Localization::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:localization.Localization)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mode;
        break;
      }

      // optional .localization.LocalizationMode mode = 2 [default = GNSS];
      case 2: {
        if (tag == 16) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::localization::LocalizationMode_IsValid(value)) {
            set_mode(static_cast< ::localization::LocalizationMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_frame;
        break;
      }

      // optional .localization.LocalizationFrame frame = 3 [default = LOCAL];
      case 3: {
        if (tag == 24) {
         parse_frame:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::localization::LocalizationFrame_IsValid(value)) {
            set_frame(static_cast< ::localization::LocalizationFrame >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_local_frame_seq;
        break;
      }

      // optional uint32 local_frame_seq = 4;
      case 4: {
        if (tag == 32) {
         parse_local_frame_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_frame_seq_)));
          set_has_local_frame_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_transform;
        break;
      }

      // repeated double transform = 5 [packed = true];
      case 5: {
        if (tag == 42) {
         parse_transform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_transform())));
        } else if (tag == 41) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 42, input, this->mutable_transform())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_position;
        break;
      }

      // optional .geometry.Point position = 7;
      case 7: {
        if (tag == 58) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_longitude;
        break;
      }

      // optional double longitude = 8;
      case 8: {
        if (tag == 65) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_latitude;
        break;
      }

      // optional double latitude = 9;
      case 9: {
        if (tag == 73) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_altitude;
        break;
      }

      // optional double altitude = 10;
      case 10: {
        if (tag == 81) {
         parse_altitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
          set_has_altitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_roll;
        break;
      }

      // optional double roll = 11;
      case 11: {
        if (tag == 89) {
         parse_roll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roll_)));
          set_has_roll();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_pitch;
        break;
      }

      // optional double pitch = 12;
      case 12: {
        if (tag == 97) {
         parse_pitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitch_)));
          set_has_pitch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_yaw;
        break;
      }

      // optional double yaw = 13;
      case 13: {
        if (tag == 105) {
         parse_yaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_)));
          set_has_yaw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_roll_v;
        break;
      }

      // optional double roll_v = 14;
      case 14: {
        if (tag == 113) {
         parse_roll_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roll_v_)));
          set_has_roll_v();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_pitch_v;
        break;
      }

      // optional double pitch_v = 15;
      case 15: {
        if (tag == 121) {
         parse_pitch_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitch_v_)));
          set_has_pitch_v();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_yaw_v;
        break;
      }

      // optional double yaw_v = 16;
      case 16: {
        if (tag == 129) {
         parse_yaw_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_v_)));
          set_has_yaw_v();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_lateral_v;
        break;
      }

      // optional double lateral_v = 17;
      case 17: {
        if (tag == 137) {
         parse_lateral_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_v_)));
          set_has_lateral_v();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_longitudinal_v;
        break;
      }

      // optional double longitudinal_v = 18;
      case 18: {
        if (tag == 145) {
         parse_longitudinal_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitudinal_v_)));
          set_has_longitudinal_v();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(153)) goto parse_vertical_v;
        break;
      }

      // optional double vertical_v = 19;
      case 19: {
        if (tag == 153) {
         parse_vertical_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vertical_v_)));
          set_has_vertical_v();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_lateral_a;
        break;
      }

      // optional double lateral_a = 20;
      case 20: {
        if (tag == 161) {
         parse_lateral_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_a_)));
          set_has_lateral_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(169)) goto parse_longitudinal_a;
        break;
      }

      // optional double longitudinal_a = 21;
      case 21: {
        if (tag == 169) {
         parse_longitudinal_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitudinal_a_)));
          set_has_longitudinal_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(177)) goto parse_vertical_a;
        break;
      }

      // optional double vertical_a = 22;
      case 22: {
        if (tag == 177) {
         parse_vertical_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vertical_a_)));
          set_has_vertical_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:localization.Localization)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:localization.Localization)
  return false;
#undef DO_
}

void Localization::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:localization.Localization)
  // optional .common.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional .localization.LocalizationMode mode = 2 [default = GNSS];
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mode(), output);
  }

  // optional .localization.LocalizationFrame frame = 3 [default = LOCAL];
  if (has_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->frame(), output);
  }

  // optional uint32 local_frame_seq = 4;
  if (has_local_frame_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->local_frame_seq(), output);
  }

  // repeated double transform = 5 [packed = true];
  if (this->transform_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_transform_cached_byte_size_);
  }
  for (int i = 0; i < this->transform_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->transform(i), output);
  }

  // optional .geometry.Point position = 7;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->position(), output);
  }

  // optional double longitude = 8;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->longitude(), output);
  }

  // optional double latitude = 9;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->latitude(), output);
  }

  // optional double altitude = 10;
  if (has_altitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->altitude(), output);
  }

  // optional double roll = 11;
  if (has_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->roll(), output);
  }

  // optional double pitch = 12;
  if (has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->pitch(), output);
  }

  // optional double yaw = 13;
  if (has_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->yaw(), output);
  }

  // optional double roll_v = 14;
  if (has_roll_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->roll_v(), output);
  }

  // optional double pitch_v = 15;
  if (has_pitch_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->pitch_v(), output);
  }

  // optional double yaw_v = 16;
  if (has_yaw_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->yaw_v(), output);
  }

  // optional double lateral_v = 17;
  if (has_lateral_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->lateral_v(), output);
  }

  // optional double longitudinal_v = 18;
  if (has_longitudinal_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->longitudinal_v(), output);
  }

  // optional double vertical_v = 19;
  if (has_vertical_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->vertical_v(), output);
  }

  // optional double lateral_a = 20;
  if (has_lateral_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->lateral_a(), output);
  }

  // optional double longitudinal_a = 21;
  if (has_longitudinal_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->longitudinal_a(), output);
  }

  // optional double vertical_a = 22;
  if (has_vertical_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->vertical_a(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:localization.Localization)
}

::google::protobuf::uint8* Localization::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:localization.Localization)
  // optional .common.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional .localization.LocalizationMode mode = 2 [default = GNSS];
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mode(), target);
  }

  // optional .localization.LocalizationFrame frame = 3 [default = LOCAL];
  if (has_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->frame(), target);
  }

  // optional uint32 local_frame_seq = 4;
  if (has_local_frame_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->local_frame_seq(), target);
  }

  // repeated double transform = 5 [packed = true];
  if (this->transform_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _transform_cached_byte_size_, target);
  }
  for (int i = 0; i < this->transform_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->transform(i), target);
  }

  // optional .geometry.Point position = 7;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->position(), target);
  }

  // optional double longitude = 8;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->longitude(), target);
  }

  // optional double latitude = 9;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->latitude(), target);
  }

  // optional double altitude = 10;
  if (has_altitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->altitude(), target);
  }

  // optional double roll = 11;
  if (has_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->roll(), target);
  }

  // optional double pitch = 12;
  if (has_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->pitch(), target);
  }

  // optional double yaw = 13;
  if (has_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->yaw(), target);
  }

  // optional double roll_v = 14;
  if (has_roll_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->roll_v(), target);
  }

  // optional double pitch_v = 15;
  if (has_pitch_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->pitch_v(), target);
  }

  // optional double yaw_v = 16;
  if (has_yaw_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->yaw_v(), target);
  }

  // optional double lateral_v = 17;
  if (has_lateral_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->lateral_v(), target);
  }

  // optional double longitudinal_v = 18;
  if (has_longitudinal_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->longitudinal_v(), target);
  }

  // optional double vertical_v = 19;
  if (has_vertical_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->vertical_v(), target);
  }

  // optional double lateral_a = 20;
  if (has_lateral_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->lateral_a(), target);
  }

  // optional double longitudinal_a = 21;
  if (has_longitudinal_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->longitudinal_a(), target);
  }

  // optional double vertical_a = 22;
  if (has_vertical_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->vertical_a(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:localization.Localization)
  return target;
}

int Localization::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .localization.LocalizationMode mode = 2 [default = GNSS];
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // optional .localization.LocalizationFrame frame = 3 [default = LOCAL];
    if (has_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->frame());
    }

    // optional uint32 local_frame_seq = 4;
    if (has_local_frame_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_frame_seq());
    }

    // optional .geometry.Point position = 7;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional double longitude = 8;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // optional double latitude = 9;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double altitude = 10;
    if (has_altitude()) {
      total_size += 1 + 8;
    }

    // optional double roll = 11;
    if (has_roll()) {
      total_size += 1 + 8;
    }

    // optional double pitch = 12;
    if (has_pitch()) {
      total_size += 1 + 8;
    }

    // optional double yaw = 13;
    if (has_yaw()) {
      total_size += 1 + 8;
    }

    // optional double roll_v = 14;
    if (has_roll_v()) {
      total_size += 1 + 8;
    }

    // optional double pitch_v = 15;
    if (has_pitch_v()) {
      total_size += 1 + 8;
    }

    // optional double yaw_v = 16;
    if (has_yaw_v()) {
      total_size += 2 + 8;
    }

    // optional double lateral_v = 17;
    if (has_lateral_v()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional double longitudinal_v = 18;
    if (has_longitudinal_v()) {
      total_size += 2 + 8;
    }

    // optional double vertical_v = 19;
    if (has_vertical_v()) {
      total_size += 2 + 8;
    }

    // optional double lateral_a = 20;
    if (has_lateral_a()) {
      total_size += 2 + 8;
    }

    // optional double longitudinal_a = 21;
    if (has_longitudinal_a()) {
      total_size += 2 + 8;
    }

    // optional double vertical_a = 22;
    if (has_vertical_a()) {
      total_size += 2 + 8;
    }

  }
  // repeated double transform = 5 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->transform_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _transform_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Localization::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Localization* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Localization*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Localization::MergeFrom(const Localization& from) {
  GOOGLE_CHECK_NE(&from, this);
  transform_.MergeFrom(from.transform_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::common::Header::MergeFrom(from.header());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_frame()) {
      set_frame(from.frame());
    }
    if (from.has_local_frame_seq()) {
      set_local_frame_seq(from.local_frame_seq());
    }
    if (from.has_position()) {
      mutable_position()->::geometry::Point::MergeFrom(from.position());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_altitude()) {
      set_altitude(from.altitude());
    }
    if (from.has_roll()) {
      set_roll(from.roll());
    }
    if (from.has_pitch()) {
      set_pitch(from.pitch());
    }
    if (from.has_yaw()) {
      set_yaw(from.yaw());
    }
    if (from.has_roll_v()) {
      set_roll_v(from.roll_v());
    }
    if (from.has_pitch_v()) {
      set_pitch_v(from.pitch_v());
    }
    if (from.has_yaw_v()) {
      set_yaw_v(from.yaw_v());
    }
    if (from.has_lateral_v()) {
      set_lateral_v(from.lateral_v());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_longitudinal_v()) {
      set_longitudinal_v(from.longitudinal_v());
    }
    if (from.has_vertical_v()) {
      set_vertical_v(from.vertical_v());
    }
    if (from.has_lateral_a()) {
      set_lateral_a(from.lateral_a());
    }
    if (from.has_longitudinal_a()) {
      set_longitudinal_a(from.longitudinal_a());
    }
    if (from.has_vertical_a()) {
      set_vertical_a(from.vertical_a());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Localization::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Localization::CopyFrom(const Localization& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Localization::IsInitialized() const {

  return true;
}

void Localization::Swap(Localization* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(mode_, other->mode_);
    std::swap(frame_, other->frame_);
    std::swap(local_frame_seq_, other->local_frame_seq_);
    transform_.Swap(&other->transform_);
    std::swap(position_, other->position_);
    std::swap(longitude_, other->longitude_);
    std::swap(latitude_, other->latitude_);
    std::swap(altitude_, other->altitude_);
    std::swap(roll_, other->roll_);
    std::swap(pitch_, other->pitch_);
    std::swap(yaw_, other->yaw_);
    std::swap(roll_v_, other->roll_v_);
    std::swap(pitch_v_, other->pitch_v_);
    std::swap(yaw_v_, other->yaw_v_);
    std::swap(lateral_v_, other->lateral_v_);
    std::swap(longitudinal_v_, other->longitudinal_v_);
    std::swap(vertical_v_, other->vertical_v_);
    std::swap(lateral_a_, other->lateral_a_);
    std::swap(longitudinal_a_, other->longitudinal_a_);
    std::swap(vertical_a_, other->vertical_a_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Localization::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Localization_descriptor_;
  metadata.reflection = Localization_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace localization

// @@protoc_insertion_point(global_scope)
