// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: localization.proto

#include "localization.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_header_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_header_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_geometry_2eproto;
namespace localization {
class LocalizationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Localization> _instance;
} _Localization_default_instance_;
}  // namespace localization
static void InitDefaultsscc_info_Localization_localization_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::localization::_Localization_default_instance_;
    new (ptr) ::localization::Localization();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::localization::Localization::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Localization_localization_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Localization_localization_2eproto}, {
      &scc_info_Header_header_2eproto.base,
      &scc_info_Point_geometry_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_localization_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_localization_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_localization_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_localization_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::localization::Localization, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::localization::Localization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::localization::Localization, header_),
  PROTOBUF_FIELD_OFFSET(::localization::Localization, mode_),
  PROTOBUF_FIELD_OFFSET(::localization::Localization, frame_),
  PROTOBUF_FIELD_OFFSET(::localization::Localization, local_frame_seq_),
  PROTOBUF_FIELD_OFFSET(::localization::Localization, transform_),
  PROTOBUF_FIELD_OFFSET(::localization::Localization, position_),
  PROTOBUF_FIELD_OFFSET(::localization::Localization, longitude_),
  PROTOBUF_FIELD_OFFSET(::localization::Localization, latitude_),
  PROTOBUF_FIELD_OFFSET(::localization::Localization, altitude_),
  PROTOBUF_FIELD_OFFSET(::localization::Localization, roll_),
  PROTOBUF_FIELD_OFFSET(::localization::Localization, pitch_),
  PROTOBUF_FIELD_OFFSET(::localization::Localization, yaw_),
  PROTOBUF_FIELD_OFFSET(::localization::Localization, roll_v_),
  PROTOBUF_FIELD_OFFSET(::localization::Localization, pitch_v_),
  PROTOBUF_FIELD_OFFSET(::localization::Localization, yaw_v_),
  PROTOBUF_FIELD_OFFSET(::localization::Localization, lateral_v_),
  PROTOBUF_FIELD_OFFSET(::localization::Localization, longitudinal_v_),
  PROTOBUF_FIELD_OFFSET(::localization::Localization, vertical_v_),
  PROTOBUF_FIELD_OFFSET(::localization::Localization, lateral_a_),
  PROTOBUF_FIELD_OFFSET(::localization::Localization, longitudinal_a_),
  PROTOBUF_FIELD_OFFSET(::localization::Localization, vertical_a_),
  0,
  2,
  3,
  19,
  ~0u,
  1,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 26, sizeof(::localization::Localization)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::localization::_Localization_default_instance_),
};

const char descriptor_table_protodef_localization_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022localization.proto\022\014localization\032\014head"
  "er.proto\032\016geometry.proto\"\373\003\n\014Localizatio"
  "n\022\036\n\006header\030\001 \001(\0132\016.common.Header\0222\n\004mod"
  "e\030\002 \001(\0162\036.localization.LocalizationMode:"
  "\004GNSS\0225\n\005frame\030\003 \001(\0162\037.localization.Loca"
  "lizationFrame:\005LOCAL\022\027\n\017local_frame_seq\030"
  "\004 \001(\r\022\025\n\ttransform\030\005 \003(\001B\002\020\001\022!\n\010position"
  "\030\007 \001(\0132\017.geometry.Point\022\021\n\tlongitude\030\010 \001"
  "(\001\022\020\n\010latitude\030\t \001(\001\022\020\n\010altitude\030\n \001(\001\022\014"
  "\n\004roll\030\013 \001(\001\022\r\n\005pitch\030\014 \001(\001\022\013\n\003yaw\030\r \001(\001"
  "\022\016\n\006roll_v\030\016 \001(\001\022\017\n\007pitch_v\030\017 \001(\001\022\r\n\005yaw"
  "_v\030\020 \001(\001\022\021\n\tlateral_v\030\021 \001(\001\022\026\n\016longitudi"
  "nal_v\030\022 \001(\001\022\022\n\nvertical_v\030\023 \001(\001\022\021\n\tlater"
  "al_a\030\024 \001(\001\022\026\n\016longitudinal_a\030\025 \001(\001\022\022\n\nve"
  "rtical_a\030\026 \001(\001*-\n\020LocalizationMode\022\010\n\004GN"
  "SS\020\000\022\017\n\013LIDAR_BASED\020\001*)\n\021LocalizationFra"
  "me\022\t\n\005LOCAL\020\000\022\t\n\005WGS84\020\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_localization_2eproto_deps[2] = {
  &::descriptor_table_geometry_2eproto,
  &::descriptor_table_header_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_localization_2eproto_sccs[1] = {
  &scc_info_Localization_localization_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_localization_2eproto_once;
static bool descriptor_table_localization_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_localization_2eproto = {
  &descriptor_table_localization_2eproto_initialized, descriptor_table_protodef_localization_2eproto, "localization.proto", 664,
  &descriptor_table_localization_2eproto_once, descriptor_table_localization_2eproto_sccs, descriptor_table_localization_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_localization_2eproto::offsets,
  file_level_metadata_localization_2eproto, 1, file_level_enum_descriptors_localization_2eproto, file_level_service_descriptors_localization_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_localization_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_localization_2eproto), true);
namespace localization {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LocalizationMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_localization_2eproto);
  return file_level_enum_descriptors_localization_2eproto[0];
}
bool LocalizationMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LocalizationFrame_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_localization_2eproto);
  return file_level_enum_descriptors_localization_2eproto[1];
}
bool LocalizationFrame_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Localization::InitAsDefaultInstance() {
  ::localization::_Localization_default_instance_._instance.get_mutable()->header_ = const_cast< ::common::Header*>(
      ::common::Header::internal_default_instance());
  ::localization::_Localization_default_instance_._instance.get_mutable()->position_ = const_cast< ::geometry::Point*>(
      ::geometry::Point::internal_default_instance());
}
class Localization::_Internal {
 public:
  using HasBits = decltype(std::declval<Localization>()._has_bits_);
  static const ::common::Header& header(const Localization* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_local_frame_seq(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::geometry::Point& position(const Localization* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_altitude(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_roll(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_pitch(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_yaw(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_roll_v(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_pitch_v(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_yaw_v(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_lateral_v(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_longitudinal_v(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_vertical_v(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_lateral_a(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_longitudinal_a(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_vertical_a(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
};

const ::common::Header&
Localization::_Internal::header(const Localization* msg) {
  return *msg->header_;
}
const ::geometry::Point&
Localization::_Internal::position(const Localization* msg) {
  return *msg->position_;
}
void Localization::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Localization::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
Localization::Localization()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:localization.Localization)
}
Localization::Localization(const Localization& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      transform_(from.transform_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::geometry::Point(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&local_frame_seq_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(local_frame_seq_));
  // @@protoc_insertion_point(copy_constructor:localization.Localization)
}

void Localization::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Localization_localization_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_frame_seq_) -
      reinterpret_cast<char*>(&header_)) + sizeof(local_frame_seq_));
}

Localization::~Localization() {
  // @@protoc_insertion_point(destructor:localization.Localization)
  SharedDtor();
}

void Localization::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete position_;
}

void Localization::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Localization& Localization::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Localization_localization_2eproto.base);
  return *internal_default_instance();
}


void Localization::Clear() {
// @@protoc_insertion_point(message_clear_start:localization.Localization)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transform_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(position_ != nullptr);
      position_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&roll_) -
        reinterpret_cast<char*>(&mode_)) + sizeof(roll_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&pitch_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vertical_v_) -
        reinterpret_cast<char*>(&pitch_)) + sizeof(vertical_v_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&lateral_a_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&local_frame_seq_) -
        reinterpret_cast<char*>(&lateral_a_)) + sizeof(local_frame_seq_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Localization::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .localization.LocalizationMode mode = 2 [default = GNSS];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::localization::LocalizationMode_IsValid(val))) {
            _internal_set_mode(static_cast<::localization::LocalizationMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .localization.LocalizationFrame frame = 3 [default = LOCAL];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::localization::LocalizationFrame_IsValid(val))) {
            _internal_set_frame(static_cast<::localization::LocalizationFrame>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 local_frame_seq = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_local_frame_seq(&has_bits);
          local_frame_seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double transform = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_transform(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41) {
          _internal_add_transform(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .geometry.Point position = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double longitude = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_longitude(&has_bits);
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double latitude = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_latitude(&has_bits);
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double altitude = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_altitude(&has_bits);
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double roll = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_roll(&has_bits);
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double pitch = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_pitch(&has_bits);
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double yaw = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_yaw(&has_bits);
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double roll_v = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_roll_v(&has_bits);
          roll_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double pitch_v = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_pitch_v(&has_bits);
          pitch_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double yaw_v = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_yaw_v(&has_bits);
          yaw_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lateral_v = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_lateral_v(&has_bits);
          lateral_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double longitudinal_v = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_longitudinal_v(&has_bits);
          longitudinal_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double vertical_v = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_vertical_v(&has_bits);
          vertical_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lateral_a = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          _Internal::set_has_lateral_a(&has_bits);
          lateral_a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double longitudinal_a = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          _Internal::set_has_longitudinal_a(&has_bits);
          longitudinal_a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double vertical_a = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          _Internal::set_has_vertical_a(&has_bits);
          vertical_a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Localization::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:localization.Localization)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional .localization.LocalizationMode mode = 2 [default = GNSS];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mode(), target);
  }

  // optional .localization.LocalizationFrame frame = 3 [default = LOCAL];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_frame(), target);
  }

  // optional uint32 local_frame_seq = 4;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_local_frame_seq(), target);
  }

  // repeated double transform = 5 [packed = true];
  if (this->_internal_transform_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_transform(), target);
  }

  // optional .geometry.Point position = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::position(this), target, stream);
  }

  // optional double longitude = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_longitude(), target);
  }

  // optional double latitude = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_latitude(), target);
  }

  // optional double altitude = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_altitude(), target);
  }

  // optional double roll = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_roll(), target);
  }

  // optional double pitch = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_pitch(), target);
  }

  // optional double yaw = 13;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_yaw(), target);
  }

  // optional double roll_v = 14;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_roll_v(), target);
  }

  // optional double pitch_v = 15;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_pitch_v(), target);
  }

  // optional double yaw_v = 16;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_yaw_v(), target);
  }

  // optional double lateral_v = 17;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_lateral_v(), target);
  }

  // optional double longitudinal_v = 18;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_longitudinal_v(), target);
  }

  // optional double vertical_v = 19;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_vertical_v(), target);
  }

  // optional double lateral_a = 20;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_lateral_a(), target);
  }

  // optional double longitudinal_a = 21;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_longitudinal_a(), target);
  }

  // optional double vertical_a = 22;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_vertical_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:localization.Localization)
  return target;
}

size_t Localization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:localization.Localization)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double transform = 5 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_transform_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _transform_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .geometry.Point position = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional .localization.LocalizationMode mode = 2 [default = GNSS];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
    }

    // optional .localization.LocalizationFrame frame = 3 [default = LOCAL];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_frame());
    }

    // optional double longitude = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double latitude = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double altitude = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double roll = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double pitch = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double yaw = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double roll_v = 14;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double pitch_v = 15;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double yaw_v = 16;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 8;
    }

    // optional double lateral_v = 17;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 8;
    }

    // optional double longitudinal_v = 18;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 8;
    }

    // optional double vertical_v = 19;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional double lateral_a = 20;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional double longitudinal_a = 21;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional double vertical_a = 22;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional uint32 local_frame_seq = 4;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_local_frame_seq());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Localization::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:localization.Localization)
  GOOGLE_DCHECK_NE(&from, this);
  const Localization* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Localization>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:localization.Localization)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:localization.Localization)
    MergeFrom(*source);
  }
}

void Localization::MergeFrom(const Localization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:localization.Localization)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transform_.MergeFrom(from.transform_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_position()->::geometry::Point::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000004u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x00000008u) {
      frame_ = from.frame_;
    }
    if (cached_has_bits & 0x00000010u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000020u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000040u) {
      altitude_ = from.altitude_;
    }
    if (cached_has_bits & 0x00000080u) {
      roll_ = from.roll_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      pitch_ = from.pitch_;
    }
    if (cached_has_bits & 0x00000200u) {
      yaw_ = from.yaw_;
    }
    if (cached_has_bits & 0x00000400u) {
      roll_v_ = from.roll_v_;
    }
    if (cached_has_bits & 0x00000800u) {
      pitch_v_ = from.pitch_v_;
    }
    if (cached_has_bits & 0x00001000u) {
      yaw_v_ = from.yaw_v_;
    }
    if (cached_has_bits & 0x00002000u) {
      lateral_v_ = from.lateral_v_;
    }
    if (cached_has_bits & 0x00004000u) {
      longitudinal_v_ = from.longitudinal_v_;
    }
    if (cached_has_bits & 0x00008000u) {
      vertical_v_ = from.vertical_v_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      lateral_a_ = from.lateral_a_;
    }
    if (cached_has_bits & 0x00020000u) {
      longitudinal_a_ = from.longitudinal_a_;
    }
    if (cached_has_bits & 0x00040000u) {
      vertical_a_ = from.vertical_a_;
    }
    if (cached_has_bits & 0x00080000u) {
      local_frame_seq_ = from.local_frame_seq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Localization::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:localization.Localization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Localization::CopyFrom(const Localization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:localization.Localization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Localization::IsInitialized() const {
  return true;
}

void Localization::InternalSwap(Localization* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  transform_.InternalSwap(&other->transform_);
  swap(header_, other->header_);
  swap(position_, other->position_);
  swap(mode_, other->mode_);
  swap(frame_, other->frame_);
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
  swap(altitude_, other->altitude_);
  swap(roll_, other->roll_);
  swap(pitch_, other->pitch_);
  swap(yaw_, other->yaw_);
  swap(roll_v_, other->roll_v_);
  swap(pitch_v_, other->pitch_v_);
  swap(yaw_v_, other->yaw_v_);
  swap(lateral_v_, other->lateral_v_);
  swap(longitudinal_v_, other->longitudinal_v_);
  swap(vertical_v_, other->vertical_v_);
  swap(lateral_a_, other->lateral_a_);
  swap(longitudinal_a_, other->longitudinal_a_);
  swap(vertical_a_, other->vertical_a_);
  swap(local_frame_seq_, other->local_frame_seq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Localization::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace localization
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::localization::Localization* Arena::CreateMaybeMessage< ::localization::Localization >(Arena* arena) {
  return Arena::CreateInternal< ::localization::Localization >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
