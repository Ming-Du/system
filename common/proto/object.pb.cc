// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "object.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace perception {

namespace {

const ::google::protobuf::Descriptor* Object_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Object_reflection_ = NULL;
const ::google::protobuf::Descriptor* VisualObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VisualObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* VisualObjects_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VisualObjects_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrackedObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackedObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrackedObjects_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackedObjects_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ObjectType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_object_2eproto() {
  protobuf_AddDesc_object_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "object.proto");
  GOOGLE_CHECK(file != NULL);
  Object_descriptor_ = file->message_type(0);
  static const int Object_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, x_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, y_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, contour_),
  };
  Object_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Object_descriptor_,
      Object::default_instance_,
      Object_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Object));
  VisualObject_descriptor_ = file->message_type(1);
  static const int VisualObject_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualObject, obj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualObject, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualObject, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualObject, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualObject, height_),
  };
  VisualObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VisualObject_descriptor_,
      VisualObject::default_instance_,
      VisualObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VisualObject));
  VisualObjects_descriptor_ = file->message_type(2);
  static const int VisualObjects_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualObjects, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualObjects, objs_),
  };
  VisualObjects_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VisualObjects_descriptor_,
      VisualObjects::default_instance_,
      VisualObjects_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualObjects, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualObjects, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VisualObjects));
  TrackedObject_descriptor_ = file->message_type(3);
  static const int TrackedObject_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackedObject, obj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackedObject, yaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackedObject, yaw_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackedObject, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackedObject, trace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackedObject, absolute_longitude_v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackedObject, absolute_longitude_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackedObject, absolute_lateral_v_),
  };
  TrackedObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrackedObject_descriptor_,
      TrackedObject::default_instance_,
      TrackedObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackedObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackedObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrackedObject));
  TrackedObjects_descriptor_ = file->message_type(4);
  static const int TrackedObjects_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackedObjects, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackedObjects, objs_),
  };
  TrackedObjects_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrackedObjects_descriptor_,
      TrackedObjects::default_instance_,
      TrackedObjects_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackedObjects, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackedObjects, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrackedObjects));
  ObjectType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_object_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Object_descriptor_, &Object::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VisualObject_descriptor_, &VisualObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VisualObjects_descriptor_, &VisualObjects::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrackedObject_descriptor_, &TrackedObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrackedObjects_descriptor_, &TrackedObjects::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_object_2eproto() {
  delete Object::default_instance_;
  delete Object_reflection_;
  delete VisualObject::default_instance_;
  delete VisualObject_reflection_;
  delete VisualObjects::default_instance_;
  delete VisualObjects_reflection_;
  delete TrackedObject::default_instance_;
  delete TrackedObject_reflection_;
  delete TrackedObjects::default_instance_;
  delete TrackedObjects_reflection_;
}

void protobuf_AddDesc_object_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::common::protobuf_AddDesc_header_2eproto();
  ::geometry::protobuf_AddDesc_geometry_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014object.proto\022\nperception\032\014header.proto"
    "\032\016geometry.proto\"\214\002\n\006Object\022\n\n\002id\030\001 \001(\r\022"
    "$\n\004type\030\002 \001(\0162\026.perception.ObjectType\022\021\n"
    "\ttimestamp\030\003 \001(\001\022\022\n\nconfidence\030\004 \001(\002\022\016\n\006"
    "status\030\005 \001(\005\022\022\n\nx_distance\030\006 \001(\002\022\022\n\ny_di"
    "stance\030\007 \001(\002\022\r\n\005angle\030\010 \001(\002\022\037\n\006center\030\t "
    "\001(\0132\017.geometry.Point\022\037\n\004size\030\n \001(\0132\021.geo"
    "metry.Vector3\022 \n\007contour\030\013 \003(\0132\017.geometr"
    "y.Point\"d\n\014VisualObject\022\037\n\003obj\030\001 \001(\0132\022.p"
    "erception.Object\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\022\r"
    "\n\005width\030\004 \001(\005\022\016\n\006height\030\005 \001(\005\"W\n\rVisualO"
    "bjects\022\036\n\006header\030\001 \001(\0132\016.common.Header\022&"
    "\n\004objs\030\002 \003(\0132\030.perception.VisualObject\"\354"
    "\001\n\rTrackedObject\022\037\n\003obj\030\001 \001(\0132\022.percepti"
    "on.Object\022\013\n\003yaw\030\002 \001(\002\022\020\n\010yaw_rate\030\003 \001(\002"
    "\022#\n\010velocity\030\004 \001(\0132\021.geometry.Vector3\022\036\n"
    "\005trace\030\005 \003(\0132\017.geometry.Point\022\034\n\024absolut"
    "e_longitude_v\030\006 \001(\002\022\034\n\024absolute_longitud"
    "e_a\030\007 \001(\002\022\032\n\022absolute_lateral_v\030\010 \001(\002\"Y\n"
    "\016TrackedObjects\022\036\n\006header\030\001 \001(\0132\016.common"
    ".Header\022\'\n\004objs\030\002 \003(\0132\031.perception.Track"
    "edObject*\241\002\n\nObjectType\022\020\n\014TYPE_UNKNOWN\020"
    "\000\022\023\n\017TYPE_PEDESTRIAN\020\003\022\020\n\014TYPE_BICYCLE\020\004"
    "\022\016\n\nTYPE_MOTOR\020\005\022\016\n\nTYPE_RIDER\020\006\022\014\n\010TYPE"
    "_CAR\020\007\022\016\n\nTYPE_TRUCK\020\010\022\014\n\010TYPE_BUS\020\t\022\016\n\n"
    "TYPE_TRAIN\020\n\022\r\n\tTYPE_SIGN\020\024\022\016\n\nTYPE_LIGH"
    "T\020\036\022\026\n\022TYPE_UNKNOWN_SMALL\020[\022\024\n\020TYPE_UNKN"
    "OWN_BIG\020\\\022\027\n\023TYPE_UNKNOWN_STATIC\020]\022\030\n\024TY"
    "PE_UNKNOWN_DYNAMIC\020^", 1140);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "object.proto", &protobuf_RegisterTypes);
  Object::default_instance_ = new Object();
  VisualObject::default_instance_ = new VisualObject();
  VisualObjects::default_instance_ = new VisualObjects();
  TrackedObject::default_instance_ = new TrackedObject();
  TrackedObjects::default_instance_ = new TrackedObjects();
  Object::default_instance_->InitAsDefaultInstance();
  VisualObject::default_instance_->InitAsDefaultInstance();
  VisualObjects::default_instance_->InitAsDefaultInstance();
  TrackedObject::default_instance_->InitAsDefaultInstance();
  TrackedObjects::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_object_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_object_2eproto {
  StaticDescriptorInitializer_object_2eproto() {
    protobuf_AddDesc_object_2eproto();
  }
} static_descriptor_initializer_object_2eproto_;
const ::google::protobuf::EnumDescriptor* ObjectType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectType_descriptor_;
}
bool ObjectType_IsValid(int value) {
  switch(value) {
    case 0:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 20:
    case 30:
    case 91:
    case 92:
    case 93:
    case 94:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Object::kIdFieldNumber;
const int Object::kTypeFieldNumber;
const int Object::kTimestampFieldNumber;
const int Object::kConfidenceFieldNumber;
const int Object::kStatusFieldNumber;
const int Object::kXDistanceFieldNumber;
const int Object::kYDistanceFieldNumber;
const int Object::kAngleFieldNumber;
const int Object::kCenterFieldNumber;
const int Object::kSizeFieldNumber;
const int Object::kContourFieldNumber;
#endif  // !_MSC_VER

Object::Object()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perception.Object)
}

void Object::InitAsDefaultInstance() {
  center_ = const_cast< ::geometry::Point*>(&::geometry::Point::default_instance());
  size_ = const_cast< ::geometry::Vector3*>(&::geometry::Vector3::default_instance());
}

Object::Object(const Object& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:perception.Object)
}

void Object::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  type_ = 0;
  timestamp_ = 0;
  confidence_ = 0;
  status_ = 0;
  x_distance_ = 0;
  y_distance_ = 0;
  angle_ = 0;
  center_ = NULL;
  size_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Object::~Object() {
  // @@protoc_insertion_point(destructor:perception.Object)
  SharedDtor();
}

void Object::SharedDtor() {
  if (this != default_instance_) {
    delete center_;
    delete size_;
  }
}

void Object::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Object::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Object_descriptor_;
}

const Object& Object::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

Object* Object::default_instance_ = NULL;

Object* Object::New() const {
  return new Object;
}

void Object::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Object*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, y_distance_);
    angle_ = 0;
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_center()) {
      if (center_ != NULL) center_->::geometry::Point::Clear();
    }
    if (has_size()) {
      if (size_ != NULL) size_->::geometry::Vector3::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  contour_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Object::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:perception.Object)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .perception.ObjectType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perception::ObjectType_IsValid(value)) {
            set_type(static_cast< ::perception::ObjectType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_timestamp;
        break;
      }

      // optional double timestamp = 3;
      case 3: {
        if (tag == 25) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_confidence;
        break;
      }

      // optional float confidence = 4;
      case 4: {
        if (tag == 37) {
         parse_confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
          set_has_confidence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // optional int32 status = 5;
      case 5: {
        if (tag == 40) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_x_distance;
        break;
      }

      // optional float x_distance = 6;
      case 6: {
        if (tag == 53) {
         parse_x_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_distance_)));
          set_has_x_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_y_distance;
        break;
      }

      // optional float y_distance = 7;
      case 7: {
        if (tag == 61) {
         parse_y_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_distance_)));
          set_has_y_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_angle;
        break;
      }

      // optional float angle = 8;
      case 8: {
        if (tag == 69) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_center;
        break;
      }

      // optional .geometry.Point center = 9;
      case 9: {
        if (tag == 74) {
         parse_center:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_size;
        break;
      }

      // optional .geometry.Vector3 size = 10;
      case 10: {
        if (tag == 82) {
         parse_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_size()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_contour;
        break;
      }

      // repeated .geometry.Point contour = 11;
      case 11: {
        if (tag == 90) {
         parse_contour:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contour()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_contour;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perception.Object)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perception.Object)
  return false;
#undef DO_
}

void Object::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perception.Object)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .perception.ObjectType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional double timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->timestamp(), output);
  }

  // optional float confidence = 4;
  if (has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->confidence(), output);
  }

  // optional int32 status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }

  // optional float x_distance = 6;
  if (has_x_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->x_distance(), output);
  }

  // optional float y_distance = 7;
  if (has_y_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->y_distance(), output);
  }

  // optional float angle = 8;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->angle(), output);
  }

  // optional .geometry.Point center = 9;
  if (has_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->center(), output);
  }

  // optional .geometry.Vector3 size = 10;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->size(), output);
  }

  // repeated .geometry.Point contour = 11;
  for (int i = 0; i < this->contour_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->contour(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:perception.Object)
}

::google::protobuf::uint8* Object::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.Object)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .perception.ObjectType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional double timestamp = 3;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->timestamp(), target);
  }

  // optional float confidence = 4;
  if (has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->confidence(), target);
  }

  // optional int32 status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }

  // optional float x_distance = 6;
  if (has_x_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->x_distance(), target);
  }

  // optional float y_distance = 7;
  if (has_y_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->y_distance(), target);
  }

  // optional float angle = 8;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->angle(), target);
  }

  // optional .geometry.Point center = 9;
  if (has_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->center(), target);
  }

  // optional .geometry.Vector3 size = 10;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->size(), target);
  }

  // repeated .geometry.Point contour = 11;
  for (int i = 0; i < this->contour_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->contour(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.Object)
  return target;
}

int Object::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .perception.ObjectType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional double timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional float confidence = 4;
    if (has_confidence()) {
      total_size += 1 + 4;
    }

    // optional int32 status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional float x_distance = 6;
    if (has_x_distance()) {
      total_size += 1 + 4;
    }

    // optional float y_distance = 7;
    if (has_y_distance()) {
      total_size += 1 + 4;
    }

    // optional float angle = 8;
    if (has_angle()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .geometry.Point center = 9;
    if (has_center()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->center());
    }

    // optional .geometry.Vector3 size = 10;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->size());
    }

  }
  // repeated .geometry.Point contour = 11;
  total_size += 1 * this->contour_size();
  for (int i = 0; i < this->contour_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contour(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Object::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Object* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Object*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Object::MergeFrom(const Object& from) {
  GOOGLE_CHECK_NE(&from, this);
  contour_.MergeFrom(from.contour_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_confidence()) {
      set_confidence(from.confidence());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_x_distance()) {
      set_x_distance(from.x_distance());
    }
    if (from.has_y_distance()) {
      set_y_distance(from.y_distance());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_center()) {
      mutable_center()->::geometry::Point::MergeFrom(from.center());
    }
    if (from.has_size()) {
      mutable_size()->::geometry::Vector3::MergeFrom(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Object::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object::CopyFrom(const Object& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object::IsInitialized() const {

  return true;
}

void Object::Swap(Object* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(confidence_, other->confidence_);
    std::swap(status_, other->status_);
    std::swap(x_distance_, other->x_distance_);
    std::swap(y_distance_, other->y_distance_);
    std::swap(angle_, other->angle_);
    std::swap(center_, other->center_);
    std::swap(size_, other->size_);
    contour_.Swap(&other->contour_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Object::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Object_descriptor_;
  metadata.reflection = Object_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VisualObject::kObjFieldNumber;
const int VisualObject::kXFieldNumber;
const int VisualObject::kYFieldNumber;
const int VisualObject::kWidthFieldNumber;
const int VisualObject::kHeightFieldNumber;
#endif  // !_MSC_VER

VisualObject::VisualObject()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perception.VisualObject)
}

void VisualObject::InitAsDefaultInstance() {
  obj_ = const_cast< ::perception::Object*>(&::perception::Object::default_instance());
}

VisualObject::VisualObject(const VisualObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:perception.VisualObject)
}

void VisualObject::SharedCtor() {
  _cached_size_ = 0;
  obj_ = NULL;
  x_ = 0;
  y_ = 0;
  width_ = 0;
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VisualObject::~VisualObject() {
  // @@protoc_insertion_point(destructor:perception.VisualObject)
  SharedDtor();
}

void VisualObject::SharedDtor() {
  if (this != default_instance_) {
    delete obj_;
  }
}

void VisualObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VisualObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VisualObject_descriptor_;
}

const VisualObject& VisualObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

VisualObject* VisualObject::default_instance_ = NULL;

VisualObject* VisualObject::New() const {
  return new VisualObject;
}

void VisualObject::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VisualObject*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(x_, height_);
    if (has_obj()) {
      if (obj_ != NULL) obj_->::perception::Object::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VisualObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:perception.VisualObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .perception.Object obj = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_obj()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // optional int32 x = 2;
      case 2: {
        if (tag == 16) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // optional int32 y = 3;
      case 3: {
        if (tag == 24) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_width;
        break;
      }

      // optional int32 width = 4;
      case 4: {
        if (tag == 32) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_height;
        break;
      }

      // optional int32 height = 5;
      case 5: {
        if (tag == 40) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perception.VisualObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perception.VisualObject)
  return false;
#undef DO_
}

void VisualObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perception.VisualObject)
  // optional .perception.Object obj = 1;
  if (has_obj()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->obj(), output);
  }

  // optional int32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // optional int32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  // optional int32 width = 4;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->width(), output);
  }

  // optional int32 height = 5;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:perception.VisualObject)
}

::google::protobuf::uint8* VisualObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.VisualObject)
  // optional .perception.Object obj = 1;
  if (has_obj()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->obj(), target);
  }

  // optional int32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // optional int32 y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }

  // optional int32 width = 4;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->width(), target);
  }

  // optional int32 height = 5;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.VisualObject)
  return target;
}

int VisualObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .perception.Object obj = 1;
    if (has_obj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->obj());
    }

    // optional int32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional int32 width = 4;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 5;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VisualObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VisualObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VisualObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VisualObject::MergeFrom(const VisualObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obj()) {
      mutable_obj()->::perception::Object::MergeFrom(from.obj());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VisualObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisualObject::CopyFrom(const VisualObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisualObject::IsInitialized() const {

  return true;
}

void VisualObject::Swap(VisualObject* other) {
  if (other != this) {
    std::swap(obj_, other->obj_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VisualObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VisualObject_descriptor_;
  metadata.reflection = VisualObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VisualObjects::kHeaderFieldNumber;
const int VisualObjects::kObjsFieldNumber;
#endif  // !_MSC_VER

VisualObjects::VisualObjects()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perception.VisualObjects)
}

void VisualObjects::InitAsDefaultInstance() {
  header_ = const_cast< ::common::Header*>(&::common::Header::default_instance());
}

VisualObjects::VisualObjects(const VisualObjects& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:perception.VisualObjects)
}

void VisualObjects::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VisualObjects::~VisualObjects() {
  // @@protoc_insertion_point(destructor:perception.VisualObjects)
  SharedDtor();
}

void VisualObjects::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void VisualObjects::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VisualObjects::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VisualObjects_descriptor_;
}

const VisualObjects& VisualObjects::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

VisualObjects* VisualObjects::default_instance_ = NULL;

VisualObjects* VisualObjects::New() const {
  return new VisualObjects;
}

void VisualObjects::Clear() {
  if (has_header()) {
    if (header_ != NULL) header_->::common::Header::Clear();
  }
  objs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VisualObjects::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:perception.VisualObjects)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_objs;
        break;
      }

      // repeated .perception.VisualObject objs = 2;
      case 2: {
        if (tag == 18) {
         parse_objs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_objs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perception.VisualObjects)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perception.VisualObjects)
  return false;
#undef DO_
}

void VisualObjects::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perception.VisualObjects)
  // optional .common.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // repeated .perception.VisualObject objs = 2;
  for (int i = 0; i < this->objs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->objs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:perception.VisualObjects)
}

::google::protobuf::uint8* VisualObjects::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.VisualObjects)
  // optional .common.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // repeated .perception.VisualObject objs = 2;
  for (int i = 0; i < this->objs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->objs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.VisualObjects)
  return target;
}

int VisualObjects::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

  }
  // repeated .perception.VisualObject objs = 2;
  total_size += 1 * this->objs_size();
  for (int i = 0; i < this->objs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VisualObjects::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VisualObjects* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VisualObjects*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VisualObjects::MergeFrom(const VisualObjects& from) {
  GOOGLE_CHECK_NE(&from, this);
  objs_.MergeFrom(from.objs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::common::Header::MergeFrom(from.header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VisualObjects::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisualObjects::CopyFrom(const VisualObjects& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisualObjects::IsInitialized() const {

  return true;
}

void VisualObjects::Swap(VisualObjects* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    objs_.Swap(&other->objs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VisualObjects::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VisualObjects_descriptor_;
  metadata.reflection = VisualObjects_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrackedObject::kObjFieldNumber;
const int TrackedObject::kYawFieldNumber;
const int TrackedObject::kYawRateFieldNumber;
const int TrackedObject::kVelocityFieldNumber;
const int TrackedObject::kTraceFieldNumber;
const int TrackedObject::kAbsoluteLongitudeVFieldNumber;
const int TrackedObject::kAbsoluteLongitudeAFieldNumber;
const int TrackedObject::kAbsoluteLateralVFieldNumber;
#endif  // !_MSC_VER

TrackedObject::TrackedObject()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perception.TrackedObject)
}

void TrackedObject::InitAsDefaultInstance() {
  obj_ = const_cast< ::perception::Object*>(&::perception::Object::default_instance());
  velocity_ = const_cast< ::geometry::Vector3*>(&::geometry::Vector3::default_instance());
}

TrackedObject::TrackedObject(const TrackedObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:perception.TrackedObject)
}

void TrackedObject::SharedCtor() {
  _cached_size_ = 0;
  obj_ = NULL;
  yaw_ = 0;
  yaw_rate_ = 0;
  velocity_ = NULL;
  absolute_longitude_v_ = 0;
  absolute_longitude_a_ = 0;
  absolute_lateral_v_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrackedObject::~TrackedObject() {
  // @@protoc_insertion_point(destructor:perception.TrackedObject)
  SharedDtor();
}

void TrackedObject::SharedDtor() {
  if (this != default_instance_) {
    delete obj_;
    delete velocity_;
  }
}

void TrackedObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackedObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackedObject_descriptor_;
}

const TrackedObject& TrackedObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

TrackedObject* TrackedObject::default_instance_ = NULL;

TrackedObject* TrackedObject::New() const {
  return new TrackedObject;
}

void TrackedObject::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TrackedObject*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 239) {
    ZR_(yaw_, yaw_rate_);
    ZR_(absolute_longitude_v_, absolute_lateral_v_);
    if (has_obj()) {
      if (obj_ != NULL) obj_->::perception::Object::Clear();
    }
    if (has_velocity()) {
      if (velocity_ != NULL) velocity_->::geometry::Vector3::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  trace_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrackedObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:perception.TrackedObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .perception.Object obj = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_obj()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_yaw;
        break;
      }

      // optional float yaw = 2;
      case 2: {
        if (tag == 21) {
         parse_yaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
          set_has_yaw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_yaw_rate;
        break;
      }

      // optional float yaw_rate = 3;
      case 3: {
        if (tag == 29) {
         parse_yaw_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_rate_)));
          set_has_yaw_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_velocity;
        break;
      }

      // optional .geometry.Vector3 velocity = 4;
      case 4: {
        if (tag == 34) {
         parse_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_trace;
        break;
      }

      // repeated .geometry.Point trace = 5;
      case 5: {
        if (tag == 42) {
         parse_trace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trace()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_trace;
        if (input->ExpectTag(53)) goto parse_absolute_longitude_v;
        break;
      }

      // optional float absolute_longitude_v = 6;
      case 6: {
        if (tag == 53) {
         parse_absolute_longitude_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &absolute_longitude_v_)));
          set_has_absolute_longitude_v();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_absolute_longitude_a;
        break;
      }

      // optional float absolute_longitude_a = 7;
      case 7: {
        if (tag == 61) {
         parse_absolute_longitude_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &absolute_longitude_a_)));
          set_has_absolute_longitude_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_absolute_lateral_v;
        break;
      }

      // optional float absolute_lateral_v = 8;
      case 8: {
        if (tag == 69) {
         parse_absolute_lateral_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &absolute_lateral_v_)));
          set_has_absolute_lateral_v();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perception.TrackedObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perception.TrackedObject)
  return false;
#undef DO_
}

void TrackedObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perception.TrackedObject)
  // optional .perception.Object obj = 1;
  if (has_obj()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->obj(), output);
  }

  // optional float yaw = 2;
  if (has_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->yaw(), output);
  }

  // optional float yaw_rate = 3;
  if (has_yaw_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->yaw_rate(), output);
  }

  // optional .geometry.Vector3 velocity = 4;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->velocity(), output);
  }

  // repeated .geometry.Point trace = 5;
  for (int i = 0; i < this->trace_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->trace(i), output);
  }

  // optional float absolute_longitude_v = 6;
  if (has_absolute_longitude_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->absolute_longitude_v(), output);
  }

  // optional float absolute_longitude_a = 7;
  if (has_absolute_longitude_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->absolute_longitude_a(), output);
  }

  // optional float absolute_lateral_v = 8;
  if (has_absolute_lateral_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->absolute_lateral_v(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:perception.TrackedObject)
}

::google::protobuf::uint8* TrackedObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.TrackedObject)
  // optional .perception.Object obj = 1;
  if (has_obj()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->obj(), target);
  }

  // optional float yaw = 2;
  if (has_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->yaw(), target);
  }

  // optional float yaw_rate = 3;
  if (has_yaw_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->yaw_rate(), target);
  }

  // optional .geometry.Vector3 velocity = 4;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->velocity(), target);
  }

  // repeated .geometry.Point trace = 5;
  for (int i = 0; i < this->trace_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->trace(i), target);
  }

  // optional float absolute_longitude_v = 6;
  if (has_absolute_longitude_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->absolute_longitude_v(), target);
  }

  // optional float absolute_longitude_a = 7;
  if (has_absolute_longitude_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->absolute_longitude_a(), target);
  }

  // optional float absolute_lateral_v = 8;
  if (has_absolute_lateral_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->absolute_lateral_v(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.TrackedObject)
  return target;
}

int TrackedObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .perception.Object obj = 1;
    if (has_obj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->obj());
    }

    // optional float yaw = 2;
    if (has_yaw()) {
      total_size += 1 + 4;
    }

    // optional float yaw_rate = 3;
    if (has_yaw_rate()) {
      total_size += 1 + 4;
    }

    // optional .geometry.Vector3 velocity = 4;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->velocity());
    }

    // optional float absolute_longitude_v = 6;
    if (has_absolute_longitude_v()) {
      total_size += 1 + 4;
    }

    // optional float absolute_longitude_a = 7;
    if (has_absolute_longitude_a()) {
      total_size += 1 + 4;
    }

    // optional float absolute_lateral_v = 8;
    if (has_absolute_lateral_v()) {
      total_size += 1 + 4;
    }

  }
  // repeated .geometry.Point trace = 5;
  total_size += 1 * this->trace_size();
  for (int i = 0; i < this->trace_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trace(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackedObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrackedObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrackedObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrackedObject::MergeFrom(const TrackedObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  trace_.MergeFrom(from.trace_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obj()) {
      mutable_obj()->::perception::Object::MergeFrom(from.obj());
    }
    if (from.has_yaw()) {
      set_yaw(from.yaw());
    }
    if (from.has_yaw_rate()) {
      set_yaw_rate(from.yaw_rate());
    }
    if (from.has_velocity()) {
      mutable_velocity()->::geometry::Vector3::MergeFrom(from.velocity());
    }
    if (from.has_absolute_longitude_v()) {
      set_absolute_longitude_v(from.absolute_longitude_v());
    }
    if (from.has_absolute_longitude_a()) {
      set_absolute_longitude_a(from.absolute_longitude_a());
    }
    if (from.has_absolute_lateral_v()) {
      set_absolute_lateral_v(from.absolute_lateral_v());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrackedObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackedObject::CopyFrom(const TrackedObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackedObject::IsInitialized() const {

  return true;
}

void TrackedObject::Swap(TrackedObject* other) {
  if (other != this) {
    std::swap(obj_, other->obj_);
    std::swap(yaw_, other->yaw_);
    std::swap(yaw_rate_, other->yaw_rate_);
    std::swap(velocity_, other->velocity_);
    trace_.Swap(&other->trace_);
    std::swap(absolute_longitude_v_, other->absolute_longitude_v_);
    std::swap(absolute_longitude_a_, other->absolute_longitude_a_);
    std::swap(absolute_lateral_v_, other->absolute_lateral_v_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrackedObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackedObject_descriptor_;
  metadata.reflection = TrackedObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrackedObjects::kHeaderFieldNumber;
const int TrackedObjects::kObjsFieldNumber;
#endif  // !_MSC_VER

TrackedObjects::TrackedObjects()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perception.TrackedObjects)
}

void TrackedObjects::InitAsDefaultInstance() {
  header_ = const_cast< ::common::Header*>(&::common::Header::default_instance());
}

TrackedObjects::TrackedObjects(const TrackedObjects& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:perception.TrackedObjects)
}

void TrackedObjects::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrackedObjects::~TrackedObjects() {
  // @@protoc_insertion_point(destructor:perception.TrackedObjects)
  SharedDtor();
}

void TrackedObjects::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void TrackedObjects::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackedObjects::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackedObjects_descriptor_;
}

const TrackedObjects& TrackedObjects::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

TrackedObjects* TrackedObjects::default_instance_ = NULL;

TrackedObjects* TrackedObjects::New() const {
  return new TrackedObjects;
}

void TrackedObjects::Clear() {
  if (has_header()) {
    if (header_ != NULL) header_->::common::Header::Clear();
  }
  objs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrackedObjects::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:perception.TrackedObjects)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_objs;
        break;
      }

      // repeated .perception.TrackedObject objs = 2;
      case 2: {
        if (tag == 18) {
         parse_objs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_objs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perception.TrackedObjects)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perception.TrackedObjects)
  return false;
#undef DO_
}

void TrackedObjects::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perception.TrackedObjects)
  // optional .common.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // repeated .perception.TrackedObject objs = 2;
  for (int i = 0; i < this->objs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->objs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:perception.TrackedObjects)
}

::google::protobuf::uint8* TrackedObjects::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.TrackedObjects)
  // optional .common.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // repeated .perception.TrackedObject objs = 2;
  for (int i = 0; i < this->objs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->objs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.TrackedObjects)
  return target;
}

int TrackedObjects::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

  }
  // repeated .perception.TrackedObject objs = 2;
  total_size += 1 * this->objs_size();
  for (int i = 0; i < this->objs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackedObjects::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrackedObjects* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrackedObjects*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrackedObjects::MergeFrom(const TrackedObjects& from) {
  GOOGLE_CHECK_NE(&from, this);
  objs_.MergeFrom(from.objs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::common::Header::MergeFrom(from.header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrackedObjects::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackedObjects::CopyFrom(const TrackedObjects& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackedObjects::IsInitialized() const {

  return true;
}

void TrackedObjects::Swap(TrackedObjects* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    objs_.Swap(&other->objs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrackedObjects::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackedObjects_descriptor_;
  metadata.reflection = TrackedObjects_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception

// @@protoc_insertion_point(global_scope)
