// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object.proto

#include "object.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_header_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_header_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_geometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3_geometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Object_object_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TrackedObject_object_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VisualObject_object_2eproto;
namespace perception {
class ObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Object> _instance;
} _Object_default_instance_;
class VisualObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VisualObject> _instance;
} _VisualObject_default_instance_;
class VisualObjectsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VisualObjects> _instance;
} _VisualObjects_default_instance_;
class TrackedObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackedObject> _instance;
} _TrackedObject_default_instance_;
class TrackedObjectsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackedObjects> _instance;
} _TrackedObjects_default_instance_;
}  // namespace perception
static void InitDefaultsscc_info_Object_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_Object_default_instance_;
    new (ptr) ::perception::Object();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::Object::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Object_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Object_object_2eproto}, {
      &scc_info_Point_geometry_2eproto.base,
      &scc_info_Vector3_geometry_2eproto.base,}};

static void InitDefaultsscc_info_TrackedObject_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_TrackedObject_default_instance_;
    new (ptr) ::perception::TrackedObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::TrackedObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TrackedObject_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_TrackedObject_object_2eproto}, {
      &scc_info_Object_object_2eproto.base,
      &scc_info_Vector3_geometry_2eproto.base,
      &scc_info_Point_geometry_2eproto.base,}};

static void InitDefaultsscc_info_TrackedObjects_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_TrackedObjects_default_instance_;
    new (ptr) ::perception::TrackedObjects();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::TrackedObjects::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TrackedObjects_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TrackedObjects_object_2eproto}, {
      &scc_info_Header_header_2eproto.base,
      &scc_info_TrackedObject_object_2eproto.base,}};

static void InitDefaultsscc_info_VisualObject_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_VisualObject_default_instance_;
    new (ptr) ::perception::VisualObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::VisualObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VisualObject_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VisualObject_object_2eproto}, {
      &scc_info_Object_object_2eproto.base,}};

static void InitDefaultsscc_info_VisualObjects_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_VisualObjects_default_instance_;
    new (ptr) ::perception::VisualObjects();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::VisualObjects::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VisualObjects_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_VisualObjects_object_2eproto}, {
      &scc_info_Header_header_2eproto.base,
      &scc_info_VisualObject_object_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_object_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_object_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_object_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_object_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::perception::Object, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::perception::Object, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::Object, id_),
  PROTOBUF_FIELD_OFFSET(::perception::Object, type_),
  PROTOBUF_FIELD_OFFSET(::perception::Object, timestamp_),
  PROTOBUF_FIELD_OFFSET(::perception::Object, confidence_),
  PROTOBUF_FIELD_OFFSET(::perception::Object, status_),
  PROTOBUF_FIELD_OFFSET(::perception::Object, x_distance_),
  PROTOBUF_FIELD_OFFSET(::perception::Object, y_distance_),
  PROTOBUF_FIELD_OFFSET(::perception::Object, angle_),
  PROTOBUF_FIELD_OFFSET(::perception::Object, center_),
  PROTOBUF_FIELD_OFFSET(::perception::Object, size_),
  PROTOBUF_FIELD_OFFSET(::perception::Object, contour_),
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::perception::VisualObject, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::perception::VisualObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::VisualObject, obj_),
  PROTOBUF_FIELD_OFFSET(::perception::VisualObject, x_),
  PROTOBUF_FIELD_OFFSET(::perception::VisualObject, y_),
  PROTOBUF_FIELD_OFFSET(::perception::VisualObject, width_),
  PROTOBUF_FIELD_OFFSET(::perception::VisualObject, height_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::perception::VisualObjects, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::perception::VisualObjects, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::VisualObjects, header_),
  PROTOBUF_FIELD_OFFSET(::perception::VisualObjects, objs_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::perception::TrackedObject, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::perception::TrackedObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::TrackedObject, obj_),
  PROTOBUF_FIELD_OFFSET(::perception::TrackedObject, yaw_),
  PROTOBUF_FIELD_OFFSET(::perception::TrackedObject, yaw_rate_),
  PROTOBUF_FIELD_OFFSET(::perception::TrackedObject, velocity_),
  PROTOBUF_FIELD_OFFSET(::perception::TrackedObject, trace_),
  PROTOBUF_FIELD_OFFSET(::perception::TrackedObject, absolute_longitude_v_),
  PROTOBUF_FIELD_OFFSET(::perception::TrackedObject, absolute_longitude_a_),
  PROTOBUF_FIELD_OFFSET(::perception::TrackedObject, absolute_lateral_v_),
  0,
  2,
  3,
  1,
  ~0u,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::perception::TrackedObjects, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::perception::TrackedObjects, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::TrackedObjects, header_),
  PROTOBUF_FIELD_OFFSET(::perception::TrackedObjects, objs_),
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, sizeof(::perception::Object)},
  { 27, 37, sizeof(::perception::VisualObject)},
  { 42, 49, sizeof(::perception::VisualObjects)},
  { 51, 64, sizeof(::perception::TrackedObject)},
  { 72, 79, sizeof(::perception::TrackedObjects)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::_Object_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::_VisualObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::_VisualObjects_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::_TrackedObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::_TrackedObjects_default_instance_),
};

const char descriptor_table_protodef_object_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014object.proto\022\nperception\032\014header.proto"
  "\032\016geometry.proto\"\214\002\n\006Object\022\n\n\002id\030\001 \001(\r\022"
  "$\n\004type\030\002 \001(\0162\026.perception.ObjectType\022\021\n"
  "\ttimestamp\030\003 \001(\001\022\022\n\nconfidence\030\004 \001(\002\022\016\n\006"
  "status\030\005 \001(\005\022\022\n\nx_distance\030\006 \001(\002\022\022\n\ny_di"
  "stance\030\007 \001(\002\022\r\n\005angle\030\010 \001(\002\022\037\n\006center\030\t "
  "\001(\0132\017.geometry.Point\022\037\n\004size\030\n \001(\0132\021.geo"
  "metry.Vector3\022 \n\007contour\030\013 \003(\0132\017.geometr"
  "y.Point\"d\n\014VisualObject\022\037\n\003obj\030\001 \001(\0132\022.p"
  "erception.Object\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\022\r"
  "\n\005width\030\004 \001(\005\022\016\n\006height\030\005 \001(\005\"W\n\rVisualO"
  "bjects\022\036\n\006header\030\001 \001(\0132\016.common.Header\022&"
  "\n\004objs\030\002 \003(\0132\030.perception.VisualObject\"\354"
  "\001\n\rTrackedObject\022\037\n\003obj\030\001 \001(\0132\022.percepti"
  "on.Object\022\013\n\003yaw\030\002 \001(\002\022\020\n\010yaw_rate\030\003 \001(\002"
  "\022#\n\010velocity\030\004 \001(\0132\021.geometry.Vector3\022\036\n"
  "\005trace\030\005 \003(\0132\017.geometry.Point\022\034\n\024absolut"
  "e_longitude_v\030\006 \001(\002\022\034\n\024absolute_longitud"
  "e_a\030\007 \001(\002\022\032\n\022absolute_lateral_v\030\010 \001(\002\"Y\n"
  "\016TrackedObjects\022\036\n\006header\030\001 \001(\0132\016.common"
  ".Header\022\'\n\004objs\030\002 \003(\0132\031.perception.Track"
  "edObject*\241\002\n\nObjectType\022\020\n\014TYPE_UNKNOWN\020"
  "\000\022\023\n\017TYPE_PEDESTRIAN\020\003\022\020\n\014TYPE_BICYCLE\020\004"
  "\022\016\n\nTYPE_MOTOR\020\005\022\016\n\nTYPE_RIDER\020\006\022\014\n\010TYPE"
  "_CAR\020\007\022\016\n\nTYPE_TRUCK\020\010\022\014\n\010TYPE_BUS\020\t\022\016\n\n"
  "TYPE_TRAIN\020\n\022\r\n\tTYPE_SIGN\020\024\022\016\n\nTYPE_LIGH"
  "T\020\036\022\026\n\022TYPE_UNKNOWN_SMALL\020[\022\024\n\020TYPE_UNKN"
  "OWN_BIG\020\\\022\027\n\023TYPE_UNKNOWN_STATIC\020]\022\030\n\024TY"
  "PE_UNKNOWN_DYNAMIC\020^"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_object_2eproto_deps[2] = {
  &::descriptor_table_geometry_2eproto,
  &::descriptor_table_header_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_object_2eproto_sccs[5] = {
  &scc_info_Object_object_2eproto.base,
  &scc_info_TrackedObject_object_2eproto.base,
  &scc_info_TrackedObjects_object_2eproto.base,
  &scc_info_VisualObject_object_2eproto.base,
  &scc_info_VisualObjects_object_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_object_2eproto_once;
static bool descriptor_table_object_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_object_2eproto = {
  &descriptor_table_object_2eproto_initialized, descriptor_table_protodef_object_2eproto, "object.proto", 1140,
  &descriptor_table_object_2eproto_once, descriptor_table_object_2eproto_sccs, descriptor_table_object_2eproto_deps, 5, 2,
  schemas, file_default_instances, TableStruct_object_2eproto::offsets,
  file_level_metadata_object_2eproto, 5, file_level_enum_descriptors_object_2eproto, file_level_service_descriptors_object_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_object_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_object_2eproto), true);
namespace perception {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObjectType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_object_2eproto);
  return file_level_enum_descriptors_object_2eproto[0];
}
bool ObjectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 20:
    case 30:
    case 91:
    case 92:
    case 93:
    case 94:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Object::InitAsDefaultInstance() {
  ::perception::_Object_default_instance_._instance.get_mutable()->center_ = const_cast< ::geometry::Point*>(
      ::geometry::Point::internal_default_instance());
  ::perception::_Object_default_instance_._instance.get_mutable()->size_ = const_cast< ::geometry::Vector3*>(
      ::geometry::Vector3::internal_default_instance());
}
class Object::_Internal {
 public:
  using HasBits = decltype(std::declval<Object>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_x_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_y_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::geometry::Point& center(const Object* msg);
  static void set_has_center(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::geometry::Vector3& size(const Object* msg);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::geometry::Point&
Object::_Internal::center(const Object* msg) {
  return *msg->center_;
}
const ::geometry::Vector3&
Object::_Internal::size(const Object* msg) {
  return *msg->size_;
}
void Object::clear_center() {
  if (center_ != nullptr) center_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Object::clear_size() {
  if (size_ != nullptr) size_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Object::clear_contour() {
  contour_.Clear();
}
Object::Object()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perception.Object)
}
Object::Object(const Object& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      contour_(from.contour_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_center()) {
    center_ = new ::geometry::Point(*from.center_);
  } else {
    center_ = nullptr;
  }
  if (from._internal_has_size()) {
    size_ = new ::geometry::Vector3(*from.size_);
  } else {
    size_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&angle_) -
    reinterpret_cast<char*>(&id_)) + sizeof(angle_));
  // @@protoc_insertion_point(copy_constructor:perception.Object)
}

void Object::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Object_object_2eproto.base);
  ::memset(&center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_) -
      reinterpret_cast<char*>(&center_)) + sizeof(angle_));
}

Object::~Object() {
  // @@protoc_insertion_point(destructor:perception.Object)
  SharedDtor();
}

void Object::SharedDtor() {
  if (this != internal_default_instance()) delete center_;
  if (this != internal_default_instance()) delete size_;
}

void Object::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Object& Object::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Object_object_2eproto.base);
  return *internal_default_instance();
}


void Object::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.Object)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contour_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(center_ != nullptr);
      center_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(size_ != nullptr);
      size_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&x_distance_) -
        reinterpret_cast<char*>(&id_)) + sizeof(x_distance_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&y_distance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&angle_) -
        reinterpret_cast<char*>(&y_distance_)) + sizeof(angle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Object::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perception.ObjectType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perception::ObjectType_IsValid(val))) {
            _internal_set_type(static_cast<::perception::ObjectType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional float confidence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_confidence(&has_bits);
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float x_distance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_x_distance(&has_bits);
          x_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y_distance = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_y_distance(&has_bits);
          y_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float angle = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_angle(&has_bits);
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .geometry.Point center = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_center(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .geometry.Vector3 size = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .geometry.Point contour = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contour(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Object::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.Object)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional .perception.ObjectType type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional double timestamp = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_timestamp(), target);
  }

  // optional float confidence = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_confidence(), target);
  }

  // optional int32 status = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_status(), target);
  }

  // optional float x_distance = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_x_distance(), target);
  }

  // optional float y_distance = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_y_distance(), target);
  }

  // optional float angle = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_angle(), target);
  }

  // optional .geometry.Point center = 9;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::center(this), target, stream);
  }

  // optional .geometry.Vector3 size = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::size(this), target, stream);
  }

  // repeated .geometry.Point contour = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contour_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_contour(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.Object)
  return target;
}

size_t Object::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.Object)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .geometry.Point contour = 11;
  total_size += 1UL * this->_internal_contour_size();
  for (const auto& msg : this->contour_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .geometry.Point center = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *center_);
    }

    // optional .geometry.Vector3 size = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *size_);
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional .perception.ObjectType type = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional double timestamp = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional float confidence = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional int32 status = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_status());
    }

    // optional float x_distance = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional float y_distance = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float angle = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Object::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.Object)
  GOOGLE_DCHECK_NE(&from, this);
  const Object* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Object>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.Object)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.Object)
    MergeFrom(*source);
  }
}

void Object::MergeFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.Object)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contour_.MergeFrom(from.contour_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_center()->::geometry::Point::MergeFrom(from._internal_center());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_size()->::geometry::Vector3::MergeFrom(from._internal_size());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      confidence_ = from.confidence_;
    }
    if (cached_has_bits & 0x00000040u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000080u) {
      x_distance_ = from.x_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      y_distance_ = from.y_distance_;
    }
    if (cached_has_bits & 0x00000200u) {
      angle_ = from.angle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Object::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object::CopyFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object::IsInitialized() const {
  return true;
}

void Object::InternalSwap(Object* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  contour_.InternalSwap(&other->contour_);
  swap(center_, other->center_);
  swap(size_, other->size_);
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(timestamp_, other->timestamp_);
  swap(confidence_, other->confidence_);
  swap(status_, other->status_);
  swap(x_distance_, other->x_distance_);
  swap(y_distance_, other->y_distance_);
  swap(angle_, other->angle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Object::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VisualObject::InitAsDefaultInstance() {
  ::perception::_VisualObject_default_instance_._instance.get_mutable()->obj_ = const_cast< ::perception::Object*>(
      ::perception::Object::internal_default_instance());
}
class VisualObject::_Internal {
 public:
  using HasBits = decltype(std::declval<VisualObject>()._has_bits_);
  static const ::perception::Object& obj(const VisualObject* msg);
  static void set_has_obj(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::perception::Object&
VisualObject::_Internal::obj(const VisualObject* msg) {
  return *msg->obj_;
}
VisualObject::VisualObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perception.VisualObject)
}
VisualObject::VisualObject(const VisualObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_obj()) {
    obj_ = new ::perception::Object(*from.obj_);
  } else {
    obj_ = nullptr;
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&x_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:perception.VisualObject)
}

void VisualObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VisualObject_object_2eproto.base);
  ::memset(&obj_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&obj_)) + sizeof(height_));
}

VisualObject::~VisualObject() {
  // @@protoc_insertion_point(destructor:perception.VisualObject)
  SharedDtor();
}

void VisualObject::SharedDtor() {
  if (this != internal_default_instance()) delete obj_;
}

void VisualObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VisualObject& VisualObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VisualObject_object_2eproto.base);
  return *internal_default_instance();
}


void VisualObject::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.VisualObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(obj_ != nullptr);
    obj_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&x_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* VisualObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .perception.Object obj = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_obj(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VisualObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.VisualObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .perception.Object obj = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::obj(this), target, stream);
  }

  // optional int32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
  }

  // optional int32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
  }

  // optional int32 width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_width(), target);
  }

  // optional int32 height = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.VisualObject)
  return target;
}

size_t VisualObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.VisualObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .perception.Object obj = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *obj_);
    }

    // optional int32 x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_x());
    }

    // optional int32 y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_y());
    }

    // optional int32 width = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_width());
    }

    // optional int32 height = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_height());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VisualObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.VisualObject)
  GOOGLE_DCHECK_NE(&from, this);
  const VisualObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VisualObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.VisualObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.VisualObject)
    MergeFrom(*source);
  }
}

void VisualObject::MergeFrom(const VisualObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.VisualObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_obj()->::perception::Object::MergeFrom(from._internal_obj());
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VisualObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.VisualObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisualObject::CopyFrom(const VisualObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.VisualObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisualObject::IsInitialized() const {
  return true;
}

void VisualObject::InternalSwap(VisualObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(obj_, other->obj_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(width_, other->width_);
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VisualObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VisualObjects::InitAsDefaultInstance() {
  ::perception::_VisualObjects_default_instance_._instance.get_mutable()->header_ = const_cast< ::common::Header*>(
      ::common::Header::internal_default_instance());
}
class VisualObjects::_Internal {
 public:
  using HasBits = decltype(std::declval<VisualObjects>()._has_bits_);
  static const ::common::Header& header(const VisualObjects* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::common::Header&
VisualObjects::_Internal::header(const VisualObjects* msg) {
  return *msg->header_;
}
void VisualObjects::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
VisualObjects::VisualObjects()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perception.VisualObjects)
}
VisualObjects::VisualObjects(const VisualObjects& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      objs_(from.objs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:perception.VisualObjects)
}

void VisualObjects::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VisualObjects_object_2eproto.base);
  header_ = nullptr;
}

VisualObjects::~VisualObjects() {
  // @@protoc_insertion_point(destructor:perception.VisualObjects)
  SharedDtor();
}

void VisualObjects::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void VisualObjects::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VisualObjects& VisualObjects::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VisualObjects_object_2eproto.base);
  return *internal_default_instance();
}


void VisualObjects::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.VisualObjects)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* VisualObjects::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perception.VisualObject objs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VisualObjects::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.VisualObjects)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .perception.VisualObject objs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_objs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_objs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.VisualObjects)
  return target;
}

size_t VisualObjects::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.VisualObjects)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perception.VisualObject objs = 2;
  total_size += 1UL * this->_internal_objs_size();
  for (const auto& msg : this->objs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .common.Header header = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VisualObjects::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.VisualObjects)
  GOOGLE_DCHECK_NE(&from, this);
  const VisualObjects* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VisualObjects>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.VisualObjects)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.VisualObjects)
    MergeFrom(*source);
  }
}

void VisualObjects::MergeFrom(const VisualObjects& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.VisualObjects)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objs_.MergeFrom(from.objs_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::common::Header::MergeFrom(from._internal_header());
  }
}

void VisualObjects::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.VisualObjects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisualObjects::CopyFrom(const VisualObjects& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.VisualObjects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisualObjects::IsInitialized() const {
  return true;
}

void VisualObjects::InternalSwap(VisualObjects* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  objs_.InternalSwap(&other->objs_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VisualObjects::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrackedObject::InitAsDefaultInstance() {
  ::perception::_TrackedObject_default_instance_._instance.get_mutable()->obj_ = const_cast< ::perception::Object*>(
      ::perception::Object::internal_default_instance());
  ::perception::_TrackedObject_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::geometry::Vector3*>(
      ::geometry::Vector3::internal_default_instance());
}
class TrackedObject::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackedObject>()._has_bits_);
  static const ::perception::Object& obj(const TrackedObject* msg);
  static void set_has_obj(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_yaw(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_yaw_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::geometry::Vector3& velocity(const TrackedObject* msg);
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_absolute_longitude_v(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_absolute_longitude_a(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_absolute_lateral_v(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::perception::Object&
TrackedObject::_Internal::obj(const TrackedObject* msg) {
  return *msg->obj_;
}
const ::geometry::Vector3&
TrackedObject::_Internal::velocity(const TrackedObject* msg) {
  return *msg->velocity_;
}
void TrackedObject::clear_velocity() {
  if (velocity_ != nullptr) velocity_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void TrackedObject::clear_trace() {
  trace_.Clear();
}
TrackedObject::TrackedObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perception.TrackedObject)
}
TrackedObject::TrackedObject(const TrackedObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      trace_(from.trace_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_obj()) {
    obj_ = new ::perception::Object(*from.obj_);
  } else {
    obj_ = nullptr;
  }
  if (from._internal_has_velocity()) {
    velocity_ = new ::geometry::Vector3(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  ::memcpy(&yaw_, &from.yaw_,
    static_cast<size_t>(reinterpret_cast<char*>(&absolute_lateral_v_) -
    reinterpret_cast<char*>(&yaw_)) + sizeof(absolute_lateral_v_));
  // @@protoc_insertion_point(copy_constructor:perception.TrackedObject)
}

void TrackedObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrackedObject_object_2eproto.base);
  ::memset(&obj_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&absolute_lateral_v_) -
      reinterpret_cast<char*>(&obj_)) + sizeof(absolute_lateral_v_));
}

TrackedObject::~TrackedObject() {
  // @@protoc_insertion_point(destructor:perception.TrackedObject)
  SharedDtor();
}

void TrackedObject::SharedDtor() {
  if (this != internal_default_instance()) delete obj_;
  if (this != internal_default_instance()) delete velocity_;
}

void TrackedObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackedObject& TrackedObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackedObject_object_2eproto.base);
  return *internal_default_instance();
}


void TrackedObject::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.TrackedObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trace_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(obj_ != nullptr);
      obj_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(velocity_ != nullptr);
      velocity_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&yaw_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&absolute_lateral_v_) -
        reinterpret_cast<char*>(&yaw_)) + sizeof(absolute_lateral_v_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TrackedObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .perception.Object obj = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_obj(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float yaw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_yaw(&has_bits);
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float yaw_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_yaw_rate(&has_bits);
          yaw_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .geometry.Vector3 velocity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .geometry.Point trace = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trace(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional float absolute_longitude_v = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_absolute_longitude_v(&has_bits);
          absolute_longitude_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float absolute_longitude_a = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_absolute_longitude_a(&has_bits);
          absolute_longitude_a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float absolute_lateral_v = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_absolute_lateral_v(&has_bits);
          absolute_lateral_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackedObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.TrackedObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .perception.Object obj = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::obj(this), target, stream);
  }

  // optional float yaw = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_yaw(), target);
  }

  // optional float yaw_rate = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_yaw_rate(), target);
  }

  // optional .geometry.Vector3 velocity = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::velocity(this), target, stream);
  }

  // repeated .geometry.Point trace = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trace_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_trace(i), target, stream);
  }

  // optional float absolute_longitude_v = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_absolute_longitude_v(), target);
  }

  // optional float absolute_longitude_a = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_absolute_longitude_a(), target);
  }

  // optional float absolute_lateral_v = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_absolute_lateral_v(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.TrackedObject)
  return target;
}

size_t TrackedObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.TrackedObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .geometry.Point trace = 5;
  total_size += 1UL * this->_internal_trace_size();
  for (const auto& msg : this->trace_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .perception.Object obj = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *obj_);
    }

    // optional .geometry.Vector3 velocity = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *velocity_);
    }

    // optional float yaw = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float yaw_rate = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float absolute_longitude_v = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float absolute_longitude_a = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float absolute_lateral_v = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackedObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.TrackedObject)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackedObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackedObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.TrackedObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.TrackedObject)
    MergeFrom(*source);
  }
}

void TrackedObject::MergeFrom(const TrackedObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.TrackedObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trace_.MergeFrom(from.trace_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_obj()->::perception::Object::MergeFrom(from._internal_obj());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_velocity()->::geometry::Vector3::MergeFrom(from._internal_velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      yaw_ = from.yaw_;
    }
    if (cached_has_bits & 0x00000008u) {
      yaw_rate_ = from.yaw_rate_;
    }
    if (cached_has_bits & 0x00000010u) {
      absolute_longitude_v_ = from.absolute_longitude_v_;
    }
    if (cached_has_bits & 0x00000020u) {
      absolute_longitude_a_ = from.absolute_longitude_a_;
    }
    if (cached_has_bits & 0x00000040u) {
      absolute_lateral_v_ = from.absolute_lateral_v_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrackedObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.TrackedObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackedObject::CopyFrom(const TrackedObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.TrackedObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackedObject::IsInitialized() const {
  return true;
}

void TrackedObject::InternalSwap(TrackedObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  trace_.InternalSwap(&other->trace_);
  swap(obj_, other->obj_);
  swap(velocity_, other->velocity_);
  swap(yaw_, other->yaw_);
  swap(yaw_rate_, other->yaw_rate_);
  swap(absolute_longitude_v_, other->absolute_longitude_v_);
  swap(absolute_longitude_a_, other->absolute_longitude_a_);
  swap(absolute_lateral_v_, other->absolute_lateral_v_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackedObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrackedObjects::InitAsDefaultInstance() {
  ::perception::_TrackedObjects_default_instance_._instance.get_mutable()->header_ = const_cast< ::common::Header*>(
      ::common::Header::internal_default_instance());
}
class TrackedObjects::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackedObjects>()._has_bits_);
  static const ::common::Header& header(const TrackedObjects* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::common::Header&
TrackedObjects::_Internal::header(const TrackedObjects* msg) {
  return *msg->header_;
}
void TrackedObjects::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
TrackedObjects::TrackedObjects()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perception.TrackedObjects)
}
TrackedObjects::TrackedObjects(const TrackedObjects& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      objs_(from.objs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:perception.TrackedObjects)
}

void TrackedObjects::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrackedObjects_object_2eproto.base);
  header_ = nullptr;
}

TrackedObjects::~TrackedObjects() {
  // @@protoc_insertion_point(destructor:perception.TrackedObjects)
  SharedDtor();
}

void TrackedObjects::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void TrackedObjects::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackedObjects& TrackedObjects::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackedObjects_object_2eproto.base);
  return *internal_default_instance();
}


void TrackedObjects::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.TrackedObjects)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TrackedObjects::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perception.TrackedObject objs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackedObjects::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.TrackedObjects)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .perception.TrackedObject objs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_objs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_objs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.TrackedObjects)
  return target;
}

size_t TrackedObjects::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.TrackedObjects)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perception.TrackedObject objs = 2;
  total_size += 1UL * this->_internal_objs_size();
  for (const auto& msg : this->objs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .common.Header header = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackedObjects::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.TrackedObjects)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackedObjects* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackedObjects>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.TrackedObjects)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.TrackedObjects)
    MergeFrom(*source);
  }
}

void TrackedObjects::MergeFrom(const TrackedObjects& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.TrackedObjects)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objs_.MergeFrom(from.objs_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::common::Header::MergeFrom(from._internal_header());
  }
}

void TrackedObjects::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.TrackedObjects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackedObjects::CopyFrom(const TrackedObjects& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.TrackedObjects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackedObjects::IsInitialized() const {
  return true;
}

void TrackedObjects::InternalSwap(TrackedObjects* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  objs_.InternalSwap(&other->objs_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackedObjects::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace perception
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perception::Object* Arena::CreateMaybeMessage< ::perception::Object >(Arena* arena) {
  return Arena::CreateInternal< ::perception::Object >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::VisualObject* Arena::CreateMaybeMessage< ::perception::VisualObject >(Arena* arena) {
  return Arena::CreateInternal< ::perception::VisualObject >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::VisualObjects* Arena::CreateMaybeMessage< ::perception::VisualObjects >(Arena* arena) {
  return Arena::CreateInternal< ::perception::VisualObjects >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::TrackedObject* Arena::CreateMaybeMessage< ::perception::TrackedObject >(Arena* arena) {
  return Arena::CreateInternal< ::perception::TrackedObject >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::TrackedObjects* Arena::CreateMaybeMessage< ::perception::TrackedObjects >(Arena* arena) {
  return Arena::CreateInternal< ::perception::TrackedObjects >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
