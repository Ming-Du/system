// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: traffic_light.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_traffic_5flight_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_traffic_5flight_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_traffic_5flight_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_traffic_5flight_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_traffic_5flight_2eproto;
namespace perception {
class TrafficLight;
class TrafficLightDefaultTypeInternal;
extern TrafficLightDefaultTypeInternal _TrafficLight_default_instance_;
class TrafficLights;
class TrafficLightsDefaultTypeInternal;
extern TrafficLightsDefaultTypeInternal _TrafficLights_default_instance_;
}  // namespace perception
PROTOBUF_NAMESPACE_OPEN
template<> ::perception::TrafficLight* Arena::CreateMaybeMessage<::perception::TrafficLight>(Arena*);
template<> ::perception::TrafficLights* Arena::CreateMaybeMessage<::perception::TrafficLights>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perception {

enum LightType : int {
  TYPE_DEFAULT = 0,
  TYPE_VEHICLE = 1,
  TYPE_BICYLE = 2,
  TYPE_PEDSTRIAN = 3,
  TYPE_LANE = 5
};
bool LightType_IsValid(int value);
constexpr LightType LightType_MIN = TYPE_DEFAULT;
constexpr LightType LightType_MAX = TYPE_LANE;
constexpr int LightType_ARRAYSIZE = LightType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LightType_descriptor();
template<typename T>
inline const std::string& LightType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LightType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LightType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LightType_descriptor(), enum_t_value);
}
inline bool LightType_Parse(
    const std::string& name, LightType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LightType>(
    LightType_descriptor(), name, value);
}
enum LightState : int {
  STATE_OFF = 0,
  STATE_RED = 1,
  STATE_YELLOW = 2,
  STATE_GREEN = 3,
  STATE_FLASH = 4
};
bool LightState_IsValid(int value);
constexpr LightState LightState_MIN = STATE_OFF;
constexpr LightState LightState_MAX = STATE_FLASH;
constexpr int LightState_ARRAYSIZE = LightState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LightState_descriptor();
template<typename T>
inline const std::string& LightState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LightState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LightState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LightState_descriptor(), enum_t_value);
}
inline bool LightState_Parse(
    const std::string& name, LightState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LightState>(
    LightState_descriptor(), name, value);
}
// ===================================================================

class TrafficLight :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.TrafficLight) */ {
 public:
  TrafficLight();
  virtual ~TrafficLight();

  TrafficLight(const TrafficLight& from);
  TrafficLight(TrafficLight&& from) noexcept
    : TrafficLight() {
    *this = ::std::move(from);
  }

  inline TrafficLight& operator=(const TrafficLight& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficLight& operator=(TrafficLight&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficLight& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficLight* internal_default_instance() {
    return reinterpret_cast<const TrafficLight*>(
               &_TrafficLight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrafficLight& a, TrafficLight& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficLight* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficLight* New() const final {
    return CreateMaybeMessage<TrafficLight>(nullptr);
  }

  TrafficLight* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficLight>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficLight& from);
  void MergeFrom(const TrafficLight& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficLight* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.TrafficLight";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_traffic_5flight_2eproto);
    return ::descriptor_table_traffic_5flight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kStateFieldNumber = 3,
    kDurationFieldNumber = 4,
  };
  // optional int64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional .perception.LightType type = 2 [default = TYPE_DEFAULT];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::perception::LightType type() const;
  void set_type(::perception::LightType value);
  private:
  ::perception::LightType _internal_type() const;
  void _internal_set_type(::perception::LightType value);
  public:

  // optional .perception.LightState state = 3 [default = STATE_OFF];
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::perception::LightState state() const;
  void set_state(::perception::LightState value);
  private:
  ::perception::LightState _internal_state() const;
  void _internal_set_state(::perception::LightState value);
  public:

  // optional float duration = 4;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  float duration() const;
  void set_duration(float value);
  private:
  float _internal_duration() const;
  void _internal_set_duration(float value);
  public:

  // @@protoc_insertion_point(class_scope:perception.TrafficLight)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  int type_;
  int state_;
  float duration_;
  friend struct ::TableStruct_traffic_5flight_2eproto;
};
// -------------------------------------------------------------------

class TrafficLights :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.TrafficLights) */ {
 public:
  TrafficLights();
  virtual ~TrafficLights();

  TrafficLights(const TrafficLights& from);
  TrafficLights(TrafficLights&& from) noexcept
    : TrafficLights() {
    *this = ::std::move(from);
  }

  inline TrafficLights& operator=(const TrafficLights& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficLights& operator=(TrafficLights&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficLights& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficLights* internal_default_instance() {
    return reinterpret_cast<const TrafficLights*>(
               &_TrafficLights_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TrafficLights& a, TrafficLights& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficLights* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficLights* New() const final {
    return CreateMaybeMessage<TrafficLights>(nullptr);
  }

  TrafficLights* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficLights>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficLights& from);
  void MergeFrom(const TrafficLights& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficLights* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.TrafficLights";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_traffic_5flight_2eproto);
    return ::descriptor_table_traffic_5flight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kStraightFieldNumber = 2,
    kLeftFieldNumber = 3,
    kRightFieldNumber = 4,
    kUTurnFieldNumber = 5,
  };
  // optional .common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::common::Header& header() const;
  ::common::Header* release_header();
  ::common::Header* mutable_header();
  void set_allocated_header(::common::Header* header);
  private:
  const ::common::Header& _internal_header() const;
  ::common::Header* _internal_mutable_header();
  public:

  // optional .perception.TrafficLight straight = 2;
  bool has_straight() const;
  private:
  bool _internal_has_straight() const;
  public:
  void clear_straight();
  const ::perception::TrafficLight& straight() const;
  ::perception::TrafficLight* release_straight();
  ::perception::TrafficLight* mutable_straight();
  void set_allocated_straight(::perception::TrafficLight* straight);
  private:
  const ::perception::TrafficLight& _internal_straight() const;
  ::perception::TrafficLight* _internal_mutable_straight();
  public:

  // optional .perception.TrafficLight left = 3;
  bool has_left() const;
  private:
  bool _internal_has_left() const;
  public:
  void clear_left();
  const ::perception::TrafficLight& left() const;
  ::perception::TrafficLight* release_left();
  ::perception::TrafficLight* mutable_left();
  void set_allocated_left(::perception::TrafficLight* left);
  private:
  const ::perception::TrafficLight& _internal_left() const;
  ::perception::TrafficLight* _internal_mutable_left();
  public:

  // optional .perception.TrafficLight right = 4;
  bool has_right() const;
  private:
  bool _internal_has_right() const;
  public:
  void clear_right();
  const ::perception::TrafficLight& right() const;
  ::perception::TrafficLight* release_right();
  ::perception::TrafficLight* mutable_right();
  void set_allocated_right(::perception::TrafficLight* right);
  private:
  const ::perception::TrafficLight& _internal_right() const;
  ::perception::TrafficLight* _internal_mutable_right();
  public:

  // optional .perception.TrafficLight u_turn = 5;
  bool has_u_turn() const;
  private:
  bool _internal_has_u_turn() const;
  public:
  void clear_u_turn();
  const ::perception::TrafficLight& u_turn() const;
  ::perception::TrafficLight* release_u_turn();
  ::perception::TrafficLight* mutable_u_turn();
  void set_allocated_u_turn(::perception::TrafficLight* u_turn);
  private:
  const ::perception::TrafficLight& _internal_u_turn() const;
  ::perception::TrafficLight* _internal_mutable_u_turn();
  public:

  // @@protoc_insertion_point(class_scope:perception.TrafficLights)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::common::Header* header_;
  ::perception::TrafficLight* straight_;
  ::perception::TrafficLight* left_;
  ::perception::TrafficLight* right_;
  ::perception::TrafficLight* u_turn_;
  friend struct ::TableStruct_traffic_5flight_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrafficLight

// optional int64 id = 1;
inline bool TrafficLight::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrafficLight::has_id() const {
  return _internal_has_id();
}
inline void TrafficLight::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrafficLight::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrafficLight::id() const {
  // @@protoc_insertion_point(field_get:perception.TrafficLight.id)
  return _internal_id();
}
inline void TrafficLight::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void TrafficLight::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:perception.TrafficLight.id)
}

// optional .perception.LightType type = 2 [default = TYPE_DEFAULT];
inline bool TrafficLight::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrafficLight::has_type() const {
  return _internal_has_type();
}
inline void TrafficLight::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::perception::LightType TrafficLight::_internal_type() const {
  return static_cast< ::perception::LightType >(type_);
}
inline ::perception::LightType TrafficLight::type() const {
  // @@protoc_insertion_point(field_get:perception.TrafficLight.type)
  return _internal_type();
}
inline void TrafficLight::_internal_set_type(::perception::LightType value) {
  assert(::perception::LightType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void TrafficLight::set_type(::perception::LightType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:perception.TrafficLight.type)
}

// optional .perception.LightState state = 3 [default = STATE_OFF];
inline bool TrafficLight::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrafficLight::has_state() const {
  return _internal_has_state();
}
inline void TrafficLight::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::perception::LightState TrafficLight::_internal_state() const {
  return static_cast< ::perception::LightState >(state_);
}
inline ::perception::LightState TrafficLight::state() const {
  // @@protoc_insertion_point(field_get:perception.TrafficLight.state)
  return _internal_state();
}
inline void TrafficLight::_internal_set_state(::perception::LightState value) {
  assert(::perception::LightState_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  state_ = value;
}
inline void TrafficLight::set_state(::perception::LightState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:perception.TrafficLight.state)
}

// optional float duration = 4;
inline bool TrafficLight::_internal_has_duration() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TrafficLight::has_duration() const {
  return _internal_has_duration();
}
inline void TrafficLight::clear_duration() {
  duration_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float TrafficLight::_internal_duration() const {
  return duration_;
}
inline float TrafficLight::duration() const {
  // @@protoc_insertion_point(field_get:perception.TrafficLight.duration)
  return _internal_duration();
}
inline void TrafficLight::_internal_set_duration(float value) {
  _has_bits_[0] |= 0x00000008u;
  duration_ = value;
}
inline void TrafficLight::set_duration(float value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:perception.TrafficLight.duration)
}

// -------------------------------------------------------------------

// TrafficLights

// optional .common.Header header = 1;
inline bool TrafficLights::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool TrafficLights::has_header() const {
  return _internal_has_header();
}
inline const ::common::Header& TrafficLights::_internal_header() const {
  const ::common::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::Header*>(
      &::common::_Header_default_instance_);
}
inline const ::common::Header& TrafficLights::header() const {
  // @@protoc_insertion_point(field_get:perception.TrafficLights.header)
  return _internal_header();
}
inline ::common::Header* TrafficLights::release_header() {
  // @@protoc_insertion_point(field_release:perception.TrafficLights.header)
  _has_bits_[0] &= ~0x00000001u;
  ::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::Header* TrafficLights::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::common::Header* TrafficLights::mutable_header() {
  // @@protoc_insertion_point(field_mutable:perception.TrafficLights.header)
  return _internal_mutable_header();
}
inline void TrafficLights::set_allocated_header(::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:perception.TrafficLights.header)
}

// optional .perception.TrafficLight straight = 2;
inline bool TrafficLights::_internal_has_straight() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || straight_ != nullptr);
  return value;
}
inline bool TrafficLights::has_straight() const {
  return _internal_has_straight();
}
inline void TrafficLights::clear_straight() {
  if (straight_ != nullptr) straight_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::perception::TrafficLight& TrafficLights::_internal_straight() const {
  const ::perception::TrafficLight* p = straight_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::TrafficLight*>(
      &::perception::_TrafficLight_default_instance_);
}
inline const ::perception::TrafficLight& TrafficLights::straight() const {
  // @@protoc_insertion_point(field_get:perception.TrafficLights.straight)
  return _internal_straight();
}
inline ::perception::TrafficLight* TrafficLights::release_straight() {
  // @@protoc_insertion_point(field_release:perception.TrafficLights.straight)
  _has_bits_[0] &= ~0x00000002u;
  ::perception::TrafficLight* temp = straight_;
  straight_ = nullptr;
  return temp;
}
inline ::perception::TrafficLight* TrafficLights::_internal_mutable_straight() {
  _has_bits_[0] |= 0x00000002u;
  if (straight_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::TrafficLight>(GetArenaNoVirtual());
    straight_ = p;
  }
  return straight_;
}
inline ::perception::TrafficLight* TrafficLights::mutable_straight() {
  // @@protoc_insertion_point(field_mutable:perception.TrafficLights.straight)
  return _internal_mutable_straight();
}
inline void TrafficLights::set_allocated_straight(::perception::TrafficLight* straight) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete straight_;
  }
  if (straight) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      straight = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, straight, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  straight_ = straight;
  // @@protoc_insertion_point(field_set_allocated:perception.TrafficLights.straight)
}

// optional .perception.TrafficLight left = 3;
inline bool TrafficLights::_internal_has_left() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || left_ != nullptr);
  return value;
}
inline bool TrafficLights::has_left() const {
  return _internal_has_left();
}
inline void TrafficLights::clear_left() {
  if (left_ != nullptr) left_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::perception::TrafficLight& TrafficLights::_internal_left() const {
  const ::perception::TrafficLight* p = left_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::TrafficLight*>(
      &::perception::_TrafficLight_default_instance_);
}
inline const ::perception::TrafficLight& TrafficLights::left() const {
  // @@protoc_insertion_point(field_get:perception.TrafficLights.left)
  return _internal_left();
}
inline ::perception::TrafficLight* TrafficLights::release_left() {
  // @@protoc_insertion_point(field_release:perception.TrafficLights.left)
  _has_bits_[0] &= ~0x00000004u;
  ::perception::TrafficLight* temp = left_;
  left_ = nullptr;
  return temp;
}
inline ::perception::TrafficLight* TrafficLights::_internal_mutable_left() {
  _has_bits_[0] |= 0x00000004u;
  if (left_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::TrafficLight>(GetArenaNoVirtual());
    left_ = p;
  }
  return left_;
}
inline ::perception::TrafficLight* TrafficLights::mutable_left() {
  // @@protoc_insertion_point(field_mutable:perception.TrafficLights.left)
  return _internal_mutable_left();
}
inline void TrafficLights::set_allocated_left(::perception::TrafficLight* left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete left_;
  }
  if (left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  left_ = left;
  // @@protoc_insertion_point(field_set_allocated:perception.TrafficLights.left)
}

// optional .perception.TrafficLight right = 4;
inline bool TrafficLights::_internal_has_right() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || right_ != nullptr);
  return value;
}
inline bool TrafficLights::has_right() const {
  return _internal_has_right();
}
inline void TrafficLights::clear_right() {
  if (right_ != nullptr) right_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::perception::TrafficLight& TrafficLights::_internal_right() const {
  const ::perception::TrafficLight* p = right_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::TrafficLight*>(
      &::perception::_TrafficLight_default_instance_);
}
inline const ::perception::TrafficLight& TrafficLights::right() const {
  // @@protoc_insertion_point(field_get:perception.TrafficLights.right)
  return _internal_right();
}
inline ::perception::TrafficLight* TrafficLights::release_right() {
  // @@protoc_insertion_point(field_release:perception.TrafficLights.right)
  _has_bits_[0] &= ~0x00000008u;
  ::perception::TrafficLight* temp = right_;
  right_ = nullptr;
  return temp;
}
inline ::perception::TrafficLight* TrafficLights::_internal_mutable_right() {
  _has_bits_[0] |= 0x00000008u;
  if (right_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::TrafficLight>(GetArenaNoVirtual());
    right_ = p;
  }
  return right_;
}
inline ::perception::TrafficLight* TrafficLights::mutable_right() {
  // @@protoc_insertion_point(field_mutable:perception.TrafficLights.right)
  return _internal_mutable_right();
}
inline void TrafficLights::set_allocated_right(::perception::TrafficLight* right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete right_;
  }
  if (right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  right_ = right;
  // @@protoc_insertion_point(field_set_allocated:perception.TrafficLights.right)
}

// optional .perception.TrafficLight u_turn = 5;
inline bool TrafficLights::_internal_has_u_turn() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || u_turn_ != nullptr);
  return value;
}
inline bool TrafficLights::has_u_turn() const {
  return _internal_has_u_turn();
}
inline void TrafficLights::clear_u_turn() {
  if (u_turn_ != nullptr) u_turn_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::perception::TrafficLight& TrafficLights::_internal_u_turn() const {
  const ::perception::TrafficLight* p = u_turn_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::TrafficLight*>(
      &::perception::_TrafficLight_default_instance_);
}
inline const ::perception::TrafficLight& TrafficLights::u_turn() const {
  // @@protoc_insertion_point(field_get:perception.TrafficLights.u_turn)
  return _internal_u_turn();
}
inline ::perception::TrafficLight* TrafficLights::release_u_turn() {
  // @@protoc_insertion_point(field_release:perception.TrafficLights.u_turn)
  _has_bits_[0] &= ~0x00000010u;
  ::perception::TrafficLight* temp = u_turn_;
  u_turn_ = nullptr;
  return temp;
}
inline ::perception::TrafficLight* TrafficLights::_internal_mutable_u_turn() {
  _has_bits_[0] |= 0x00000010u;
  if (u_turn_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::TrafficLight>(GetArenaNoVirtual());
    u_turn_ = p;
  }
  return u_turn_;
}
inline ::perception::TrafficLight* TrafficLights::mutable_u_turn() {
  // @@protoc_insertion_point(field_mutable:perception.TrafficLights.u_turn)
  return _internal_mutable_u_turn();
}
inline void TrafficLights::set_allocated_u_turn(::perception::TrafficLight* u_turn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete u_turn_;
  }
  if (u_turn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      u_turn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, u_turn, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  u_turn_ = u_turn;
  // @@protoc_insertion_point(field_set_allocated:perception.TrafficLights.u_turn)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perception::LightType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::perception::LightType>() {
  return ::perception::LightType_descriptor();
}
template <> struct is_proto_enum< ::perception::LightState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::perception::LightState>() {
  return ::perception::LightState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_traffic_5flight_2eproto
