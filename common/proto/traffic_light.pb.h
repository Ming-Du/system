// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: traffic_light.proto

#ifndef PROTOBUF_traffic_5flight_2eproto__INCLUDED
#define PROTOBUF_traffic_5flight_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
// @@protoc_insertion_point(includes)

namespace perception {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_traffic_5flight_2eproto();
void protobuf_AssignDesc_traffic_5flight_2eproto();
void protobuf_ShutdownFile_traffic_5flight_2eproto();

class TrafficLight;
class TrafficLights;

enum LightType {
  TYPE_DEFAULT = 0,
  TYPE_VEHICLE = 1,
  TYPE_BICYLE = 2,
  TYPE_PEDSTRIAN = 3,
  TYPE_LANE = 5
};
bool LightType_IsValid(int value);
const LightType LightType_MIN = TYPE_DEFAULT;
const LightType LightType_MAX = TYPE_LANE;
const int LightType_ARRAYSIZE = LightType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LightType_descriptor();
inline const ::std::string& LightType_Name(LightType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LightType_descriptor(), value);
}
inline bool LightType_Parse(
    const ::std::string& name, LightType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LightType>(
    LightType_descriptor(), name, value);
}
enum LightState {
  STATE_OFF = 0,
  STATE_RED = 1,
  STATE_YELLOW = 2,
  STATE_GREEN = 3,
  STATE_FLASH = 4
};
bool LightState_IsValid(int value);
const LightState LightState_MIN = STATE_OFF;
const LightState LightState_MAX = STATE_FLASH;
const int LightState_ARRAYSIZE = LightState_MAX + 1;

const ::google::protobuf::EnumDescriptor* LightState_descriptor();
inline const ::std::string& LightState_Name(LightState value) {
  return ::google::protobuf::internal::NameOfEnum(
    LightState_descriptor(), value);
}
inline bool LightState_Parse(
    const ::std::string& name, LightState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LightState>(
    LightState_descriptor(), name, value);
}
// ===================================================================

class TrafficLight : public ::google::protobuf::Message {
 public:
  TrafficLight();
  virtual ~TrafficLight();

  TrafficLight(const TrafficLight& from);

  inline TrafficLight& operator=(const TrafficLight& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficLight& default_instance();

  void Swap(TrafficLight* other);

  // implements Message ----------------------------------------------

  TrafficLight* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrafficLight& from);
  void MergeFrom(const TrafficLight& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional .perception.LightType type = 2 [default = TYPE_DEFAULT];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::perception::LightType type() const;
  inline void set_type(::perception::LightType value);

  // optional .perception.LightState state = 3 [default = STATE_OFF];
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::perception::LightState state() const;
  inline void set_state(::perception::LightState value);

  // optional float duration = 4;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 4;
  inline float duration() const;
  inline void set_duration(float value);

  // @@protoc_insertion_point(class_scope:perception.TrafficLight)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_duration();
  inline void clear_has_duration();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  int type_;
  int state_;
  float duration_;
  friend void  protobuf_AddDesc_traffic_5flight_2eproto();
  friend void protobuf_AssignDesc_traffic_5flight_2eproto();
  friend void protobuf_ShutdownFile_traffic_5flight_2eproto();

  void InitAsDefaultInstance();
  static TrafficLight* default_instance_;
};
// -------------------------------------------------------------------

class TrafficLights : public ::google::protobuf::Message {
 public:
  TrafficLights();
  virtual ~TrafficLights();

  TrafficLights(const TrafficLights& from);

  inline TrafficLights& operator=(const TrafficLights& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficLights& default_instance();

  void Swap(TrafficLights* other);

  // implements Message ----------------------------------------------

  TrafficLights* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrafficLights& from);
  void MergeFrom(const TrafficLights& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.Header header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::common::Header& header() const;
  inline ::common::Header* mutable_header();
  inline ::common::Header* release_header();
  inline void set_allocated_header(::common::Header* header);

  // optional .perception.TrafficLight straight = 2;
  inline bool has_straight() const;
  inline void clear_straight();
  static const int kStraightFieldNumber = 2;
  inline const ::perception::TrafficLight& straight() const;
  inline ::perception::TrafficLight* mutable_straight();
  inline ::perception::TrafficLight* release_straight();
  inline void set_allocated_straight(::perception::TrafficLight* straight);

  // optional .perception.TrafficLight left = 3;
  inline bool has_left() const;
  inline void clear_left();
  static const int kLeftFieldNumber = 3;
  inline const ::perception::TrafficLight& left() const;
  inline ::perception::TrafficLight* mutable_left();
  inline ::perception::TrafficLight* release_left();
  inline void set_allocated_left(::perception::TrafficLight* left);

  // optional .perception.TrafficLight right = 4;
  inline bool has_right() const;
  inline void clear_right();
  static const int kRightFieldNumber = 4;
  inline const ::perception::TrafficLight& right() const;
  inline ::perception::TrafficLight* mutable_right();
  inline ::perception::TrafficLight* release_right();
  inline void set_allocated_right(::perception::TrafficLight* right);

  // optional .perception.TrafficLight u_turn = 5;
  inline bool has_u_turn() const;
  inline void clear_u_turn();
  static const int kUTurnFieldNumber = 5;
  inline const ::perception::TrafficLight& u_turn() const;
  inline ::perception::TrafficLight* mutable_u_turn();
  inline ::perception::TrafficLight* release_u_turn();
  inline void set_allocated_u_turn(::perception::TrafficLight* u_turn);

  // @@protoc_insertion_point(class_scope:perception.TrafficLights)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_straight();
  inline void clear_has_straight();
  inline void set_has_left();
  inline void clear_has_left();
  inline void set_has_right();
  inline void clear_has_right();
  inline void set_has_u_turn();
  inline void clear_has_u_turn();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::Header* header_;
  ::perception::TrafficLight* straight_;
  ::perception::TrafficLight* left_;
  ::perception::TrafficLight* right_;
  ::perception::TrafficLight* u_turn_;
  friend void  protobuf_AddDesc_traffic_5flight_2eproto();
  friend void protobuf_AssignDesc_traffic_5flight_2eproto();
  friend void protobuf_ShutdownFile_traffic_5flight_2eproto();

  void InitAsDefaultInstance();
  static TrafficLights* default_instance_;
};
// ===================================================================


// ===================================================================

// TrafficLight

// optional int64 id = 1;
inline bool TrafficLight::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrafficLight::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrafficLight::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrafficLight::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 TrafficLight::id() const {
  // @@protoc_insertion_point(field_get:perception.TrafficLight.id)
  return id_;
}
inline void TrafficLight::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:perception.TrafficLight.id)
}

// optional .perception.LightType type = 2 [default = TYPE_DEFAULT];
inline bool TrafficLight::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrafficLight::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrafficLight::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrafficLight::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::perception::LightType TrafficLight::type() const {
  // @@protoc_insertion_point(field_get:perception.TrafficLight.type)
  return static_cast< ::perception::LightType >(type_);
}
inline void TrafficLight::set_type(::perception::LightType value) {
  assert(::perception::LightType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:perception.TrafficLight.type)
}

// optional .perception.LightState state = 3 [default = STATE_OFF];
inline bool TrafficLight::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrafficLight::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrafficLight::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrafficLight::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::perception::LightState TrafficLight::state() const {
  // @@protoc_insertion_point(field_get:perception.TrafficLight.state)
  return static_cast< ::perception::LightState >(state_);
}
inline void TrafficLight::set_state(::perception::LightState value) {
  assert(::perception::LightState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:perception.TrafficLight.state)
}

// optional float duration = 4;
inline bool TrafficLight::has_duration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrafficLight::set_has_duration() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrafficLight::clear_has_duration() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrafficLight::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline float TrafficLight::duration() const {
  // @@protoc_insertion_point(field_get:perception.TrafficLight.duration)
  return duration_;
}
inline void TrafficLight::set_duration(float value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:perception.TrafficLight.duration)
}

// -------------------------------------------------------------------

// TrafficLights

// optional .common.Header header = 1;
inline bool TrafficLights::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrafficLights::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrafficLights::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrafficLights::clear_header() {
  if (header_ != NULL) header_->::common::Header::Clear();
  clear_has_header();
}
inline const ::common::Header& TrafficLights::header() const {
  // @@protoc_insertion_point(field_get:perception.TrafficLights.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::common::Header* TrafficLights::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::common::Header;
  // @@protoc_insertion_point(field_mutable:perception.TrafficLights.header)
  return header_;
}
inline ::common::Header* TrafficLights::release_header() {
  clear_has_header();
  ::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void TrafficLights::set_allocated_header(::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:perception.TrafficLights.header)
}

// optional .perception.TrafficLight straight = 2;
inline bool TrafficLights::has_straight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrafficLights::set_has_straight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrafficLights::clear_has_straight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrafficLights::clear_straight() {
  if (straight_ != NULL) straight_->::perception::TrafficLight::Clear();
  clear_has_straight();
}
inline const ::perception::TrafficLight& TrafficLights::straight() const {
  // @@protoc_insertion_point(field_get:perception.TrafficLights.straight)
  return straight_ != NULL ? *straight_ : *default_instance_->straight_;
}
inline ::perception::TrafficLight* TrafficLights::mutable_straight() {
  set_has_straight();
  if (straight_ == NULL) straight_ = new ::perception::TrafficLight;
  // @@protoc_insertion_point(field_mutable:perception.TrafficLights.straight)
  return straight_;
}
inline ::perception::TrafficLight* TrafficLights::release_straight() {
  clear_has_straight();
  ::perception::TrafficLight* temp = straight_;
  straight_ = NULL;
  return temp;
}
inline void TrafficLights::set_allocated_straight(::perception::TrafficLight* straight) {
  delete straight_;
  straight_ = straight;
  if (straight) {
    set_has_straight();
  } else {
    clear_has_straight();
  }
  // @@protoc_insertion_point(field_set_allocated:perception.TrafficLights.straight)
}

// optional .perception.TrafficLight left = 3;
inline bool TrafficLights::has_left() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrafficLights::set_has_left() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrafficLights::clear_has_left() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrafficLights::clear_left() {
  if (left_ != NULL) left_->::perception::TrafficLight::Clear();
  clear_has_left();
}
inline const ::perception::TrafficLight& TrafficLights::left() const {
  // @@protoc_insertion_point(field_get:perception.TrafficLights.left)
  return left_ != NULL ? *left_ : *default_instance_->left_;
}
inline ::perception::TrafficLight* TrafficLights::mutable_left() {
  set_has_left();
  if (left_ == NULL) left_ = new ::perception::TrafficLight;
  // @@protoc_insertion_point(field_mutable:perception.TrafficLights.left)
  return left_;
}
inline ::perception::TrafficLight* TrafficLights::release_left() {
  clear_has_left();
  ::perception::TrafficLight* temp = left_;
  left_ = NULL;
  return temp;
}
inline void TrafficLights::set_allocated_left(::perception::TrafficLight* left) {
  delete left_;
  left_ = left;
  if (left) {
    set_has_left();
  } else {
    clear_has_left();
  }
  // @@protoc_insertion_point(field_set_allocated:perception.TrafficLights.left)
}

// optional .perception.TrafficLight right = 4;
inline bool TrafficLights::has_right() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrafficLights::set_has_right() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrafficLights::clear_has_right() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrafficLights::clear_right() {
  if (right_ != NULL) right_->::perception::TrafficLight::Clear();
  clear_has_right();
}
inline const ::perception::TrafficLight& TrafficLights::right() const {
  // @@protoc_insertion_point(field_get:perception.TrafficLights.right)
  return right_ != NULL ? *right_ : *default_instance_->right_;
}
inline ::perception::TrafficLight* TrafficLights::mutable_right() {
  set_has_right();
  if (right_ == NULL) right_ = new ::perception::TrafficLight;
  // @@protoc_insertion_point(field_mutable:perception.TrafficLights.right)
  return right_;
}
inline ::perception::TrafficLight* TrafficLights::release_right() {
  clear_has_right();
  ::perception::TrafficLight* temp = right_;
  right_ = NULL;
  return temp;
}
inline void TrafficLights::set_allocated_right(::perception::TrafficLight* right) {
  delete right_;
  right_ = right;
  if (right) {
    set_has_right();
  } else {
    clear_has_right();
  }
  // @@protoc_insertion_point(field_set_allocated:perception.TrafficLights.right)
}

// optional .perception.TrafficLight u_turn = 5;
inline bool TrafficLights::has_u_turn() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrafficLights::set_has_u_turn() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrafficLights::clear_has_u_turn() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrafficLights::clear_u_turn() {
  if (u_turn_ != NULL) u_turn_->::perception::TrafficLight::Clear();
  clear_has_u_turn();
}
inline const ::perception::TrafficLight& TrafficLights::u_turn() const {
  // @@protoc_insertion_point(field_get:perception.TrafficLights.u_turn)
  return u_turn_ != NULL ? *u_turn_ : *default_instance_->u_turn_;
}
inline ::perception::TrafficLight* TrafficLights::mutable_u_turn() {
  set_has_u_turn();
  if (u_turn_ == NULL) u_turn_ = new ::perception::TrafficLight;
  // @@protoc_insertion_point(field_mutable:perception.TrafficLights.u_turn)
  return u_turn_;
}
inline ::perception::TrafficLight* TrafficLights::release_u_turn() {
  clear_has_u_turn();
  ::perception::TrafficLight* temp = u_turn_;
  u_turn_ = NULL;
  return temp;
}
inline void TrafficLights::set_allocated_u_turn(::perception::TrafficLight* u_turn) {
  delete u_turn_;
  u_turn_ = u_turn;
  if (u_turn) {
    set_has_u_turn();
  } else {
    clear_has_u_turn();
  }
  // @@protoc_insertion_point(field_set_allocated:perception.TrafficLights.u_turn)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::perception::LightType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::perception::LightType>() {
  return ::perception::LightType_descriptor();
}
template <> struct is_proto_enum< ::perception::LightState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::perception::LightState>() {
  return ::perception::LightState_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_traffic_5flight_2eproto__INCLUDED
