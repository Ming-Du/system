// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: localization.proto

#ifndef PROTOBUF_localization_2eproto__INCLUDED
#define PROTOBUF_localization_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
#include "geometry.pb.h"
// @@protoc_insertion_point(includes)

namespace localization {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_localization_2eproto();
void protobuf_AssignDesc_localization_2eproto();
void protobuf_ShutdownFile_localization_2eproto();

class Localization;

enum LocalizationMode {
  GNSS = 0,
  LIDAR_BASED = 1
};
bool LocalizationMode_IsValid(int value);
const LocalizationMode LocalizationMode_MIN = GNSS;
const LocalizationMode LocalizationMode_MAX = LIDAR_BASED;
const int LocalizationMode_ARRAYSIZE = LocalizationMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* LocalizationMode_descriptor();
inline const ::std::string& LocalizationMode_Name(LocalizationMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    LocalizationMode_descriptor(), value);
}
inline bool LocalizationMode_Parse(
    const ::std::string& name, LocalizationMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LocalizationMode>(
    LocalizationMode_descriptor(), name, value);
}
enum LocalizationFrame {
  LOCAL = 0,
  WGS84 = 1
};
bool LocalizationFrame_IsValid(int value);
const LocalizationFrame LocalizationFrame_MIN = LOCAL;
const LocalizationFrame LocalizationFrame_MAX = WGS84;
const int LocalizationFrame_ARRAYSIZE = LocalizationFrame_MAX + 1;

const ::google::protobuf::EnumDescriptor* LocalizationFrame_descriptor();
inline const ::std::string& LocalizationFrame_Name(LocalizationFrame value) {
  return ::google::protobuf::internal::NameOfEnum(
    LocalizationFrame_descriptor(), value);
}
inline bool LocalizationFrame_Parse(
    const ::std::string& name, LocalizationFrame* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LocalizationFrame>(
    LocalizationFrame_descriptor(), name, value);
}
// ===================================================================

class Localization : public ::google::protobuf::Message {
 public:
  Localization();
  virtual ~Localization();

  Localization(const Localization& from);

  inline Localization& operator=(const Localization& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Localization& default_instance();

  void Swap(Localization* other);

  // implements Message ----------------------------------------------

  Localization* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Localization& from);
  void MergeFrom(const Localization& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.Header header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::common::Header& header() const;
  inline ::common::Header* mutable_header();
  inline ::common::Header* release_header();
  inline void set_allocated_header(::common::Header* header);

  // optional .localization.LocalizationMode mode = 2 [default = GNSS];
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 2;
  inline ::localization::LocalizationMode mode() const;
  inline void set_mode(::localization::LocalizationMode value);

  // optional .localization.LocalizationFrame frame = 3 [default = LOCAL];
  inline bool has_frame() const;
  inline void clear_frame();
  static const int kFrameFieldNumber = 3;
  inline ::localization::LocalizationFrame frame() const;
  inline void set_frame(::localization::LocalizationFrame value);

  // optional uint32 local_frame_seq = 4;
  inline bool has_local_frame_seq() const;
  inline void clear_local_frame_seq();
  static const int kLocalFrameSeqFieldNumber = 4;
  inline ::google::protobuf::uint32 local_frame_seq() const;
  inline void set_local_frame_seq(::google::protobuf::uint32 value);

  // repeated double transform = 5 [packed = true];
  inline int transform_size() const;
  inline void clear_transform();
  static const int kTransformFieldNumber = 5;
  inline double transform(int index) const;
  inline void set_transform(int index, double value);
  inline void add_transform(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      transform() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_transform();

  // optional .geometry.Point position = 7;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 7;
  inline const ::geometry::Point& position() const;
  inline ::geometry::Point* mutable_position();
  inline ::geometry::Point* release_position();
  inline void set_allocated_position(::geometry::Point* position);

  // optional double longitude = 8;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 8;
  inline double longitude() const;
  inline void set_longitude(double value);

  // optional double latitude = 9;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 9;
  inline double latitude() const;
  inline void set_latitude(double value);

  // optional double altitude = 10;
  inline bool has_altitude() const;
  inline void clear_altitude();
  static const int kAltitudeFieldNumber = 10;
  inline double altitude() const;
  inline void set_altitude(double value);

  // optional double roll = 11;
  inline bool has_roll() const;
  inline void clear_roll();
  static const int kRollFieldNumber = 11;
  inline double roll() const;
  inline void set_roll(double value);

  // optional double pitch = 12;
  inline bool has_pitch() const;
  inline void clear_pitch();
  static const int kPitchFieldNumber = 12;
  inline double pitch() const;
  inline void set_pitch(double value);

  // optional double yaw = 13;
  inline bool has_yaw() const;
  inline void clear_yaw();
  static const int kYawFieldNumber = 13;
  inline double yaw() const;
  inline void set_yaw(double value);

  // optional double roll_v = 14;
  inline bool has_roll_v() const;
  inline void clear_roll_v();
  static const int kRollVFieldNumber = 14;
  inline double roll_v() const;
  inline void set_roll_v(double value);

  // optional double pitch_v = 15;
  inline bool has_pitch_v() const;
  inline void clear_pitch_v();
  static const int kPitchVFieldNumber = 15;
  inline double pitch_v() const;
  inline void set_pitch_v(double value);

  // optional double yaw_v = 16;
  inline bool has_yaw_v() const;
  inline void clear_yaw_v();
  static const int kYawVFieldNumber = 16;
  inline double yaw_v() const;
  inline void set_yaw_v(double value);

  // optional double lateral_v = 17;
  inline bool has_lateral_v() const;
  inline void clear_lateral_v();
  static const int kLateralVFieldNumber = 17;
  inline double lateral_v() const;
  inline void set_lateral_v(double value);

  // optional double longitudinal_v = 18;
  inline bool has_longitudinal_v() const;
  inline void clear_longitudinal_v();
  static const int kLongitudinalVFieldNumber = 18;
  inline double longitudinal_v() const;
  inline void set_longitudinal_v(double value);

  // optional double vertical_v = 19;
  inline bool has_vertical_v() const;
  inline void clear_vertical_v();
  static const int kVerticalVFieldNumber = 19;
  inline double vertical_v() const;
  inline void set_vertical_v(double value);

  // optional double lateral_a = 20;
  inline bool has_lateral_a() const;
  inline void clear_lateral_a();
  static const int kLateralAFieldNumber = 20;
  inline double lateral_a() const;
  inline void set_lateral_a(double value);

  // optional double longitudinal_a = 21;
  inline bool has_longitudinal_a() const;
  inline void clear_longitudinal_a();
  static const int kLongitudinalAFieldNumber = 21;
  inline double longitudinal_a() const;
  inline void set_longitudinal_a(double value);

  // optional double vertical_a = 22;
  inline bool has_vertical_a() const;
  inline void clear_vertical_a();
  static const int kVerticalAFieldNumber = 22;
  inline double vertical_a() const;
  inline void set_vertical_a(double value);

  // @@protoc_insertion_point(class_scope:localization.Localization)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_frame();
  inline void clear_has_frame();
  inline void set_has_local_frame_seq();
  inline void clear_has_local_frame_seq();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_altitude();
  inline void clear_has_altitude();
  inline void set_has_roll();
  inline void clear_has_roll();
  inline void set_has_pitch();
  inline void clear_has_pitch();
  inline void set_has_yaw();
  inline void clear_has_yaw();
  inline void set_has_roll_v();
  inline void clear_has_roll_v();
  inline void set_has_pitch_v();
  inline void clear_has_pitch_v();
  inline void set_has_yaw_v();
  inline void clear_has_yaw_v();
  inline void set_has_lateral_v();
  inline void clear_has_lateral_v();
  inline void set_has_longitudinal_v();
  inline void clear_has_longitudinal_v();
  inline void set_has_vertical_v();
  inline void clear_has_vertical_v();
  inline void set_has_lateral_a();
  inline void clear_has_lateral_a();
  inline void set_has_longitudinal_a();
  inline void clear_has_longitudinal_a();
  inline void set_has_vertical_a();
  inline void clear_has_vertical_a();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::Header* header_;
  int mode_;
  int frame_;
  ::google::protobuf::RepeatedField< double > transform_;
  mutable int _transform_cached_byte_size_;
  ::geometry::Point* position_;
  double longitude_;
  double latitude_;
  double altitude_;
  double roll_;
  double pitch_;
  double yaw_;
  double roll_v_;
  double pitch_v_;
  double yaw_v_;
  double lateral_v_;
  double longitudinal_v_;
  double vertical_v_;
  double lateral_a_;
  double longitudinal_a_;
  double vertical_a_;
  ::google::protobuf::uint32 local_frame_seq_;
  friend void  protobuf_AddDesc_localization_2eproto();
  friend void protobuf_AssignDesc_localization_2eproto();
  friend void protobuf_ShutdownFile_localization_2eproto();

  void InitAsDefaultInstance();
  static Localization* default_instance_;
};
// ===================================================================


// ===================================================================

// Localization

// optional .common.Header header = 1;
inline bool Localization::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Localization::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Localization::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Localization::clear_header() {
  if (header_ != NULL) header_->::common::Header::Clear();
  clear_has_header();
}
inline const ::common::Header& Localization::header() const {
  // @@protoc_insertion_point(field_get:localization.Localization.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::common::Header* Localization::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::common::Header;
  // @@protoc_insertion_point(field_mutable:localization.Localization.header)
  return header_;
}
inline ::common::Header* Localization::release_header() {
  clear_has_header();
  ::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Localization::set_allocated_header(::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:localization.Localization.header)
}

// optional .localization.LocalizationMode mode = 2 [default = GNSS];
inline bool Localization::has_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Localization::set_has_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Localization::clear_has_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Localization::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::localization::LocalizationMode Localization::mode() const {
  // @@protoc_insertion_point(field_get:localization.Localization.mode)
  return static_cast< ::localization::LocalizationMode >(mode_);
}
inline void Localization::set_mode(::localization::LocalizationMode value) {
  assert(::localization::LocalizationMode_IsValid(value));
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:localization.Localization.mode)
}

// optional .localization.LocalizationFrame frame = 3 [default = LOCAL];
inline bool Localization::has_frame() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Localization::set_has_frame() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Localization::clear_has_frame() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Localization::clear_frame() {
  frame_ = 0;
  clear_has_frame();
}
inline ::localization::LocalizationFrame Localization::frame() const {
  // @@protoc_insertion_point(field_get:localization.Localization.frame)
  return static_cast< ::localization::LocalizationFrame >(frame_);
}
inline void Localization::set_frame(::localization::LocalizationFrame value) {
  assert(::localization::LocalizationFrame_IsValid(value));
  set_has_frame();
  frame_ = value;
  // @@protoc_insertion_point(field_set:localization.Localization.frame)
}

// optional uint32 local_frame_seq = 4;
inline bool Localization::has_local_frame_seq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Localization::set_has_local_frame_seq() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Localization::clear_has_local_frame_seq() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Localization::clear_local_frame_seq() {
  local_frame_seq_ = 0u;
  clear_has_local_frame_seq();
}
inline ::google::protobuf::uint32 Localization::local_frame_seq() const {
  // @@protoc_insertion_point(field_get:localization.Localization.local_frame_seq)
  return local_frame_seq_;
}
inline void Localization::set_local_frame_seq(::google::protobuf::uint32 value) {
  set_has_local_frame_seq();
  local_frame_seq_ = value;
  // @@protoc_insertion_point(field_set:localization.Localization.local_frame_seq)
}

// repeated double transform = 5 [packed = true];
inline int Localization::transform_size() const {
  return transform_.size();
}
inline void Localization::clear_transform() {
  transform_.Clear();
}
inline double Localization::transform(int index) const {
  // @@protoc_insertion_point(field_get:localization.Localization.transform)
  return transform_.Get(index);
}
inline void Localization::set_transform(int index, double value) {
  transform_.Set(index, value);
  // @@protoc_insertion_point(field_set:localization.Localization.transform)
}
inline void Localization::add_transform(double value) {
  transform_.Add(value);
  // @@protoc_insertion_point(field_add:localization.Localization.transform)
}
inline const ::google::protobuf::RepeatedField< double >&
Localization::transform() const {
  // @@protoc_insertion_point(field_list:localization.Localization.transform)
  return transform_;
}
inline ::google::protobuf::RepeatedField< double >*
Localization::mutable_transform() {
  // @@protoc_insertion_point(field_mutable_list:localization.Localization.transform)
  return &transform_;
}

// optional .geometry.Point position = 7;
inline bool Localization::has_position() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Localization::set_has_position() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Localization::clear_has_position() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Localization::clear_position() {
  if (position_ != NULL) position_->::geometry::Point::Clear();
  clear_has_position();
}
inline const ::geometry::Point& Localization::position() const {
  // @@protoc_insertion_point(field_get:localization.Localization.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::geometry::Point* Localization::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::geometry::Point;
  // @@protoc_insertion_point(field_mutable:localization.Localization.position)
  return position_;
}
inline ::geometry::Point* Localization::release_position() {
  clear_has_position();
  ::geometry::Point* temp = position_;
  position_ = NULL;
  return temp;
}
inline void Localization::set_allocated_position(::geometry::Point* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:localization.Localization.position)
}

// optional double longitude = 8;
inline bool Localization::has_longitude() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Localization::set_has_longitude() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Localization::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Localization::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double Localization::longitude() const {
  // @@protoc_insertion_point(field_get:localization.Localization.longitude)
  return longitude_;
}
inline void Localization::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:localization.Localization.longitude)
}

// optional double latitude = 9;
inline bool Localization::has_latitude() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Localization::set_has_latitude() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Localization::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Localization::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double Localization::latitude() const {
  // @@protoc_insertion_point(field_get:localization.Localization.latitude)
  return latitude_;
}
inline void Localization::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:localization.Localization.latitude)
}

// optional double altitude = 10;
inline bool Localization::has_altitude() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Localization::set_has_altitude() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Localization::clear_has_altitude() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Localization::clear_altitude() {
  altitude_ = 0;
  clear_has_altitude();
}
inline double Localization::altitude() const {
  // @@protoc_insertion_point(field_get:localization.Localization.altitude)
  return altitude_;
}
inline void Localization::set_altitude(double value) {
  set_has_altitude();
  altitude_ = value;
  // @@protoc_insertion_point(field_set:localization.Localization.altitude)
}

// optional double roll = 11;
inline bool Localization::has_roll() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Localization::set_has_roll() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Localization::clear_has_roll() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Localization::clear_roll() {
  roll_ = 0;
  clear_has_roll();
}
inline double Localization::roll() const {
  // @@protoc_insertion_point(field_get:localization.Localization.roll)
  return roll_;
}
inline void Localization::set_roll(double value) {
  set_has_roll();
  roll_ = value;
  // @@protoc_insertion_point(field_set:localization.Localization.roll)
}

// optional double pitch = 12;
inline bool Localization::has_pitch() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Localization::set_has_pitch() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Localization::clear_has_pitch() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Localization::clear_pitch() {
  pitch_ = 0;
  clear_has_pitch();
}
inline double Localization::pitch() const {
  // @@protoc_insertion_point(field_get:localization.Localization.pitch)
  return pitch_;
}
inline void Localization::set_pitch(double value) {
  set_has_pitch();
  pitch_ = value;
  // @@protoc_insertion_point(field_set:localization.Localization.pitch)
}

// optional double yaw = 13;
inline bool Localization::has_yaw() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Localization::set_has_yaw() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Localization::clear_has_yaw() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Localization::clear_yaw() {
  yaw_ = 0;
  clear_has_yaw();
}
inline double Localization::yaw() const {
  // @@protoc_insertion_point(field_get:localization.Localization.yaw)
  return yaw_;
}
inline void Localization::set_yaw(double value) {
  set_has_yaw();
  yaw_ = value;
  // @@protoc_insertion_point(field_set:localization.Localization.yaw)
}

// optional double roll_v = 14;
inline bool Localization::has_roll_v() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Localization::set_has_roll_v() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Localization::clear_has_roll_v() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Localization::clear_roll_v() {
  roll_v_ = 0;
  clear_has_roll_v();
}
inline double Localization::roll_v() const {
  // @@protoc_insertion_point(field_get:localization.Localization.roll_v)
  return roll_v_;
}
inline void Localization::set_roll_v(double value) {
  set_has_roll_v();
  roll_v_ = value;
  // @@protoc_insertion_point(field_set:localization.Localization.roll_v)
}

// optional double pitch_v = 15;
inline bool Localization::has_pitch_v() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Localization::set_has_pitch_v() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Localization::clear_has_pitch_v() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Localization::clear_pitch_v() {
  pitch_v_ = 0;
  clear_has_pitch_v();
}
inline double Localization::pitch_v() const {
  // @@protoc_insertion_point(field_get:localization.Localization.pitch_v)
  return pitch_v_;
}
inline void Localization::set_pitch_v(double value) {
  set_has_pitch_v();
  pitch_v_ = value;
  // @@protoc_insertion_point(field_set:localization.Localization.pitch_v)
}

// optional double yaw_v = 16;
inline bool Localization::has_yaw_v() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Localization::set_has_yaw_v() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Localization::clear_has_yaw_v() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Localization::clear_yaw_v() {
  yaw_v_ = 0;
  clear_has_yaw_v();
}
inline double Localization::yaw_v() const {
  // @@protoc_insertion_point(field_get:localization.Localization.yaw_v)
  return yaw_v_;
}
inline void Localization::set_yaw_v(double value) {
  set_has_yaw_v();
  yaw_v_ = value;
  // @@protoc_insertion_point(field_set:localization.Localization.yaw_v)
}

// optional double lateral_v = 17;
inline bool Localization::has_lateral_v() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Localization::set_has_lateral_v() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Localization::clear_has_lateral_v() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Localization::clear_lateral_v() {
  lateral_v_ = 0;
  clear_has_lateral_v();
}
inline double Localization::lateral_v() const {
  // @@protoc_insertion_point(field_get:localization.Localization.lateral_v)
  return lateral_v_;
}
inline void Localization::set_lateral_v(double value) {
  set_has_lateral_v();
  lateral_v_ = value;
  // @@protoc_insertion_point(field_set:localization.Localization.lateral_v)
}

// optional double longitudinal_v = 18;
inline bool Localization::has_longitudinal_v() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Localization::set_has_longitudinal_v() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Localization::clear_has_longitudinal_v() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Localization::clear_longitudinal_v() {
  longitudinal_v_ = 0;
  clear_has_longitudinal_v();
}
inline double Localization::longitudinal_v() const {
  // @@protoc_insertion_point(field_get:localization.Localization.longitudinal_v)
  return longitudinal_v_;
}
inline void Localization::set_longitudinal_v(double value) {
  set_has_longitudinal_v();
  longitudinal_v_ = value;
  // @@protoc_insertion_point(field_set:localization.Localization.longitudinal_v)
}

// optional double vertical_v = 19;
inline bool Localization::has_vertical_v() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Localization::set_has_vertical_v() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Localization::clear_has_vertical_v() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Localization::clear_vertical_v() {
  vertical_v_ = 0;
  clear_has_vertical_v();
}
inline double Localization::vertical_v() const {
  // @@protoc_insertion_point(field_get:localization.Localization.vertical_v)
  return vertical_v_;
}
inline void Localization::set_vertical_v(double value) {
  set_has_vertical_v();
  vertical_v_ = value;
  // @@protoc_insertion_point(field_set:localization.Localization.vertical_v)
}

// optional double lateral_a = 20;
inline bool Localization::has_lateral_a() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Localization::set_has_lateral_a() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Localization::clear_has_lateral_a() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Localization::clear_lateral_a() {
  lateral_a_ = 0;
  clear_has_lateral_a();
}
inline double Localization::lateral_a() const {
  // @@protoc_insertion_point(field_get:localization.Localization.lateral_a)
  return lateral_a_;
}
inline void Localization::set_lateral_a(double value) {
  set_has_lateral_a();
  lateral_a_ = value;
  // @@protoc_insertion_point(field_set:localization.Localization.lateral_a)
}

// optional double longitudinal_a = 21;
inline bool Localization::has_longitudinal_a() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Localization::set_has_longitudinal_a() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Localization::clear_has_longitudinal_a() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Localization::clear_longitudinal_a() {
  longitudinal_a_ = 0;
  clear_has_longitudinal_a();
}
inline double Localization::longitudinal_a() const {
  // @@protoc_insertion_point(field_get:localization.Localization.longitudinal_a)
  return longitudinal_a_;
}
inline void Localization::set_longitudinal_a(double value) {
  set_has_longitudinal_a();
  longitudinal_a_ = value;
  // @@protoc_insertion_point(field_set:localization.Localization.longitudinal_a)
}

// optional double vertical_a = 22;
inline bool Localization::has_vertical_a() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Localization::set_has_vertical_a() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Localization::clear_has_vertical_a() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Localization::clear_vertical_a() {
  vertical_a_ = 0;
  clear_has_vertical_a();
}
inline double Localization::vertical_a() const {
  // @@protoc_insertion_point(field_get:localization.Localization.vertical_a)
  return vertical_a_;
}
inline void Localization::set_vertical_a(double value) {
  set_has_vertical_a();
  vertical_a_ = value;
  // @@protoc_insertion_point(field_set:localization.Localization.vertical_a)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace localization

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::localization::LocalizationMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::localization::LocalizationMode>() {
  return ::localization::LocalizationMode_descriptor();
}
template <> struct is_proto_enum< ::localization::LocalizationFrame> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::localization::LocalizationFrame>() {
  return ::localization::LocalizationFrame_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_localization_2eproto__INCLUDED
