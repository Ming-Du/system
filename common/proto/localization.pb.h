// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: localization.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_localization_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_localization_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
#include "geometry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_localization_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_localization_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_localization_2eproto;
namespace localization {
class Localization;
class LocalizationDefaultTypeInternal;
extern LocalizationDefaultTypeInternal _Localization_default_instance_;
}  // namespace localization
PROTOBUF_NAMESPACE_OPEN
template<> ::localization::Localization* Arena::CreateMaybeMessage<::localization::Localization>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace localization {

enum LocalizationMode : int {
  GNSS = 0,
  LIDAR_BASED = 1
};
bool LocalizationMode_IsValid(int value);
constexpr LocalizationMode LocalizationMode_MIN = GNSS;
constexpr LocalizationMode LocalizationMode_MAX = LIDAR_BASED;
constexpr int LocalizationMode_ARRAYSIZE = LocalizationMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LocalizationMode_descriptor();
template<typename T>
inline const std::string& LocalizationMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LocalizationMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LocalizationMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LocalizationMode_descriptor(), enum_t_value);
}
inline bool LocalizationMode_Parse(
    const std::string& name, LocalizationMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LocalizationMode>(
    LocalizationMode_descriptor(), name, value);
}
enum LocalizationFrame : int {
  LOCAL = 0,
  WGS84 = 1
};
bool LocalizationFrame_IsValid(int value);
constexpr LocalizationFrame LocalizationFrame_MIN = LOCAL;
constexpr LocalizationFrame LocalizationFrame_MAX = WGS84;
constexpr int LocalizationFrame_ARRAYSIZE = LocalizationFrame_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LocalizationFrame_descriptor();
template<typename T>
inline const std::string& LocalizationFrame_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LocalizationFrame>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LocalizationFrame_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LocalizationFrame_descriptor(), enum_t_value);
}
inline bool LocalizationFrame_Parse(
    const std::string& name, LocalizationFrame* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LocalizationFrame>(
    LocalizationFrame_descriptor(), name, value);
}
// ===================================================================

class Localization :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:localization.Localization) */ {
 public:
  Localization();
  virtual ~Localization();

  Localization(const Localization& from);
  Localization(Localization&& from) noexcept
    : Localization() {
    *this = ::std::move(from);
  }

  inline Localization& operator=(const Localization& from) {
    CopyFrom(from);
    return *this;
  }
  inline Localization& operator=(Localization&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Localization& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Localization* internal_default_instance() {
    return reinterpret_cast<const Localization*>(
               &_Localization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Localization& a, Localization& b) {
    a.Swap(&b);
  }
  inline void Swap(Localization* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Localization* New() const final {
    return CreateMaybeMessage<Localization>(nullptr);
  }

  Localization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Localization>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Localization& from);
  void MergeFrom(const Localization& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Localization* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "localization.Localization";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_localization_2eproto);
    return ::descriptor_table_localization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransformFieldNumber = 5,
    kHeaderFieldNumber = 1,
    kPositionFieldNumber = 7,
    kModeFieldNumber = 2,
    kFrameFieldNumber = 3,
    kLongitudeFieldNumber = 8,
    kLatitudeFieldNumber = 9,
    kAltitudeFieldNumber = 10,
    kRollFieldNumber = 11,
    kPitchFieldNumber = 12,
    kYawFieldNumber = 13,
    kRollVFieldNumber = 14,
    kPitchVFieldNumber = 15,
    kYawVFieldNumber = 16,
    kLateralVFieldNumber = 17,
    kLongitudinalVFieldNumber = 18,
    kVerticalVFieldNumber = 19,
    kLateralAFieldNumber = 20,
    kLongitudinalAFieldNumber = 21,
    kVerticalAFieldNumber = 22,
    kLocalFrameSeqFieldNumber = 4,
  };
  // repeated double transform = 5 [packed = true];
  int transform_size() const;
  private:
  int _internal_transform_size() const;
  public:
  void clear_transform();
  private:
  double _internal_transform(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_transform() const;
  void _internal_add_transform(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_transform();
  public:
  double transform(int index) const;
  void set_transform(int index, double value);
  void add_transform(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      transform() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_transform();

  // optional .common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::common::Header& header() const;
  ::common::Header* release_header();
  ::common::Header* mutable_header();
  void set_allocated_header(::common::Header* header);
  private:
  const ::common::Header& _internal_header() const;
  ::common::Header* _internal_mutable_header();
  public:

  // optional .geometry.Point position = 7;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::geometry::Point& position() const;
  ::geometry::Point* release_position();
  ::geometry::Point* mutable_position();
  void set_allocated_position(::geometry::Point* position);
  private:
  const ::geometry::Point& _internal_position() const;
  ::geometry::Point* _internal_mutable_position();
  public:

  // optional .localization.LocalizationMode mode = 2 [default = GNSS];
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  ::localization::LocalizationMode mode() const;
  void set_mode(::localization::LocalizationMode value);
  private:
  ::localization::LocalizationMode _internal_mode() const;
  void _internal_set_mode(::localization::LocalizationMode value);
  public:

  // optional .localization.LocalizationFrame frame = 3 [default = LOCAL];
  bool has_frame() const;
  private:
  bool _internal_has_frame() const;
  public:
  void clear_frame();
  ::localization::LocalizationFrame frame() const;
  void set_frame(::localization::LocalizationFrame value);
  private:
  ::localization::LocalizationFrame _internal_frame() const;
  void _internal_set_frame(::localization::LocalizationFrame value);
  public:

  // optional double longitude = 8;
  bool has_longitude() const;
  private:
  bool _internal_has_longitude() const;
  public:
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // optional double latitude = 9;
  bool has_latitude() const;
  private:
  bool _internal_has_latitude() const;
  public:
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // optional double altitude = 10;
  bool has_altitude() const;
  private:
  bool _internal_has_altitude() const;
  public:
  void clear_altitude();
  double altitude() const;
  void set_altitude(double value);
  private:
  double _internal_altitude() const;
  void _internal_set_altitude(double value);
  public:

  // optional double roll = 11;
  bool has_roll() const;
  private:
  bool _internal_has_roll() const;
  public:
  void clear_roll();
  double roll() const;
  void set_roll(double value);
  private:
  double _internal_roll() const;
  void _internal_set_roll(double value);
  public:

  // optional double pitch = 12;
  bool has_pitch() const;
  private:
  bool _internal_has_pitch() const;
  public:
  void clear_pitch();
  double pitch() const;
  void set_pitch(double value);
  private:
  double _internal_pitch() const;
  void _internal_set_pitch(double value);
  public:

  // optional double yaw = 13;
  bool has_yaw() const;
  private:
  bool _internal_has_yaw() const;
  public:
  void clear_yaw();
  double yaw() const;
  void set_yaw(double value);
  private:
  double _internal_yaw() const;
  void _internal_set_yaw(double value);
  public:

  // optional double roll_v = 14;
  bool has_roll_v() const;
  private:
  bool _internal_has_roll_v() const;
  public:
  void clear_roll_v();
  double roll_v() const;
  void set_roll_v(double value);
  private:
  double _internal_roll_v() const;
  void _internal_set_roll_v(double value);
  public:

  // optional double pitch_v = 15;
  bool has_pitch_v() const;
  private:
  bool _internal_has_pitch_v() const;
  public:
  void clear_pitch_v();
  double pitch_v() const;
  void set_pitch_v(double value);
  private:
  double _internal_pitch_v() const;
  void _internal_set_pitch_v(double value);
  public:

  // optional double yaw_v = 16;
  bool has_yaw_v() const;
  private:
  bool _internal_has_yaw_v() const;
  public:
  void clear_yaw_v();
  double yaw_v() const;
  void set_yaw_v(double value);
  private:
  double _internal_yaw_v() const;
  void _internal_set_yaw_v(double value);
  public:

  // optional double lateral_v = 17;
  bool has_lateral_v() const;
  private:
  bool _internal_has_lateral_v() const;
  public:
  void clear_lateral_v();
  double lateral_v() const;
  void set_lateral_v(double value);
  private:
  double _internal_lateral_v() const;
  void _internal_set_lateral_v(double value);
  public:

  // optional double longitudinal_v = 18;
  bool has_longitudinal_v() const;
  private:
  bool _internal_has_longitudinal_v() const;
  public:
  void clear_longitudinal_v();
  double longitudinal_v() const;
  void set_longitudinal_v(double value);
  private:
  double _internal_longitudinal_v() const;
  void _internal_set_longitudinal_v(double value);
  public:

  // optional double vertical_v = 19;
  bool has_vertical_v() const;
  private:
  bool _internal_has_vertical_v() const;
  public:
  void clear_vertical_v();
  double vertical_v() const;
  void set_vertical_v(double value);
  private:
  double _internal_vertical_v() const;
  void _internal_set_vertical_v(double value);
  public:

  // optional double lateral_a = 20;
  bool has_lateral_a() const;
  private:
  bool _internal_has_lateral_a() const;
  public:
  void clear_lateral_a();
  double lateral_a() const;
  void set_lateral_a(double value);
  private:
  double _internal_lateral_a() const;
  void _internal_set_lateral_a(double value);
  public:

  // optional double longitudinal_a = 21;
  bool has_longitudinal_a() const;
  private:
  bool _internal_has_longitudinal_a() const;
  public:
  void clear_longitudinal_a();
  double longitudinal_a() const;
  void set_longitudinal_a(double value);
  private:
  double _internal_longitudinal_a() const;
  void _internal_set_longitudinal_a(double value);
  public:

  // optional double vertical_a = 22;
  bool has_vertical_a() const;
  private:
  bool _internal_has_vertical_a() const;
  public:
  void clear_vertical_a();
  double vertical_a() const;
  void set_vertical_a(double value);
  private:
  double _internal_vertical_a() const;
  void _internal_set_vertical_a(double value);
  public:

  // optional uint32 local_frame_seq = 4;
  bool has_local_frame_seq() const;
  private:
  bool _internal_has_local_frame_seq() const;
  public:
  void clear_local_frame_seq();
  ::PROTOBUF_NAMESPACE_ID::uint32 local_frame_seq() const;
  void set_local_frame_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_local_frame_seq() const;
  void _internal_set_local_frame_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:localization.Localization)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > transform_;
  mutable std::atomic<int> _transform_cached_byte_size_;
  ::common::Header* header_;
  ::geometry::Point* position_;
  int mode_;
  int frame_;
  double longitude_;
  double latitude_;
  double altitude_;
  double roll_;
  double pitch_;
  double yaw_;
  double roll_v_;
  double pitch_v_;
  double yaw_v_;
  double lateral_v_;
  double longitudinal_v_;
  double vertical_v_;
  double lateral_a_;
  double longitudinal_a_;
  double vertical_a_;
  ::PROTOBUF_NAMESPACE_ID::uint32 local_frame_seq_;
  friend struct ::TableStruct_localization_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Localization

// optional .common.Header header = 1;
inline bool Localization::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool Localization::has_header() const {
  return _internal_has_header();
}
inline const ::common::Header& Localization::_internal_header() const {
  const ::common::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::Header*>(
      &::common::_Header_default_instance_);
}
inline const ::common::Header& Localization::header() const {
  // @@protoc_insertion_point(field_get:localization.Localization.header)
  return _internal_header();
}
inline ::common::Header* Localization::release_header() {
  // @@protoc_insertion_point(field_release:localization.Localization.header)
  _has_bits_[0] &= ~0x00000001u;
  ::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::Header* Localization::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::common::Header* Localization::mutable_header() {
  // @@protoc_insertion_point(field_mutable:localization.Localization.header)
  return _internal_mutable_header();
}
inline void Localization::set_allocated_header(::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:localization.Localization.header)
}

// optional .localization.LocalizationMode mode = 2 [default = GNSS];
inline bool Localization::_internal_has_mode() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Localization::has_mode() const {
  return _internal_has_mode();
}
inline void Localization::clear_mode() {
  mode_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::localization::LocalizationMode Localization::_internal_mode() const {
  return static_cast< ::localization::LocalizationMode >(mode_);
}
inline ::localization::LocalizationMode Localization::mode() const {
  // @@protoc_insertion_point(field_get:localization.Localization.mode)
  return _internal_mode();
}
inline void Localization::_internal_set_mode(::localization::LocalizationMode value) {
  assert(::localization::LocalizationMode_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  mode_ = value;
}
inline void Localization::set_mode(::localization::LocalizationMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:localization.Localization.mode)
}

// optional .localization.LocalizationFrame frame = 3 [default = LOCAL];
inline bool Localization::_internal_has_frame() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Localization::has_frame() const {
  return _internal_has_frame();
}
inline void Localization::clear_frame() {
  frame_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::localization::LocalizationFrame Localization::_internal_frame() const {
  return static_cast< ::localization::LocalizationFrame >(frame_);
}
inline ::localization::LocalizationFrame Localization::frame() const {
  // @@protoc_insertion_point(field_get:localization.Localization.frame)
  return _internal_frame();
}
inline void Localization::_internal_set_frame(::localization::LocalizationFrame value) {
  assert(::localization::LocalizationFrame_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  frame_ = value;
}
inline void Localization::set_frame(::localization::LocalizationFrame value) {
  _internal_set_frame(value);
  // @@protoc_insertion_point(field_set:localization.Localization.frame)
}

// optional uint32 local_frame_seq = 4;
inline bool Localization::_internal_has_local_frame_seq() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool Localization::has_local_frame_seq() const {
  return _internal_has_local_frame_seq();
}
inline void Localization::clear_local_frame_seq() {
  local_frame_seq_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Localization::_internal_local_frame_seq() const {
  return local_frame_seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Localization::local_frame_seq() const {
  // @@protoc_insertion_point(field_get:localization.Localization.local_frame_seq)
  return _internal_local_frame_seq();
}
inline void Localization::_internal_set_local_frame_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  local_frame_seq_ = value;
}
inline void Localization::set_local_frame_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_local_frame_seq(value);
  // @@protoc_insertion_point(field_set:localization.Localization.local_frame_seq)
}

// repeated double transform = 5 [packed = true];
inline int Localization::_internal_transform_size() const {
  return transform_.size();
}
inline int Localization::transform_size() const {
  return _internal_transform_size();
}
inline void Localization::clear_transform() {
  transform_.Clear();
}
inline double Localization::_internal_transform(int index) const {
  return transform_.Get(index);
}
inline double Localization::transform(int index) const {
  // @@protoc_insertion_point(field_get:localization.Localization.transform)
  return _internal_transform(index);
}
inline void Localization::set_transform(int index, double value) {
  transform_.Set(index, value);
  // @@protoc_insertion_point(field_set:localization.Localization.transform)
}
inline void Localization::_internal_add_transform(double value) {
  transform_.Add(value);
}
inline void Localization::add_transform(double value) {
  _internal_add_transform(value);
  // @@protoc_insertion_point(field_add:localization.Localization.transform)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Localization::_internal_transform() const {
  return transform_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Localization::transform() const {
  // @@protoc_insertion_point(field_list:localization.Localization.transform)
  return _internal_transform();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Localization::_internal_mutable_transform() {
  return &transform_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Localization::mutable_transform() {
  // @@protoc_insertion_point(field_mutable_list:localization.Localization.transform)
  return _internal_mutable_transform();
}

// optional .geometry.Point position = 7;
inline bool Localization::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || position_ != nullptr);
  return value;
}
inline bool Localization::has_position() const {
  return _internal_has_position();
}
inline const ::geometry::Point& Localization::_internal_position() const {
  const ::geometry::Point* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::geometry::Point*>(
      &::geometry::_Point_default_instance_);
}
inline const ::geometry::Point& Localization::position() const {
  // @@protoc_insertion_point(field_get:localization.Localization.position)
  return _internal_position();
}
inline ::geometry::Point* Localization::release_position() {
  // @@protoc_insertion_point(field_release:localization.Localization.position)
  _has_bits_[0] &= ~0x00000002u;
  ::geometry::Point* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::geometry::Point* Localization::_internal_mutable_position() {
  _has_bits_[0] |= 0x00000002u;
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::geometry::Point>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::geometry::Point* Localization::mutable_position() {
  // @@protoc_insertion_point(field_mutable:localization.Localization.position)
  return _internal_mutable_position();
}
inline void Localization::set_allocated_position(::geometry::Point* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:localization.Localization.position)
}

// optional double longitude = 8;
inline bool Localization::_internal_has_longitude() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Localization::has_longitude() const {
  return _internal_has_longitude();
}
inline void Localization::clear_longitude() {
  longitude_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Localization::_internal_longitude() const {
  return longitude_;
}
inline double Localization::longitude() const {
  // @@protoc_insertion_point(field_get:localization.Localization.longitude)
  return _internal_longitude();
}
inline void Localization::_internal_set_longitude(double value) {
  _has_bits_[0] |= 0x00000010u;
  longitude_ = value;
}
inline void Localization::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:localization.Localization.longitude)
}

// optional double latitude = 9;
inline bool Localization::_internal_has_latitude() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Localization::has_latitude() const {
  return _internal_has_latitude();
}
inline void Localization::clear_latitude() {
  latitude_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double Localization::_internal_latitude() const {
  return latitude_;
}
inline double Localization::latitude() const {
  // @@protoc_insertion_point(field_get:localization.Localization.latitude)
  return _internal_latitude();
}
inline void Localization::_internal_set_latitude(double value) {
  _has_bits_[0] |= 0x00000020u;
  latitude_ = value;
}
inline void Localization::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:localization.Localization.latitude)
}

// optional double altitude = 10;
inline bool Localization::_internal_has_altitude() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Localization::has_altitude() const {
  return _internal_has_altitude();
}
inline void Localization::clear_altitude() {
  altitude_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double Localization::_internal_altitude() const {
  return altitude_;
}
inline double Localization::altitude() const {
  // @@protoc_insertion_point(field_get:localization.Localization.altitude)
  return _internal_altitude();
}
inline void Localization::_internal_set_altitude(double value) {
  _has_bits_[0] |= 0x00000040u;
  altitude_ = value;
}
inline void Localization::set_altitude(double value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:localization.Localization.altitude)
}

// optional double roll = 11;
inline bool Localization::_internal_has_roll() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Localization::has_roll() const {
  return _internal_has_roll();
}
inline void Localization::clear_roll() {
  roll_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double Localization::_internal_roll() const {
  return roll_;
}
inline double Localization::roll() const {
  // @@protoc_insertion_point(field_get:localization.Localization.roll)
  return _internal_roll();
}
inline void Localization::_internal_set_roll(double value) {
  _has_bits_[0] |= 0x00000080u;
  roll_ = value;
}
inline void Localization::set_roll(double value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:localization.Localization.roll)
}

// optional double pitch = 12;
inline bool Localization::_internal_has_pitch() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Localization::has_pitch() const {
  return _internal_has_pitch();
}
inline void Localization::clear_pitch() {
  pitch_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double Localization::_internal_pitch() const {
  return pitch_;
}
inline double Localization::pitch() const {
  // @@protoc_insertion_point(field_get:localization.Localization.pitch)
  return _internal_pitch();
}
inline void Localization::_internal_set_pitch(double value) {
  _has_bits_[0] |= 0x00000100u;
  pitch_ = value;
}
inline void Localization::set_pitch(double value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:localization.Localization.pitch)
}

// optional double yaw = 13;
inline bool Localization::_internal_has_yaw() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Localization::has_yaw() const {
  return _internal_has_yaw();
}
inline void Localization::clear_yaw() {
  yaw_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double Localization::_internal_yaw() const {
  return yaw_;
}
inline double Localization::yaw() const {
  // @@protoc_insertion_point(field_get:localization.Localization.yaw)
  return _internal_yaw();
}
inline void Localization::_internal_set_yaw(double value) {
  _has_bits_[0] |= 0x00000200u;
  yaw_ = value;
}
inline void Localization::set_yaw(double value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:localization.Localization.yaw)
}

// optional double roll_v = 14;
inline bool Localization::_internal_has_roll_v() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Localization::has_roll_v() const {
  return _internal_has_roll_v();
}
inline void Localization::clear_roll_v() {
  roll_v_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double Localization::_internal_roll_v() const {
  return roll_v_;
}
inline double Localization::roll_v() const {
  // @@protoc_insertion_point(field_get:localization.Localization.roll_v)
  return _internal_roll_v();
}
inline void Localization::_internal_set_roll_v(double value) {
  _has_bits_[0] |= 0x00000400u;
  roll_v_ = value;
}
inline void Localization::set_roll_v(double value) {
  _internal_set_roll_v(value);
  // @@protoc_insertion_point(field_set:localization.Localization.roll_v)
}

// optional double pitch_v = 15;
inline bool Localization::_internal_has_pitch_v() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Localization::has_pitch_v() const {
  return _internal_has_pitch_v();
}
inline void Localization::clear_pitch_v() {
  pitch_v_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double Localization::_internal_pitch_v() const {
  return pitch_v_;
}
inline double Localization::pitch_v() const {
  // @@protoc_insertion_point(field_get:localization.Localization.pitch_v)
  return _internal_pitch_v();
}
inline void Localization::_internal_set_pitch_v(double value) {
  _has_bits_[0] |= 0x00000800u;
  pitch_v_ = value;
}
inline void Localization::set_pitch_v(double value) {
  _internal_set_pitch_v(value);
  // @@protoc_insertion_point(field_set:localization.Localization.pitch_v)
}

// optional double yaw_v = 16;
inline bool Localization::_internal_has_yaw_v() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Localization::has_yaw_v() const {
  return _internal_has_yaw_v();
}
inline void Localization::clear_yaw_v() {
  yaw_v_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double Localization::_internal_yaw_v() const {
  return yaw_v_;
}
inline double Localization::yaw_v() const {
  // @@protoc_insertion_point(field_get:localization.Localization.yaw_v)
  return _internal_yaw_v();
}
inline void Localization::_internal_set_yaw_v(double value) {
  _has_bits_[0] |= 0x00001000u;
  yaw_v_ = value;
}
inline void Localization::set_yaw_v(double value) {
  _internal_set_yaw_v(value);
  // @@protoc_insertion_point(field_set:localization.Localization.yaw_v)
}

// optional double lateral_v = 17;
inline bool Localization::_internal_has_lateral_v() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Localization::has_lateral_v() const {
  return _internal_has_lateral_v();
}
inline void Localization::clear_lateral_v() {
  lateral_v_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline double Localization::_internal_lateral_v() const {
  return lateral_v_;
}
inline double Localization::lateral_v() const {
  // @@protoc_insertion_point(field_get:localization.Localization.lateral_v)
  return _internal_lateral_v();
}
inline void Localization::_internal_set_lateral_v(double value) {
  _has_bits_[0] |= 0x00002000u;
  lateral_v_ = value;
}
inline void Localization::set_lateral_v(double value) {
  _internal_set_lateral_v(value);
  // @@protoc_insertion_point(field_set:localization.Localization.lateral_v)
}

// optional double longitudinal_v = 18;
inline bool Localization::_internal_has_longitudinal_v() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Localization::has_longitudinal_v() const {
  return _internal_has_longitudinal_v();
}
inline void Localization::clear_longitudinal_v() {
  longitudinal_v_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline double Localization::_internal_longitudinal_v() const {
  return longitudinal_v_;
}
inline double Localization::longitudinal_v() const {
  // @@protoc_insertion_point(field_get:localization.Localization.longitudinal_v)
  return _internal_longitudinal_v();
}
inline void Localization::_internal_set_longitudinal_v(double value) {
  _has_bits_[0] |= 0x00004000u;
  longitudinal_v_ = value;
}
inline void Localization::set_longitudinal_v(double value) {
  _internal_set_longitudinal_v(value);
  // @@protoc_insertion_point(field_set:localization.Localization.longitudinal_v)
}

// optional double vertical_v = 19;
inline bool Localization::_internal_has_vertical_v() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool Localization::has_vertical_v() const {
  return _internal_has_vertical_v();
}
inline void Localization::clear_vertical_v() {
  vertical_v_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline double Localization::_internal_vertical_v() const {
  return vertical_v_;
}
inline double Localization::vertical_v() const {
  // @@protoc_insertion_point(field_get:localization.Localization.vertical_v)
  return _internal_vertical_v();
}
inline void Localization::_internal_set_vertical_v(double value) {
  _has_bits_[0] |= 0x00008000u;
  vertical_v_ = value;
}
inline void Localization::set_vertical_v(double value) {
  _internal_set_vertical_v(value);
  // @@protoc_insertion_point(field_set:localization.Localization.vertical_v)
}

// optional double lateral_a = 20;
inline bool Localization::_internal_has_lateral_a() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool Localization::has_lateral_a() const {
  return _internal_has_lateral_a();
}
inline void Localization::clear_lateral_a() {
  lateral_a_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline double Localization::_internal_lateral_a() const {
  return lateral_a_;
}
inline double Localization::lateral_a() const {
  // @@protoc_insertion_point(field_get:localization.Localization.lateral_a)
  return _internal_lateral_a();
}
inline void Localization::_internal_set_lateral_a(double value) {
  _has_bits_[0] |= 0x00010000u;
  lateral_a_ = value;
}
inline void Localization::set_lateral_a(double value) {
  _internal_set_lateral_a(value);
  // @@protoc_insertion_point(field_set:localization.Localization.lateral_a)
}

// optional double longitudinal_a = 21;
inline bool Localization::_internal_has_longitudinal_a() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool Localization::has_longitudinal_a() const {
  return _internal_has_longitudinal_a();
}
inline void Localization::clear_longitudinal_a() {
  longitudinal_a_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline double Localization::_internal_longitudinal_a() const {
  return longitudinal_a_;
}
inline double Localization::longitudinal_a() const {
  // @@protoc_insertion_point(field_get:localization.Localization.longitudinal_a)
  return _internal_longitudinal_a();
}
inline void Localization::_internal_set_longitudinal_a(double value) {
  _has_bits_[0] |= 0x00020000u;
  longitudinal_a_ = value;
}
inline void Localization::set_longitudinal_a(double value) {
  _internal_set_longitudinal_a(value);
  // @@protoc_insertion_point(field_set:localization.Localization.longitudinal_a)
}

// optional double vertical_a = 22;
inline bool Localization::_internal_has_vertical_a() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool Localization::has_vertical_a() const {
  return _internal_has_vertical_a();
}
inline void Localization::clear_vertical_a() {
  vertical_a_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline double Localization::_internal_vertical_a() const {
  return vertical_a_;
}
inline double Localization::vertical_a() const {
  // @@protoc_insertion_point(field_get:localization.Localization.vertical_a)
  return _internal_vertical_a();
}
inline void Localization::_internal_set_vertical_a(double value) {
  _has_bits_[0] |= 0x00040000u;
  vertical_a_ = value;
}
inline void Localization::set_vertical_a(double value) {
  _internal_set_vertical_a(value);
  // @@protoc_insertion_point(field_set:localization.Localization.vertical_a)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace localization

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::localization::LocalizationMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::localization::LocalizationMode>() {
  return ::localization::LocalizationMode_descriptor();
}
template <> struct is_proto_enum< ::localization::LocalizationFrame> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::localization::LocalizationFrame>() {
  return ::localization::LocalizationFrame_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_localization_2eproto
