// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle_state.proto

#include "vehicle_state.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_header_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_header_2eproto;
namespace chassis {
class VehicleStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleState> _instance;
} _VehicleState_default_instance_;
}  // namespace chassis
static void InitDefaultsscc_info_VehicleState_vehicle_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chassis::_VehicleState_default_instance_;
    new (ptr) ::chassis::VehicleState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chassis::VehicleState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VehicleState_vehicle_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VehicleState_vehicle_5fstate_2eproto}, {
      &scc_info_Header_header_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vehicle_5fstate_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_vehicle_5fstate_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vehicle_5fstate_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vehicle_5fstate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::chassis::VehicleState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chassis::VehicleState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chassis::VehicleState, header_),
  PROTOBUF_FIELD_OFFSET(::chassis::VehicleState, pilot_mode_),
  PROTOBUF_FIELD_OFFSET(::chassis::VehicleState, steering_),
  PROTOBUF_FIELD_OFFSET(::chassis::VehicleState, speed_),
  PROTOBUF_FIELD_OFFSET(::chassis::VehicleState, accel_),
  PROTOBUF_FIELD_OFFSET(::chassis::VehicleState, throttle_),
  PROTOBUF_FIELD_OFFSET(::chassis::VehicleState, brake_),
  PROTOBUF_FIELD_OFFSET(::chassis::VehicleState, gear_),
  PROTOBUF_FIELD_OFFSET(::chassis::VehicleState, light_),
  PROTOBUF_FIELD_OFFSET(::chassis::VehicleState, horn_),
  PROTOBUF_FIELD_OFFSET(::chassis::VehicleState, highbeam_),
  PROTOBUF_FIELD_OFFSET(::chassis::VehicleState, lowbeam_),
  PROTOBUF_FIELD_OFFSET(::chassis::VehicleState, foglight_),
  PROTOBUF_FIELD_OFFSET(::chassis::VehicleState, clearance_lamps_),
  PROTOBUF_FIELD_OFFSET(::chassis::VehicleState, warn_light_),
  PROTOBUF_FIELD_OFFSET(::chassis::VehicleState, parking_brake_),
  PROTOBUF_FIELD_OFFSET(::chassis::VehicleState, longitude_driving_mode_),
  PROTOBUF_FIELD_OFFSET(::chassis::VehicleState, eps_steering_mode_),
  PROTOBUF_FIELD_OFFSET(::chassis::VehicleState, steering_sign_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  17,
  18,
  16,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 24, sizeof(::chassis::VehicleState)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chassis::_VehicleState_default_instance_),
};

const char descriptor_table_protodef_vehicle_5fstate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023vehicle_state.proto\022\007chassis\032\014header.p"
  "roto\032\rchassis.proto\"\347\004\n\014VehicleState\022\036\n\006"
  "header\030\001 \001(\0132\016.common.Header\0223\n\npilot_mo"
  "de\030\002 \001(\0162\022.chassis.PilotMode:\013MODE_MANUA"
  "L\022\023\n\010steering\030\003 \001(\002:\0010\022\020\n\005speed\030\004 \001(\002:\0010"
  "\022\020\n\005accel\030\005 \001(\002:\0010\022\023\n\010throttle\030\006 \001(\002:\0010\022"
  "\020\n\005brake\030\007 \001(\002:\0010\022.\n\004gear\030\010 \001(\0162\025.chassi"
  "s.GearPosition:\tGEAR_NONE\022/\n\005light\030\t \001(\016"
  "2\024.chassis.LightSwitch:\nLIGHT_NONE\022\023\n\004ho"
  "rn\030\n \001(\010:\005false\022\027\n\010highbeam\030\013 \001(\010:\005false"
  "\022\026\n\007lowbeam\030\014 \001(\010:\005false\022\027\n\010foglight\030\r \001"
  "(\010:\005false\022\036\n\017clearance_lamps\030\016 \001(\010:\005fals"
  "e\022\031\n\nwarn_light\030\017 \001(\010:\005false\022\034\n\rparking_"
  "brake\030\020 \001(\010:\005false\022=\n\026longitude_driving_"
  "mode\030\024 \001(\0162\035.chassis.LongitudeDrivingMod"
  "e\0223\n\021eps_steering_mode\030\025 \001(\0162\030.chassis.E"
  "PSSteeringMode\022\025\n\rsteering_sign\030\026 \001(\r"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_vehicle_5fstate_2eproto_deps[2] = {
  &::descriptor_table_chassis_2eproto,
  &::descriptor_table_header_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_vehicle_5fstate_2eproto_sccs[1] = {
  &scc_info_VehicleState_vehicle_5fstate_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vehicle_5fstate_2eproto_once;
static bool descriptor_table_vehicle_5fstate_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vehicle_5fstate_2eproto = {
  &descriptor_table_vehicle_5fstate_2eproto_initialized, descriptor_table_protodef_vehicle_5fstate_2eproto, "vehicle_state.proto", 677,
  &descriptor_table_vehicle_5fstate_2eproto_once, descriptor_table_vehicle_5fstate_2eproto_sccs, descriptor_table_vehicle_5fstate_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_vehicle_5fstate_2eproto::offsets,
  file_level_metadata_vehicle_5fstate_2eproto, 1, file_level_enum_descriptors_vehicle_5fstate_2eproto, file_level_service_descriptors_vehicle_5fstate_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_vehicle_5fstate_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_vehicle_5fstate_2eproto), true);
namespace chassis {

// ===================================================================

void VehicleState::InitAsDefaultInstance() {
  ::chassis::_VehicleState_default_instance_._instance.get_mutable()->header_ = const_cast< ::common::Header*>(
      ::common::Header::internal_default_instance());
}
class VehicleState::_Internal {
 public:
  using HasBits = decltype(std::declval<VehicleState>()._has_bits_);
  static const ::common::Header& header(const VehicleState* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pilot_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steering(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_accel(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_throttle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_brake(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_gear(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_light(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_horn(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_highbeam(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_lowbeam(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_foglight(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_clearance_lamps(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_warn_light(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_parking_brake(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_longitude_driving_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_eps_steering_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_steering_sign(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

const ::common::Header&
VehicleState::_Internal::header(const VehicleState* msg) {
  return *msg->header_;
}
void VehicleState::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
VehicleState::VehicleState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chassis.VehicleState)
}
VehicleState::VehicleState(const VehicleState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&pilot_mode_, &from.pilot_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&eps_steering_mode_) -
    reinterpret_cast<char*>(&pilot_mode_)) + sizeof(eps_steering_mode_));
  // @@protoc_insertion_point(copy_constructor:chassis.VehicleState)
}

void VehicleState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VehicleState_vehicle_5fstate_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&eps_steering_mode_) -
      reinterpret_cast<char*>(&header_)) + sizeof(eps_steering_mode_));
}

VehicleState::~VehicleState() {
  // @@protoc_insertion_point(destructor:chassis.VehicleState)
  SharedDtor();
}

void VehicleState::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void VehicleState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleState& VehicleState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleState_vehicle_5fstate_2eproto.base);
  return *internal_default_instance();
}


void VehicleState::Clear() {
// @@protoc_insertion_point(message_clear_start:chassis.VehicleState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&pilot_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gear_) -
        reinterpret_cast<char*>(&pilot_mode_)) + sizeof(gear_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&light_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&parking_brake_) -
        reinterpret_cast<char*>(&light_)) + sizeof(parking_brake_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&steering_sign_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&eps_steering_mode_) -
        reinterpret_cast<char*>(&steering_sign_)) + sizeof(eps_steering_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* VehicleState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .chassis.PilotMode pilot_mode = 2 [default = MODE_MANUAL];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::chassis::PilotMode_IsValid(val))) {
            _internal_set_pilot_mode(static_cast<::chassis::PilotMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float steering = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_steering(&has_bits);
          steering_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float speed = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_speed(&has_bits);
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float accel = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_accel(&has_bits);
          accel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float throttle = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_throttle(&has_bits);
          throttle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float brake = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_brake(&has_bits);
          brake_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .chassis.GearPosition gear = 8 [default = GEAR_NONE];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::chassis::GearPosition_IsValid(val))) {
            _internal_set_gear(static_cast<::chassis::GearPosition>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .chassis.LightSwitch light = 9 [default = LIGHT_NONE];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::chassis::LightSwitch_IsValid(val))) {
            _internal_set_light(static_cast<::chassis::LightSwitch>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool horn = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_horn(&has_bits);
          horn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool highbeam = 11 [default = false];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_highbeam(&has_bits);
          highbeam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool lowbeam = 12 [default = false];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_lowbeam(&has_bits);
          lowbeam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool foglight = 13 [default = false];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_foglight(&has_bits);
          foglight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool clearance_lamps = 14 [default = false];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_clearance_lamps(&has_bits);
          clearance_lamps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool warn_light = 15 [default = false];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_warn_light(&has_bits);
          warn_light_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool parking_brake = 16 [default = false];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_parking_brake(&has_bits);
          parking_brake_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .chassis.LongitudeDrivingMode longitude_driving_mode = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::chassis::LongitudeDrivingMode_IsValid(val))) {
            _internal_set_longitude_driving_mode(static_cast<::chassis::LongitudeDrivingMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(20, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .chassis.EPSSteeringMode eps_steering_mode = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::chassis::EPSSteeringMode_IsValid(val))) {
            _internal_set_eps_steering_mode(static_cast<::chassis::EPSSteeringMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(21, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 steering_sign = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_steering_sign(&has_bits);
          steering_sign_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chassis.VehicleState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional .chassis.PilotMode pilot_mode = 2 [default = MODE_MANUAL];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_pilot_mode(), target);
  }

  // optional float steering = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_steering(), target);
  }

  // optional float speed = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_speed(), target);
  }

  // optional float accel = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_accel(), target);
  }

  // optional float throttle = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_throttle(), target);
  }

  // optional float brake = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_brake(), target);
  }

  // optional .chassis.GearPosition gear = 8 [default = GEAR_NONE];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_gear(), target);
  }

  // optional .chassis.LightSwitch light = 9 [default = LIGHT_NONE];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_light(), target);
  }

  // optional bool horn = 10 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_horn(), target);
  }

  // optional bool highbeam = 11 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_highbeam(), target);
  }

  // optional bool lowbeam = 12 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_lowbeam(), target);
  }

  // optional bool foglight = 13 [default = false];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_foglight(), target);
  }

  // optional bool clearance_lamps = 14 [default = false];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_clearance_lamps(), target);
  }

  // optional bool warn_light = 15 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_warn_light(), target);
  }

  // optional bool parking_brake = 16 [default = false];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_parking_brake(), target);
  }

  // optional .chassis.LongitudeDrivingMode longitude_driving_mode = 20;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      20, this->_internal_longitude_driving_mode(), target);
  }

  // optional .chassis.EPSSteeringMode eps_steering_mode = 21;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->_internal_eps_steering_mode(), target);
  }

  // optional uint32 steering_sign = 22;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_steering_sign(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chassis.VehicleState)
  return target;
}

size_t VehicleState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chassis.VehicleState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .chassis.PilotMode pilot_mode = 2 [default = MODE_MANUAL];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pilot_mode());
    }

    // optional float steering = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float speed = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float accel = 5 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float throttle = 6 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float brake = 7 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional .chassis.GearPosition gear = 8 [default = GEAR_NONE];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gear());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .chassis.LightSwitch light = 9 [default = LIGHT_NONE];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_light());
    }

    // optional bool horn = 10 [default = false];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool highbeam = 11 [default = false];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool lowbeam = 12 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool foglight = 13 [default = false];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool clearance_lamps = 14 [default = false];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool warn_light = 15 [default = false];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool parking_brake = 16 [default = false];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional uint32 steering_sign = 22;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_steering_sign());
    }

    // optional .chassis.LongitudeDrivingMode longitude_driving_mode = 20;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_longitude_driving_mode());
    }

    // optional .chassis.EPSSteeringMode eps_steering_mode = 21;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_eps_steering_mode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chassis.VehicleState)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chassis.VehicleState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chassis.VehicleState)
    MergeFrom(*source);
  }
}

void VehicleState::MergeFrom(const VehicleState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chassis.VehicleState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      pilot_mode_ = from.pilot_mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      steering_ = from.steering_;
    }
    if (cached_has_bits & 0x00000008u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000010u) {
      accel_ = from.accel_;
    }
    if (cached_has_bits & 0x00000020u) {
      throttle_ = from.throttle_;
    }
    if (cached_has_bits & 0x00000040u) {
      brake_ = from.brake_;
    }
    if (cached_has_bits & 0x00000080u) {
      gear_ = from.gear_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      light_ = from.light_;
    }
    if (cached_has_bits & 0x00000200u) {
      horn_ = from.horn_;
    }
    if (cached_has_bits & 0x00000400u) {
      highbeam_ = from.highbeam_;
    }
    if (cached_has_bits & 0x00000800u) {
      lowbeam_ = from.lowbeam_;
    }
    if (cached_has_bits & 0x00001000u) {
      foglight_ = from.foglight_;
    }
    if (cached_has_bits & 0x00002000u) {
      clearance_lamps_ = from.clearance_lamps_;
    }
    if (cached_has_bits & 0x00004000u) {
      warn_light_ = from.warn_light_;
    }
    if (cached_has_bits & 0x00008000u) {
      parking_brake_ = from.parking_brake_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      steering_sign_ = from.steering_sign_;
    }
    if (cached_has_bits & 0x00020000u) {
      longitude_driving_mode_ = from.longitude_driving_mode_;
    }
    if (cached_has_bits & 0x00040000u) {
      eps_steering_mode_ = from.eps_steering_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VehicleState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chassis.VehicleState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleState::CopyFrom(const VehicleState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chassis.VehicleState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleState::IsInitialized() const {
  return true;
}

void VehicleState::InternalSwap(VehicleState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(header_, other->header_);
  swap(pilot_mode_, other->pilot_mode_);
  swap(steering_, other->steering_);
  swap(speed_, other->speed_);
  swap(accel_, other->accel_);
  swap(throttle_, other->throttle_);
  swap(brake_, other->brake_);
  swap(gear_, other->gear_);
  swap(light_, other->light_);
  swap(horn_, other->horn_);
  swap(highbeam_, other->highbeam_);
  swap(lowbeam_, other->lowbeam_);
  swap(foglight_, other->foglight_);
  swap(clearance_lamps_, other->clearance_lamps_);
  swap(warn_light_, other->warn_light_);
  swap(parking_brake_, other->parking_brake_);
  swap(steering_sign_, other->steering_sign_);
  swap(longitude_driving_mode_, other->longitude_driving_mode_);
  swap(eps_steering_mode_, other->eps_steering_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleState::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace chassis
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::chassis::VehicleState* Arena::CreateMaybeMessage< ::chassis::VehicleState >(Arena* arena) {
  return Arena::CreateInternal< ::chassis::VehicleState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
