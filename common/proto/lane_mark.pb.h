// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lane_mark.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lane_5fmark_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lane_5fmark_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lane_5fmark_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lane_5fmark_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lane_5fmark_2eproto;
namespace perception {
class LaneCenter;
class LaneCenterDefaultTypeInternal;
extern LaneCenterDefaultTypeInternal _LaneCenter_default_instance_;
class LaneMark;
class LaneMarkDefaultTypeInternal;
extern LaneMarkDefaultTypeInternal _LaneMark_default_instance_;
class LaneMarks;
class LaneMarksDefaultTypeInternal;
extern LaneMarksDefaultTypeInternal _LaneMarks_default_instance_;
class Point2D;
class Point2DDefaultTypeInternal;
extern Point2DDefaultTypeInternal _Point2D_default_instance_;
}  // namespace perception
PROTOBUF_NAMESPACE_OPEN
template<> ::perception::LaneCenter* Arena::CreateMaybeMessage<::perception::LaneCenter>(Arena*);
template<> ::perception::LaneMark* Arena::CreateMaybeMessage<::perception::LaneMark>(Arena*);
template<> ::perception::LaneMarks* Arena::CreateMaybeMessage<::perception::LaneMarks>(Arena*);
template<> ::perception::Point2D* Arena::CreateMaybeMessage<::perception::Point2D>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perception {

enum LaneMarkColor : int {
  COLOR_WHITE = 0,
  COLOR_YELLOW = 1
};
bool LaneMarkColor_IsValid(int value);
constexpr LaneMarkColor LaneMarkColor_MIN = COLOR_WHITE;
constexpr LaneMarkColor LaneMarkColor_MAX = COLOR_YELLOW;
constexpr int LaneMarkColor_ARRAYSIZE = LaneMarkColor_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LaneMarkColor_descriptor();
template<typename T>
inline const std::string& LaneMarkColor_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LaneMarkColor>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LaneMarkColor_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LaneMarkColor_descriptor(), enum_t_value);
}
inline bool LaneMarkColor_Parse(
    const std::string& name, LaneMarkColor* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LaneMarkColor>(
    LaneMarkColor_descriptor(), name, value);
}
enum LaneMarkType : int {
  LANE_MARK_NONE = 0,
  LANE_MARK_SOLID = 1,
  LANE_MARK_BROKEN = 2
};
bool LaneMarkType_IsValid(int value);
constexpr LaneMarkType LaneMarkType_MIN = LANE_MARK_NONE;
constexpr LaneMarkType LaneMarkType_MAX = LANE_MARK_BROKEN;
constexpr int LaneMarkType_ARRAYSIZE = LaneMarkType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LaneMarkType_descriptor();
template<typename T>
inline const std::string& LaneMarkType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LaneMarkType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LaneMarkType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LaneMarkType_descriptor(), enum_t_value);
}
inline bool LaneMarkType_Parse(
    const std::string& name, LaneMarkType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LaneMarkType>(
    LaneMarkType_descriptor(), name, value);
}
// ===================================================================

class Point2D :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.Point2D) */ {
 public:
  Point2D();
  virtual ~Point2D();

  Point2D(const Point2D& from);
  Point2D(Point2D&& from) noexcept
    : Point2D() {
    *this = ::std::move(from);
  }

  inline Point2D& operator=(const Point2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point2D& operator=(Point2D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point2D* internal_default_instance() {
    return reinterpret_cast<const Point2D*>(
               &_Point2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point2D& a, Point2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Point2D* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point2D* New() const final {
    return CreateMaybeMessage<Point2D>(nullptr);
  }

  Point2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point2D& from);
  void MergeFrom(const Point2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.Point2D";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lane_5fmark_2eproto);
    return ::descriptor_table_lane_5fmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // optional double x = 1 [default = nan];
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // optional double y = 2 [default = nan];
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:perception.Point2D)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  friend struct ::TableStruct_lane_5fmark_2eproto;
};
// -------------------------------------------------------------------

class LaneMark :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.LaneMark) */ {
 public:
  LaneMark();
  virtual ~LaneMark();

  LaneMark(const LaneMark& from);
  LaneMark(LaneMark&& from) noexcept
    : LaneMark() {
    *this = ::std::move(from);
  }

  inline LaneMark& operator=(const LaneMark& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneMark& operator=(LaneMark&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaneMark& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneMark* internal_default_instance() {
    return reinterpret_cast<const LaneMark*>(
               &_LaneMark_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LaneMark& a, LaneMark& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneMark* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaneMark* New() const final {
    return CreateMaybeMessage<LaneMark>(nullptr);
  }

  LaneMark* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaneMark>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaneMark& from);
  void MergeFrom(const LaneMark& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneMark* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.LaneMark";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lane_5fmark_2eproto);
    return ::descriptor_table_lane_5fmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 4,
    kColorFieldNumber = 1,
    kTypeFieldNumber = 2,
    kConfidenceFieldNumber = 3,
  };
  // repeated .perception.Point2D points = 4;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::perception::Point2D* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::Point2D >*
      mutable_points();
  private:
  const ::perception::Point2D& _internal_points(int index) const;
  ::perception::Point2D* _internal_add_points();
  public:
  const ::perception::Point2D& points(int index) const;
  ::perception::Point2D* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::Point2D >&
      points() const;

  // optional .perception.LaneMarkColor color = 1;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  ::perception::LaneMarkColor color() const;
  void set_color(::perception::LaneMarkColor value);
  private:
  ::perception::LaneMarkColor _internal_color() const;
  void _internal_set_color(::perception::LaneMarkColor value);
  public:

  // optional .perception.LaneMarkType type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::perception::LaneMarkType type() const;
  void set_type(::perception::LaneMarkType value);
  private:
  ::perception::LaneMarkType _internal_type() const;
  void _internal_set_type(::perception::LaneMarkType value);
  public:

  // optional float confidence = 3;
  bool has_confidence() const;
  private:
  bool _internal_has_confidence() const;
  public:
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // @@protoc_insertion_point(class_scope:perception.LaneMark)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::Point2D > points_;
  int color_;
  int type_;
  float confidence_;
  friend struct ::TableStruct_lane_5fmark_2eproto;
};
// -------------------------------------------------------------------

class LaneCenter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.LaneCenter) */ {
 public:
  LaneCenter();
  virtual ~LaneCenter();

  LaneCenter(const LaneCenter& from);
  LaneCenter(LaneCenter&& from) noexcept
    : LaneCenter() {
    *this = ::std::move(from);
  }

  inline LaneCenter& operator=(const LaneCenter& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneCenter& operator=(LaneCenter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaneCenter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneCenter* internal_default_instance() {
    return reinterpret_cast<const LaneCenter*>(
               &_LaneCenter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LaneCenter& a, LaneCenter& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneCenter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaneCenter* New() const final {
    return CreateMaybeMessage<LaneCenter>(nullptr);
  }

  LaneCenter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaneCenter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaneCenter& from);
  void MergeFrom(const LaneCenter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneCenter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.LaneCenter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lane_5fmark_2eproto);
    return ::descriptor_table_lane_5fmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated .perception.Point2D points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::perception::Point2D* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::Point2D >*
      mutable_points();
  private:
  const ::perception::Point2D& _internal_points(int index) const;
  ::perception::Point2D* _internal_add_points();
  public:
  const ::perception::Point2D& points(int index) const;
  ::perception::Point2D* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::Point2D >&
      points() const;

  // @@protoc_insertion_point(class_scope:perception.LaneCenter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::Point2D > points_;
  friend struct ::TableStruct_lane_5fmark_2eproto;
};
// -------------------------------------------------------------------

class LaneMarks :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.LaneMarks) */ {
 public:
  LaneMarks();
  virtual ~LaneMarks();

  LaneMarks(const LaneMarks& from);
  LaneMarks(LaneMarks&& from) noexcept
    : LaneMarks() {
    *this = ::std::move(from);
  }

  inline LaneMarks& operator=(const LaneMarks& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneMarks& operator=(LaneMarks&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaneMarks& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneMarks* internal_default_instance() {
    return reinterpret_cast<const LaneMarks*>(
               &_LaneMarks_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LaneMarks& a, LaneMarks& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneMarks* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaneMarks* New() const final {
    return CreateMaybeMessage<LaneMarks>(nullptr);
  }

  LaneMarks* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaneMarks>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaneMarks& from);
  void MergeFrom(const LaneMarks& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneMarks* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.LaneMarks";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lane_5fmark_2eproto);
    return ::descriptor_table_lane_5fmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kLeftFieldNumber = 2,
    kRightFieldNumber = 3,
    kLeft2FieldNumber = 4,
    kRight2FieldNumber = 5,
  };
  // optional .common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::common::Header& header() const;
  ::common::Header* release_header();
  ::common::Header* mutable_header();
  void set_allocated_header(::common::Header* header);
  private:
  const ::common::Header& _internal_header() const;
  ::common::Header* _internal_mutable_header();
  public:

  // optional .perception.LaneMark left = 2;
  bool has_left() const;
  private:
  bool _internal_has_left() const;
  public:
  void clear_left();
  const ::perception::LaneMark& left() const;
  ::perception::LaneMark* release_left();
  ::perception::LaneMark* mutable_left();
  void set_allocated_left(::perception::LaneMark* left);
  private:
  const ::perception::LaneMark& _internal_left() const;
  ::perception::LaneMark* _internal_mutable_left();
  public:

  // optional .perception.LaneMark right = 3;
  bool has_right() const;
  private:
  bool _internal_has_right() const;
  public:
  void clear_right();
  const ::perception::LaneMark& right() const;
  ::perception::LaneMark* release_right();
  ::perception::LaneMark* mutable_right();
  void set_allocated_right(::perception::LaneMark* right);
  private:
  const ::perception::LaneMark& _internal_right() const;
  ::perception::LaneMark* _internal_mutable_right();
  public:

  // optional .perception.LaneMark left2 = 4;
  bool has_left2() const;
  private:
  bool _internal_has_left2() const;
  public:
  void clear_left2();
  const ::perception::LaneMark& left2() const;
  ::perception::LaneMark* release_left2();
  ::perception::LaneMark* mutable_left2();
  void set_allocated_left2(::perception::LaneMark* left2);
  private:
  const ::perception::LaneMark& _internal_left2() const;
  ::perception::LaneMark* _internal_mutable_left2();
  public:

  // optional .perception.LaneMark right2 = 5;
  bool has_right2() const;
  private:
  bool _internal_has_right2() const;
  public:
  void clear_right2();
  const ::perception::LaneMark& right2() const;
  ::perception::LaneMark* release_right2();
  ::perception::LaneMark* mutable_right2();
  void set_allocated_right2(::perception::LaneMark* right2);
  private:
  const ::perception::LaneMark& _internal_right2() const;
  ::perception::LaneMark* _internal_mutable_right2();
  public:

  // @@protoc_insertion_point(class_scope:perception.LaneMarks)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::common::Header* header_;
  ::perception::LaneMark* left_;
  ::perception::LaneMark* right_;
  ::perception::LaneMark* left2_;
  ::perception::LaneMark* right2_;
  friend struct ::TableStruct_lane_5fmark_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point2D

// optional double x = 1 [default = nan];
inline bool Point2D::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Point2D::has_x() const {
  return _internal_has_x();
}
inline void Point2D::clear_x() {
  x_ = std::numeric_limits<double>::quiet_NaN();
  _has_bits_[0] &= ~0x00000001u;
}
inline double Point2D::_internal_x() const {
  return x_;
}
inline double Point2D::x() const {
  // @@protoc_insertion_point(field_get:perception.Point2D.x)
  return _internal_x();
}
inline void Point2D::_internal_set_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Point2D::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:perception.Point2D.x)
}

// optional double y = 2 [default = nan];
inline bool Point2D::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Point2D::has_y() const {
  return _internal_has_y();
}
inline void Point2D::clear_y() {
  y_ = std::numeric_limits<double>::quiet_NaN();
  _has_bits_[0] &= ~0x00000002u;
}
inline double Point2D::_internal_y() const {
  return y_;
}
inline double Point2D::y() const {
  // @@protoc_insertion_point(field_get:perception.Point2D.y)
  return _internal_y();
}
inline void Point2D::_internal_set_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Point2D::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:perception.Point2D.y)
}

// -------------------------------------------------------------------

// LaneMark

// optional .perception.LaneMarkColor color = 1;
inline bool LaneMark::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LaneMark::has_color() const {
  return _internal_has_color();
}
inline void LaneMark::clear_color() {
  color_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::perception::LaneMarkColor LaneMark::_internal_color() const {
  return static_cast< ::perception::LaneMarkColor >(color_);
}
inline ::perception::LaneMarkColor LaneMark::color() const {
  // @@protoc_insertion_point(field_get:perception.LaneMark.color)
  return _internal_color();
}
inline void LaneMark::_internal_set_color(::perception::LaneMarkColor value) {
  assert(::perception::LaneMarkColor_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  color_ = value;
}
inline void LaneMark::set_color(::perception::LaneMarkColor value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:perception.LaneMark.color)
}

// optional .perception.LaneMarkType type = 2;
inline bool LaneMark::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LaneMark::has_type() const {
  return _internal_has_type();
}
inline void LaneMark::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::perception::LaneMarkType LaneMark::_internal_type() const {
  return static_cast< ::perception::LaneMarkType >(type_);
}
inline ::perception::LaneMarkType LaneMark::type() const {
  // @@protoc_insertion_point(field_get:perception.LaneMark.type)
  return _internal_type();
}
inline void LaneMark::_internal_set_type(::perception::LaneMarkType value) {
  assert(::perception::LaneMarkType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void LaneMark::set_type(::perception::LaneMarkType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:perception.LaneMark.type)
}

// optional float confidence = 3;
inline bool LaneMark::_internal_has_confidence() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LaneMark::has_confidence() const {
  return _internal_has_confidence();
}
inline void LaneMark::clear_confidence() {
  confidence_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float LaneMark::_internal_confidence() const {
  return confidence_;
}
inline float LaneMark::confidence() const {
  // @@protoc_insertion_point(field_get:perception.LaneMark.confidence)
  return _internal_confidence();
}
inline void LaneMark::_internal_set_confidence(float value) {
  _has_bits_[0] |= 0x00000004u;
  confidence_ = value;
}
inline void LaneMark::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:perception.LaneMark.confidence)
}

// repeated .perception.Point2D points = 4;
inline int LaneMark::_internal_points_size() const {
  return points_.size();
}
inline int LaneMark::points_size() const {
  return _internal_points_size();
}
inline void LaneMark::clear_points() {
  points_.Clear();
}
inline ::perception::Point2D* LaneMark::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:perception.LaneMark.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::Point2D >*
LaneMark::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:perception.LaneMark.points)
  return &points_;
}
inline const ::perception::Point2D& LaneMark::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::perception::Point2D& LaneMark::points(int index) const {
  // @@protoc_insertion_point(field_get:perception.LaneMark.points)
  return _internal_points(index);
}
inline ::perception::Point2D* LaneMark::_internal_add_points() {
  return points_.Add();
}
inline ::perception::Point2D* LaneMark::add_points() {
  // @@protoc_insertion_point(field_add:perception.LaneMark.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::Point2D >&
LaneMark::points() const {
  // @@protoc_insertion_point(field_list:perception.LaneMark.points)
  return points_;
}

// -------------------------------------------------------------------

// LaneCenter

// repeated .perception.Point2D points = 1;
inline int LaneCenter::_internal_points_size() const {
  return points_.size();
}
inline int LaneCenter::points_size() const {
  return _internal_points_size();
}
inline void LaneCenter::clear_points() {
  points_.Clear();
}
inline ::perception::Point2D* LaneCenter::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:perception.LaneCenter.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::Point2D >*
LaneCenter::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:perception.LaneCenter.points)
  return &points_;
}
inline const ::perception::Point2D& LaneCenter::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::perception::Point2D& LaneCenter::points(int index) const {
  // @@protoc_insertion_point(field_get:perception.LaneCenter.points)
  return _internal_points(index);
}
inline ::perception::Point2D* LaneCenter::_internal_add_points() {
  return points_.Add();
}
inline ::perception::Point2D* LaneCenter::add_points() {
  // @@protoc_insertion_point(field_add:perception.LaneCenter.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::Point2D >&
LaneCenter::points() const {
  // @@protoc_insertion_point(field_list:perception.LaneCenter.points)
  return points_;
}

// -------------------------------------------------------------------

// LaneMarks

// optional .common.Header header = 1;
inline bool LaneMarks::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool LaneMarks::has_header() const {
  return _internal_has_header();
}
inline const ::common::Header& LaneMarks::_internal_header() const {
  const ::common::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::Header*>(
      &::common::_Header_default_instance_);
}
inline const ::common::Header& LaneMarks::header() const {
  // @@protoc_insertion_point(field_get:perception.LaneMarks.header)
  return _internal_header();
}
inline ::common::Header* LaneMarks::release_header() {
  // @@protoc_insertion_point(field_release:perception.LaneMarks.header)
  _has_bits_[0] &= ~0x00000001u;
  ::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::Header* LaneMarks::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::common::Header* LaneMarks::mutable_header() {
  // @@protoc_insertion_point(field_mutable:perception.LaneMarks.header)
  return _internal_mutable_header();
}
inline void LaneMarks::set_allocated_header(::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:perception.LaneMarks.header)
}

// optional .perception.LaneMark left = 2;
inline bool LaneMarks::_internal_has_left() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || left_ != nullptr);
  return value;
}
inline bool LaneMarks::has_left() const {
  return _internal_has_left();
}
inline void LaneMarks::clear_left() {
  if (left_ != nullptr) left_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::perception::LaneMark& LaneMarks::_internal_left() const {
  const ::perception::LaneMark* p = left_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::LaneMark*>(
      &::perception::_LaneMark_default_instance_);
}
inline const ::perception::LaneMark& LaneMarks::left() const {
  // @@protoc_insertion_point(field_get:perception.LaneMarks.left)
  return _internal_left();
}
inline ::perception::LaneMark* LaneMarks::release_left() {
  // @@protoc_insertion_point(field_release:perception.LaneMarks.left)
  _has_bits_[0] &= ~0x00000002u;
  ::perception::LaneMark* temp = left_;
  left_ = nullptr;
  return temp;
}
inline ::perception::LaneMark* LaneMarks::_internal_mutable_left() {
  _has_bits_[0] |= 0x00000002u;
  if (left_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::LaneMark>(GetArenaNoVirtual());
    left_ = p;
  }
  return left_;
}
inline ::perception::LaneMark* LaneMarks::mutable_left() {
  // @@protoc_insertion_point(field_mutable:perception.LaneMarks.left)
  return _internal_mutable_left();
}
inline void LaneMarks::set_allocated_left(::perception::LaneMark* left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete left_;
  }
  if (left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  left_ = left;
  // @@protoc_insertion_point(field_set_allocated:perception.LaneMarks.left)
}

// optional .perception.LaneMark right = 3;
inline bool LaneMarks::_internal_has_right() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || right_ != nullptr);
  return value;
}
inline bool LaneMarks::has_right() const {
  return _internal_has_right();
}
inline void LaneMarks::clear_right() {
  if (right_ != nullptr) right_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::perception::LaneMark& LaneMarks::_internal_right() const {
  const ::perception::LaneMark* p = right_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::LaneMark*>(
      &::perception::_LaneMark_default_instance_);
}
inline const ::perception::LaneMark& LaneMarks::right() const {
  // @@protoc_insertion_point(field_get:perception.LaneMarks.right)
  return _internal_right();
}
inline ::perception::LaneMark* LaneMarks::release_right() {
  // @@protoc_insertion_point(field_release:perception.LaneMarks.right)
  _has_bits_[0] &= ~0x00000004u;
  ::perception::LaneMark* temp = right_;
  right_ = nullptr;
  return temp;
}
inline ::perception::LaneMark* LaneMarks::_internal_mutable_right() {
  _has_bits_[0] |= 0x00000004u;
  if (right_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::LaneMark>(GetArenaNoVirtual());
    right_ = p;
  }
  return right_;
}
inline ::perception::LaneMark* LaneMarks::mutable_right() {
  // @@protoc_insertion_point(field_mutable:perception.LaneMarks.right)
  return _internal_mutable_right();
}
inline void LaneMarks::set_allocated_right(::perception::LaneMark* right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete right_;
  }
  if (right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  right_ = right;
  // @@protoc_insertion_point(field_set_allocated:perception.LaneMarks.right)
}

// optional .perception.LaneMark left2 = 4;
inline bool LaneMarks::_internal_has_left2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || left2_ != nullptr);
  return value;
}
inline bool LaneMarks::has_left2() const {
  return _internal_has_left2();
}
inline void LaneMarks::clear_left2() {
  if (left2_ != nullptr) left2_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::perception::LaneMark& LaneMarks::_internal_left2() const {
  const ::perception::LaneMark* p = left2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::LaneMark*>(
      &::perception::_LaneMark_default_instance_);
}
inline const ::perception::LaneMark& LaneMarks::left2() const {
  // @@protoc_insertion_point(field_get:perception.LaneMarks.left2)
  return _internal_left2();
}
inline ::perception::LaneMark* LaneMarks::release_left2() {
  // @@protoc_insertion_point(field_release:perception.LaneMarks.left2)
  _has_bits_[0] &= ~0x00000008u;
  ::perception::LaneMark* temp = left2_;
  left2_ = nullptr;
  return temp;
}
inline ::perception::LaneMark* LaneMarks::_internal_mutable_left2() {
  _has_bits_[0] |= 0x00000008u;
  if (left2_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::LaneMark>(GetArenaNoVirtual());
    left2_ = p;
  }
  return left2_;
}
inline ::perception::LaneMark* LaneMarks::mutable_left2() {
  // @@protoc_insertion_point(field_mutable:perception.LaneMarks.left2)
  return _internal_mutable_left2();
}
inline void LaneMarks::set_allocated_left2(::perception::LaneMark* left2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete left2_;
  }
  if (left2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      left2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  left2_ = left2;
  // @@protoc_insertion_point(field_set_allocated:perception.LaneMarks.left2)
}

// optional .perception.LaneMark right2 = 5;
inline bool LaneMarks::_internal_has_right2() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || right2_ != nullptr);
  return value;
}
inline bool LaneMarks::has_right2() const {
  return _internal_has_right2();
}
inline void LaneMarks::clear_right2() {
  if (right2_ != nullptr) right2_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::perception::LaneMark& LaneMarks::_internal_right2() const {
  const ::perception::LaneMark* p = right2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::LaneMark*>(
      &::perception::_LaneMark_default_instance_);
}
inline const ::perception::LaneMark& LaneMarks::right2() const {
  // @@protoc_insertion_point(field_get:perception.LaneMarks.right2)
  return _internal_right2();
}
inline ::perception::LaneMark* LaneMarks::release_right2() {
  // @@protoc_insertion_point(field_release:perception.LaneMarks.right2)
  _has_bits_[0] &= ~0x00000010u;
  ::perception::LaneMark* temp = right2_;
  right2_ = nullptr;
  return temp;
}
inline ::perception::LaneMark* LaneMarks::_internal_mutable_right2() {
  _has_bits_[0] |= 0x00000010u;
  if (right2_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::LaneMark>(GetArenaNoVirtual());
    right2_ = p;
  }
  return right2_;
}
inline ::perception::LaneMark* LaneMarks::mutable_right2() {
  // @@protoc_insertion_point(field_mutable:perception.LaneMarks.right2)
  return _internal_mutable_right2();
}
inline void LaneMarks::set_allocated_right2(::perception::LaneMark* right2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete right2_;
  }
  if (right2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      right2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  right2_ = right2;
  // @@protoc_insertion_point(field_set_allocated:perception.LaneMarks.right2)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perception::LaneMarkColor> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::perception::LaneMarkColor>() {
  return ::perception::LaneMarkColor_descriptor();
}
template <> struct is_proto_enum< ::perception::LaneMarkType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::perception::LaneMarkType>() {
  return ::perception::LaneMarkType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lane_5fmark_2eproto
