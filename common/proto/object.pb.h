// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_object_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_object_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
#include "geometry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_object_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_object_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_object_2eproto;
namespace perception {
class Object;
class ObjectDefaultTypeInternal;
extern ObjectDefaultTypeInternal _Object_default_instance_;
class TrackedObject;
class TrackedObjectDefaultTypeInternal;
extern TrackedObjectDefaultTypeInternal _TrackedObject_default_instance_;
class TrackedObjects;
class TrackedObjectsDefaultTypeInternal;
extern TrackedObjectsDefaultTypeInternal _TrackedObjects_default_instance_;
class VisualObject;
class VisualObjectDefaultTypeInternal;
extern VisualObjectDefaultTypeInternal _VisualObject_default_instance_;
class VisualObjects;
class VisualObjectsDefaultTypeInternal;
extern VisualObjectsDefaultTypeInternal _VisualObjects_default_instance_;
}  // namespace perception
PROTOBUF_NAMESPACE_OPEN
template<> ::perception::Object* Arena::CreateMaybeMessage<::perception::Object>(Arena*);
template<> ::perception::TrackedObject* Arena::CreateMaybeMessage<::perception::TrackedObject>(Arena*);
template<> ::perception::TrackedObjects* Arena::CreateMaybeMessage<::perception::TrackedObjects>(Arena*);
template<> ::perception::VisualObject* Arena::CreateMaybeMessage<::perception::VisualObject>(Arena*);
template<> ::perception::VisualObjects* Arena::CreateMaybeMessage<::perception::VisualObjects>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perception {

enum ObjectType : int {
  TYPE_UNKNOWN = 0,
  TYPE_PEDESTRIAN = 3,
  TYPE_BICYCLE = 4,
  TYPE_MOTOR = 5,
  TYPE_RIDER = 6,
  TYPE_CAR = 7,
  TYPE_TRUCK = 8,
  TYPE_BUS = 9,
  TYPE_TRAIN = 10,
  TYPE_SIGN = 20,
  TYPE_LIGHT = 30,
  TYPE_UNKNOWN_SMALL = 91,
  TYPE_UNKNOWN_BIG = 92,
  TYPE_UNKNOWN_STATIC = 93,
  TYPE_UNKNOWN_DYNAMIC = 94
};
bool ObjectType_IsValid(int value);
constexpr ObjectType ObjectType_MIN = TYPE_UNKNOWN;
constexpr ObjectType ObjectType_MAX = TYPE_UNKNOWN_DYNAMIC;
constexpr int ObjectType_ARRAYSIZE = ObjectType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObjectType_descriptor();
template<typename T>
inline const std::string& ObjectType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObjectType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObjectType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObjectType_descriptor(), enum_t_value);
}
inline bool ObjectType_Parse(
    const std::string& name, ObjectType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObjectType>(
    ObjectType_descriptor(), name, value);
}
// ===================================================================

class Object :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.Object) */ {
 public:
  Object();
  virtual ~Object();

  Object(const Object& from);
  Object(Object&& from) noexcept
    : Object() {
    *this = ::std::move(from);
  }

  inline Object& operator=(const Object& from) {
    CopyFrom(from);
    return *this;
  }
  inline Object& operator=(Object&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Object& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Object* internal_default_instance() {
    return reinterpret_cast<const Object*>(
               &_Object_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Object& a, Object& b) {
    a.Swap(&b);
  }
  inline void Swap(Object* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Object* New() const final {
    return CreateMaybeMessage<Object>(nullptr);
  }

  Object* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Object>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Object& from);
  void MergeFrom(const Object& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Object* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.Object";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_object_2eproto);
    return ::descriptor_table_object_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContourFieldNumber = 11,
    kCenterFieldNumber = 9,
    kSizeFieldNumber = 10,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kConfidenceFieldNumber = 4,
    kStatusFieldNumber = 5,
    kXDistanceFieldNumber = 6,
    kYDistanceFieldNumber = 7,
    kAngleFieldNumber = 8,
  };
  // repeated .geometry.Point contour = 11;
  int contour_size() const;
  private:
  int _internal_contour_size() const;
  public:
  void clear_contour();
  ::geometry::Point* mutable_contour(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::geometry::Point >*
      mutable_contour();
  private:
  const ::geometry::Point& _internal_contour(int index) const;
  ::geometry::Point* _internal_add_contour();
  public:
  const ::geometry::Point& contour(int index) const;
  ::geometry::Point* add_contour();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::geometry::Point >&
      contour() const;

  // optional .geometry.Point center = 9;
  bool has_center() const;
  private:
  bool _internal_has_center() const;
  public:
  void clear_center();
  const ::geometry::Point& center() const;
  ::geometry::Point* release_center();
  ::geometry::Point* mutable_center();
  void set_allocated_center(::geometry::Point* center);
  private:
  const ::geometry::Point& _internal_center() const;
  ::geometry::Point* _internal_mutable_center();
  public:

  // optional .geometry.Vector3 size = 10;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::geometry::Vector3& size() const;
  ::geometry::Vector3* release_size();
  ::geometry::Vector3* mutable_size();
  void set_allocated_size(::geometry::Vector3* size);
  private:
  const ::geometry::Vector3& _internal_size() const;
  ::geometry::Vector3* _internal_mutable_size();
  public:

  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .perception.ObjectType type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::perception::ObjectType type() const;
  void set_type(::perception::ObjectType value);
  private:
  ::perception::ObjectType _internal_type() const;
  void _internal_set_type(::perception::ObjectType value);
  public:

  // optional double timestamp = 3;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // optional float confidence = 4;
  bool has_confidence() const;
  private:
  bool _internal_has_confidence() const;
  public:
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // optional int32 status = 5;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float x_distance = 6;
  bool has_x_distance() const;
  private:
  bool _internal_has_x_distance() const;
  public:
  void clear_x_distance();
  float x_distance() const;
  void set_x_distance(float value);
  private:
  float _internal_x_distance() const;
  void _internal_set_x_distance(float value);
  public:

  // optional float y_distance = 7;
  bool has_y_distance() const;
  private:
  bool _internal_has_y_distance() const;
  public:
  void clear_y_distance();
  float y_distance() const;
  void set_y_distance(float value);
  private:
  float _internal_y_distance() const;
  void _internal_set_y_distance(float value);
  public:

  // optional float angle = 8;
  bool has_angle() const;
  private:
  bool _internal_has_angle() const;
  public:
  void clear_angle();
  float angle() const;
  void set_angle(float value);
  private:
  float _internal_angle() const;
  void _internal_set_angle(float value);
  public:

  // @@protoc_insertion_point(class_scope:perception.Object)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::geometry::Point > contour_;
  ::geometry::Point* center_;
  ::geometry::Vector3* size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  int type_;
  double timestamp_;
  float confidence_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  float x_distance_;
  float y_distance_;
  float angle_;
  friend struct ::TableStruct_object_2eproto;
};
// -------------------------------------------------------------------

class VisualObject :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.VisualObject) */ {
 public:
  VisualObject();
  virtual ~VisualObject();

  VisualObject(const VisualObject& from);
  VisualObject(VisualObject&& from) noexcept
    : VisualObject() {
    *this = ::std::move(from);
  }

  inline VisualObject& operator=(const VisualObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline VisualObject& operator=(VisualObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VisualObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VisualObject* internal_default_instance() {
    return reinterpret_cast<const VisualObject*>(
               &_VisualObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VisualObject& a, VisualObject& b) {
    a.Swap(&b);
  }
  inline void Swap(VisualObject* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VisualObject* New() const final {
    return CreateMaybeMessage<VisualObject>(nullptr);
  }

  VisualObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VisualObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VisualObject& from);
  void MergeFrom(const VisualObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VisualObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.VisualObject";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_object_2eproto);
    return ::descriptor_table_object_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kWidthFieldNumber = 4,
    kHeightFieldNumber = 5,
  };
  // optional .perception.Object obj = 1;
  bool has_obj() const;
  private:
  bool _internal_has_obj() const;
  public:
  void clear_obj();
  const ::perception::Object& obj() const;
  ::perception::Object* release_obj();
  ::perception::Object* mutable_obj();
  void set_allocated_obj(::perception::Object* obj);
  private:
  const ::perception::Object& _internal_obj() const;
  ::perception::Object* _internal_mutable_obj();
  public:

  // optional int32 x = 2;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 y = 3;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 width = 4;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 height = 5;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perception.VisualObject)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::perception::Object* obj_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  friend struct ::TableStruct_object_2eproto;
};
// -------------------------------------------------------------------

class VisualObjects :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.VisualObjects) */ {
 public:
  VisualObjects();
  virtual ~VisualObjects();

  VisualObjects(const VisualObjects& from);
  VisualObjects(VisualObjects&& from) noexcept
    : VisualObjects() {
    *this = ::std::move(from);
  }

  inline VisualObjects& operator=(const VisualObjects& from) {
    CopyFrom(from);
    return *this;
  }
  inline VisualObjects& operator=(VisualObjects&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VisualObjects& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VisualObjects* internal_default_instance() {
    return reinterpret_cast<const VisualObjects*>(
               &_VisualObjects_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VisualObjects& a, VisualObjects& b) {
    a.Swap(&b);
  }
  inline void Swap(VisualObjects* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VisualObjects* New() const final {
    return CreateMaybeMessage<VisualObjects>(nullptr);
  }

  VisualObjects* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VisualObjects>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VisualObjects& from);
  void MergeFrom(const VisualObjects& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VisualObjects* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.VisualObjects";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_object_2eproto);
    return ::descriptor_table_object_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjsFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .perception.VisualObject objs = 2;
  int objs_size() const;
  private:
  int _internal_objs_size() const;
  public:
  void clear_objs();
  ::perception::VisualObject* mutable_objs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::VisualObject >*
      mutable_objs();
  private:
  const ::perception::VisualObject& _internal_objs(int index) const;
  ::perception::VisualObject* _internal_add_objs();
  public:
  const ::perception::VisualObject& objs(int index) const;
  ::perception::VisualObject* add_objs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::VisualObject >&
      objs() const;

  // optional .common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::common::Header& header() const;
  ::common::Header* release_header();
  ::common::Header* mutable_header();
  void set_allocated_header(::common::Header* header);
  private:
  const ::common::Header& _internal_header() const;
  ::common::Header* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:perception.VisualObjects)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::VisualObject > objs_;
  ::common::Header* header_;
  friend struct ::TableStruct_object_2eproto;
};
// -------------------------------------------------------------------

class TrackedObject :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.TrackedObject) */ {
 public:
  TrackedObject();
  virtual ~TrackedObject();

  TrackedObject(const TrackedObject& from);
  TrackedObject(TrackedObject&& from) noexcept
    : TrackedObject() {
    *this = ::std::move(from);
  }

  inline TrackedObject& operator=(const TrackedObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackedObject& operator=(TrackedObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrackedObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackedObject* internal_default_instance() {
    return reinterpret_cast<const TrackedObject*>(
               &_TrackedObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TrackedObject& a, TrackedObject& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackedObject* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackedObject* New() const final {
    return CreateMaybeMessage<TrackedObject>(nullptr);
  }

  TrackedObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackedObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackedObject& from);
  void MergeFrom(const TrackedObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackedObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.TrackedObject";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_object_2eproto);
    return ::descriptor_table_object_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTraceFieldNumber = 5,
    kObjFieldNumber = 1,
    kVelocityFieldNumber = 4,
    kYawFieldNumber = 2,
    kYawRateFieldNumber = 3,
    kAbsoluteLongitudeVFieldNumber = 6,
    kAbsoluteLongitudeAFieldNumber = 7,
    kAbsoluteLateralVFieldNumber = 8,
  };
  // repeated .geometry.Point trace = 5;
  int trace_size() const;
  private:
  int _internal_trace_size() const;
  public:
  void clear_trace();
  ::geometry::Point* mutable_trace(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::geometry::Point >*
      mutable_trace();
  private:
  const ::geometry::Point& _internal_trace(int index) const;
  ::geometry::Point* _internal_add_trace();
  public:
  const ::geometry::Point& trace(int index) const;
  ::geometry::Point* add_trace();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::geometry::Point >&
      trace() const;

  // optional .perception.Object obj = 1;
  bool has_obj() const;
  private:
  bool _internal_has_obj() const;
  public:
  void clear_obj();
  const ::perception::Object& obj() const;
  ::perception::Object* release_obj();
  ::perception::Object* mutable_obj();
  void set_allocated_obj(::perception::Object* obj);
  private:
  const ::perception::Object& _internal_obj() const;
  ::perception::Object* _internal_mutable_obj();
  public:

  // optional .geometry.Vector3 velocity = 4;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::geometry::Vector3& velocity() const;
  ::geometry::Vector3* release_velocity();
  ::geometry::Vector3* mutable_velocity();
  void set_allocated_velocity(::geometry::Vector3* velocity);
  private:
  const ::geometry::Vector3& _internal_velocity() const;
  ::geometry::Vector3* _internal_mutable_velocity();
  public:

  // optional float yaw = 2;
  bool has_yaw() const;
  private:
  bool _internal_has_yaw() const;
  public:
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // optional float yaw_rate = 3;
  bool has_yaw_rate() const;
  private:
  bool _internal_has_yaw_rate() const;
  public:
  void clear_yaw_rate();
  float yaw_rate() const;
  void set_yaw_rate(float value);
  private:
  float _internal_yaw_rate() const;
  void _internal_set_yaw_rate(float value);
  public:

  // optional float absolute_longitude_v = 6;
  bool has_absolute_longitude_v() const;
  private:
  bool _internal_has_absolute_longitude_v() const;
  public:
  void clear_absolute_longitude_v();
  float absolute_longitude_v() const;
  void set_absolute_longitude_v(float value);
  private:
  float _internal_absolute_longitude_v() const;
  void _internal_set_absolute_longitude_v(float value);
  public:

  // optional float absolute_longitude_a = 7;
  bool has_absolute_longitude_a() const;
  private:
  bool _internal_has_absolute_longitude_a() const;
  public:
  void clear_absolute_longitude_a();
  float absolute_longitude_a() const;
  void set_absolute_longitude_a(float value);
  private:
  float _internal_absolute_longitude_a() const;
  void _internal_set_absolute_longitude_a(float value);
  public:

  // optional float absolute_lateral_v = 8;
  bool has_absolute_lateral_v() const;
  private:
  bool _internal_has_absolute_lateral_v() const;
  public:
  void clear_absolute_lateral_v();
  float absolute_lateral_v() const;
  void set_absolute_lateral_v(float value);
  private:
  float _internal_absolute_lateral_v() const;
  void _internal_set_absolute_lateral_v(float value);
  public:

  // @@protoc_insertion_point(class_scope:perception.TrackedObject)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::geometry::Point > trace_;
  ::perception::Object* obj_;
  ::geometry::Vector3* velocity_;
  float yaw_;
  float yaw_rate_;
  float absolute_longitude_v_;
  float absolute_longitude_a_;
  float absolute_lateral_v_;
  friend struct ::TableStruct_object_2eproto;
};
// -------------------------------------------------------------------

class TrackedObjects :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.TrackedObjects) */ {
 public:
  TrackedObjects();
  virtual ~TrackedObjects();

  TrackedObjects(const TrackedObjects& from);
  TrackedObjects(TrackedObjects&& from) noexcept
    : TrackedObjects() {
    *this = ::std::move(from);
  }

  inline TrackedObjects& operator=(const TrackedObjects& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackedObjects& operator=(TrackedObjects&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrackedObjects& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackedObjects* internal_default_instance() {
    return reinterpret_cast<const TrackedObjects*>(
               &_TrackedObjects_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TrackedObjects& a, TrackedObjects& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackedObjects* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackedObjects* New() const final {
    return CreateMaybeMessage<TrackedObjects>(nullptr);
  }

  TrackedObjects* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackedObjects>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackedObjects& from);
  void MergeFrom(const TrackedObjects& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackedObjects* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.TrackedObjects";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_object_2eproto);
    return ::descriptor_table_object_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjsFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .perception.TrackedObject objs = 2;
  int objs_size() const;
  private:
  int _internal_objs_size() const;
  public:
  void clear_objs();
  ::perception::TrackedObject* mutable_objs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::TrackedObject >*
      mutable_objs();
  private:
  const ::perception::TrackedObject& _internal_objs(int index) const;
  ::perception::TrackedObject* _internal_add_objs();
  public:
  const ::perception::TrackedObject& objs(int index) const;
  ::perception::TrackedObject* add_objs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::TrackedObject >&
      objs() const;

  // optional .common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::common::Header& header() const;
  ::common::Header* release_header();
  ::common::Header* mutable_header();
  void set_allocated_header(::common::Header* header);
  private:
  const ::common::Header& _internal_header() const;
  ::common::Header* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:perception.TrackedObjects)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::TrackedObject > objs_;
  ::common::Header* header_;
  friend struct ::TableStruct_object_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Object

// optional uint32 id = 1;
inline bool Object::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Object::has_id() const {
  return _internal_has_id();
}
inline void Object::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Object::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Object::id() const {
  // @@protoc_insertion_point(field_get:perception.Object.id)
  return _internal_id();
}
inline void Object::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void Object::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:perception.Object.id)
}

// optional .perception.ObjectType type = 2;
inline bool Object::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Object::has_type() const {
  return _internal_has_type();
}
inline void Object::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::perception::ObjectType Object::_internal_type() const {
  return static_cast< ::perception::ObjectType >(type_);
}
inline ::perception::ObjectType Object::type() const {
  // @@protoc_insertion_point(field_get:perception.Object.type)
  return _internal_type();
}
inline void Object::_internal_set_type(::perception::ObjectType value) {
  assert(::perception::ObjectType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
}
inline void Object::set_type(::perception::ObjectType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:perception.Object.type)
}

// optional double timestamp = 3;
inline bool Object::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Object::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void Object::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Object::_internal_timestamp() const {
  return timestamp_;
}
inline double Object::timestamp() const {
  // @@protoc_insertion_point(field_get:perception.Object.timestamp)
  return _internal_timestamp();
}
inline void Object::_internal_set_timestamp(double value) {
  _has_bits_[0] |= 0x00000010u;
  timestamp_ = value;
}
inline void Object::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:perception.Object.timestamp)
}

// optional float confidence = 4;
inline bool Object::_internal_has_confidence() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Object::has_confidence() const {
  return _internal_has_confidence();
}
inline void Object::clear_confidence() {
  confidence_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float Object::_internal_confidence() const {
  return confidence_;
}
inline float Object::confidence() const {
  // @@protoc_insertion_point(field_get:perception.Object.confidence)
  return _internal_confidence();
}
inline void Object::_internal_set_confidence(float value) {
  _has_bits_[0] |= 0x00000020u;
  confidence_ = value;
}
inline void Object::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:perception.Object.confidence)
}

// optional int32 status = 5;
inline bool Object::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Object::has_status() const {
  return _internal_has_status();
}
inline void Object::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object::status() const {
  // @@protoc_insertion_point(field_get:perception.Object.status)
  return _internal_status();
}
inline void Object::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  status_ = value;
}
inline void Object::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:perception.Object.status)
}

// optional float x_distance = 6;
inline bool Object::_internal_has_x_distance() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Object::has_x_distance() const {
  return _internal_has_x_distance();
}
inline void Object::clear_x_distance() {
  x_distance_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float Object::_internal_x_distance() const {
  return x_distance_;
}
inline float Object::x_distance() const {
  // @@protoc_insertion_point(field_get:perception.Object.x_distance)
  return _internal_x_distance();
}
inline void Object::_internal_set_x_distance(float value) {
  _has_bits_[0] |= 0x00000080u;
  x_distance_ = value;
}
inline void Object::set_x_distance(float value) {
  _internal_set_x_distance(value);
  // @@protoc_insertion_point(field_set:perception.Object.x_distance)
}

// optional float y_distance = 7;
inline bool Object::_internal_has_y_distance() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Object::has_y_distance() const {
  return _internal_has_y_distance();
}
inline void Object::clear_y_distance() {
  y_distance_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float Object::_internal_y_distance() const {
  return y_distance_;
}
inline float Object::y_distance() const {
  // @@protoc_insertion_point(field_get:perception.Object.y_distance)
  return _internal_y_distance();
}
inline void Object::_internal_set_y_distance(float value) {
  _has_bits_[0] |= 0x00000100u;
  y_distance_ = value;
}
inline void Object::set_y_distance(float value) {
  _internal_set_y_distance(value);
  // @@protoc_insertion_point(field_set:perception.Object.y_distance)
}

// optional float angle = 8;
inline bool Object::_internal_has_angle() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Object::has_angle() const {
  return _internal_has_angle();
}
inline void Object::clear_angle() {
  angle_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float Object::_internal_angle() const {
  return angle_;
}
inline float Object::angle() const {
  // @@protoc_insertion_point(field_get:perception.Object.angle)
  return _internal_angle();
}
inline void Object::_internal_set_angle(float value) {
  _has_bits_[0] |= 0x00000200u;
  angle_ = value;
}
inline void Object::set_angle(float value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:perception.Object.angle)
}

// optional .geometry.Point center = 9;
inline bool Object::_internal_has_center() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || center_ != nullptr);
  return value;
}
inline bool Object::has_center() const {
  return _internal_has_center();
}
inline const ::geometry::Point& Object::_internal_center() const {
  const ::geometry::Point* p = center_;
  return p != nullptr ? *p : *reinterpret_cast<const ::geometry::Point*>(
      &::geometry::_Point_default_instance_);
}
inline const ::geometry::Point& Object::center() const {
  // @@protoc_insertion_point(field_get:perception.Object.center)
  return _internal_center();
}
inline ::geometry::Point* Object::release_center() {
  // @@protoc_insertion_point(field_release:perception.Object.center)
  _has_bits_[0] &= ~0x00000001u;
  ::geometry::Point* temp = center_;
  center_ = nullptr;
  return temp;
}
inline ::geometry::Point* Object::_internal_mutable_center() {
  _has_bits_[0] |= 0x00000001u;
  if (center_ == nullptr) {
    auto* p = CreateMaybeMessage<::geometry::Point>(GetArenaNoVirtual());
    center_ = p;
  }
  return center_;
}
inline ::geometry::Point* Object::mutable_center() {
  // @@protoc_insertion_point(field_mutable:perception.Object.center)
  return _internal_mutable_center();
}
inline void Object::set_allocated_center(::geometry::Point* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_);
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:perception.Object.center)
}

// optional .geometry.Vector3 size = 10;
inline bool Object::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || size_ != nullptr);
  return value;
}
inline bool Object::has_size() const {
  return _internal_has_size();
}
inline const ::geometry::Vector3& Object::_internal_size() const {
  const ::geometry::Vector3* p = size_;
  return p != nullptr ? *p : *reinterpret_cast<const ::geometry::Vector3*>(
      &::geometry::_Vector3_default_instance_);
}
inline const ::geometry::Vector3& Object::size() const {
  // @@protoc_insertion_point(field_get:perception.Object.size)
  return _internal_size();
}
inline ::geometry::Vector3* Object::release_size() {
  // @@protoc_insertion_point(field_release:perception.Object.size)
  _has_bits_[0] &= ~0x00000002u;
  ::geometry::Vector3* temp = size_;
  size_ = nullptr;
  return temp;
}
inline ::geometry::Vector3* Object::_internal_mutable_size() {
  _has_bits_[0] |= 0x00000002u;
  if (size_ == nullptr) {
    auto* p = CreateMaybeMessage<::geometry::Vector3>(GetArenaNoVirtual());
    size_ = p;
  }
  return size_;
}
inline ::geometry::Vector3* Object::mutable_size() {
  // @@protoc_insertion_point(field_mutable:perception.Object.size)
  return _internal_mutable_size();
}
inline void Object::set_allocated_size(::geometry::Vector3* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_);
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  size_ = size;
  // @@protoc_insertion_point(field_set_allocated:perception.Object.size)
}

// repeated .geometry.Point contour = 11;
inline int Object::_internal_contour_size() const {
  return contour_.size();
}
inline int Object::contour_size() const {
  return _internal_contour_size();
}
inline ::geometry::Point* Object::mutable_contour(int index) {
  // @@protoc_insertion_point(field_mutable:perception.Object.contour)
  return contour_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::geometry::Point >*
Object::mutable_contour() {
  // @@protoc_insertion_point(field_mutable_list:perception.Object.contour)
  return &contour_;
}
inline const ::geometry::Point& Object::_internal_contour(int index) const {
  return contour_.Get(index);
}
inline const ::geometry::Point& Object::contour(int index) const {
  // @@protoc_insertion_point(field_get:perception.Object.contour)
  return _internal_contour(index);
}
inline ::geometry::Point* Object::_internal_add_contour() {
  return contour_.Add();
}
inline ::geometry::Point* Object::add_contour() {
  // @@protoc_insertion_point(field_add:perception.Object.contour)
  return _internal_add_contour();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::geometry::Point >&
Object::contour() const {
  // @@protoc_insertion_point(field_list:perception.Object.contour)
  return contour_;
}

// -------------------------------------------------------------------

// VisualObject

// optional .perception.Object obj = 1;
inline bool VisualObject::_internal_has_obj() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || obj_ != nullptr);
  return value;
}
inline bool VisualObject::has_obj() const {
  return _internal_has_obj();
}
inline void VisualObject::clear_obj() {
  if (obj_ != nullptr) obj_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::perception::Object& VisualObject::_internal_obj() const {
  const ::perception::Object* p = obj_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::Object*>(
      &::perception::_Object_default_instance_);
}
inline const ::perception::Object& VisualObject::obj() const {
  // @@protoc_insertion_point(field_get:perception.VisualObject.obj)
  return _internal_obj();
}
inline ::perception::Object* VisualObject::release_obj() {
  // @@protoc_insertion_point(field_release:perception.VisualObject.obj)
  _has_bits_[0] &= ~0x00000001u;
  ::perception::Object* temp = obj_;
  obj_ = nullptr;
  return temp;
}
inline ::perception::Object* VisualObject::_internal_mutable_obj() {
  _has_bits_[0] |= 0x00000001u;
  if (obj_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::Object>(GetArenaNoVirtual());
    obj_ = p;
  }
  return obj_;
}
inline ::perception::Object* VisualObject::mutable_obj() {
  // @@protoc_insertion_point(field_mutable:perception.VisualObject.obj)
  return _internal_mutable_obj();
}
inline void VisualObject::set_allocated_obj(::perception::Object* obj) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete obj_;
  }
  if (obj) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      obj = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obj, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  obj_ = obj;
  // @@protoc_insertion_point(field_set_allocated:perception.VisualObject.obj)
}

// optional int32 x = 2;
inline bool VisualObject::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VisualObject::has_x() const {
  return _internal_has_x();
}
inline void VisualObject::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VisualObject::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VisualObject::x() const {
  // @@protoc_insertion_point(field_get:perception.VisualObject.x)
  return _internal_x();
}
inline void VisualObject::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  x_ = value;
}
inline void VisualObject::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:perception.VisualObject.x)
}

// optional int32 y = 3;
inline bool VisualObject::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VisualObject::has_y() const {
  return _internal_has_y();
}
inline void VisualObject::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VisualObject::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VisualObject::y() const {
  // @@protoc_insertion_point(field_get:perception.VisualObject.y)
  return _internal_y();
}
inline void VisualObject::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  y_ = value;
}
inline void VisualObject::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:perception.VisualObject.y)
}

// optional int32 width = 4;
inline bool VisualObject::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VisualObject::has_width() const {
  return _internal_has_width();
}
inline void VisualObject::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VisualObject::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VisualObject::width() const {
  // @@protoc_insertion_point(field_get:perception.VisualObject.width)
  return _internal_width();
}
inline void VisualObject::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  width_ = value;
}
inline void VisualObject::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:perception.VisualObject.width)
}

// optional int32 height = 5;
inline bool VisualObject::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool VisualObject::has_height() const {
  return _internal_has_height();
}
inline void VisualObject::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VisualObject::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VisualObject::height() const {
  // @@protoc_insertion_point(field_get:perception.VisualObject.height)
  return _internal_height();
}
inline void VisualObject::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  height_ = value;
}
inline void VisualObject::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:perception.VisualObject.height)
}

// -------------------------------------------------------------------

// VisualObjects

// optional .common.Header header = 1;
inline bool VisualObjects::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool VisualObjects::has_header() const {
  return _internal_has_header();
}
inline const ::common::Header& VisualObjects::_internal_header() const {
  const ::common::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::Header*>(
      &::common::_Header_default_instance_);
}
inline const ::common::Header& VisualObjects::header() const {
  // @@protoc_insertion_point(field_get:perception.VisualObjects.header)
  return _internal_header();
}
inline ::common::Header* VisualObjects::release_header() {
  // @@protoc_insertion_point(field_release:perception.VisualObjects.header)
  _has_bits_[0] &= ~0x00000001u;
  ::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::Header* VisualObjects::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::common::Header* VisualObjects::mutable_header() {
  // @@protoc_insertion_point(field_mutable:perception.VisualObjects.header)
  return _internal_mutable_header();
}
inline void VisualObjects::set_allocated_header(::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:perception.VisualObjects.header)
}

// repeated .perception.VisualObject objs = 2;
inline int VisualObjects::_internal_objs_size() const {
  return objs_.size();
}
inline int VisualObjects::objs_size() const {
  return _internal_objs_size();
}
inline void VisualObjects::clear_objs() {
  objs_.Clear();
}
inline ::perception::VisualObject* VisualObjects::mutable_objs(int index) {
  // @@protoc_insertion_point(field_mutable:perception.VisualObjects.objs)
  return objs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::VisualObject >*
VisualObjects::mutable_objs() {
  // @@protoc_insertion_point(field_mutable_list:perception.VisualObjects.objs)
  return &objs_;
}
inline const ::perception::VisualObject& VisualObjects::_internal_objs(int index) const {
  return objs_.Get(index);
}
inline const ::perception::VisualObject& VisualObjects::objs(int index) const {
  // @@protoc_insertion_point(field_get:perception.VisualObjects.objs)
  return _internal_objs(index);
}
inline ::perception::VisualObject* VisualObjects::_internal_add_objs() {
  return objs_.Add();
}
inline ::perception::VisualObject* VisualObjects::add_objs() {
  // @@protoc_insertion_point(field_add:perception.VisualObjects.objs)
  return _internal_add_objs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::VisualObject >&
VisualObjects::objs() const {
  // @@protoc_insertion_point(field_list:perception.VisualObjects.objs)
  return objs_;
}

// -------------------------------------------------------------------

// TrackedObject

// optional .perception.Object obj = 1;
inline bool TrackedObject::_internal_has_obj() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || obj_ != nullptr);
  return value;
}
inline bool TrackedObject::has_obj() const {
  return _internal_has_obj();
}
inline void TrackedObject::clear_obj() {
  if (obj_ != nullptr) obj_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::perception::Object& TrackedObject::_internal_obj() const {
  const ::perception::Object* p = obj_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::Object*>(
      &::perception::_Object_default_instance_);
}
inline const ::perception::Object& TrackedObject::obj() const {
  // @@protoc_insertion_point(field_get:perception.TrackedObject.obj)
  return _internal_obj();
}
inline ::perception::Object* TrackedObject::release_obj() {
  // @@protoc_insertion_point(field_release:perception.TrackedObject.obj)
  _has_bits_[0] &= ~0x00000001u;
  ::perception::Object* temp = obj_;
  obj_ = nullptr;
  return temp;
}
inline ::perception::Object* TrackedObject::_internal_mutable_obj() {
  _has_bits_[0] |= 0x00000001u;
  if (obj_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::Object>(GetArenaNoVirtual());
    obj_ = p;
  }
  return obj_;
}
inline ::perception::Object* TrackedObject::mutable_obj() {
  // @@protoc_insertion_point(field_mutable:perception.TrackedObject.obj)
  return _internal_mutable_obj();
}
inline void TrackedObject::set_allocated_obj(::perception::Object* obj) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete obj_;
  }
  if (obj) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      obj = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obj, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  obj_ = obj;
  // @@protoc_insertion_point(field_set_allocated:perception.TrackedObject.obj)
}

// optional float yaw = 2;
inline bool TrackedObject::_internal_has_yaw() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrackedObject::has_yaw() const {
  return _internal_has_yaw();
}
inline void TrackedObject::clear_yaw() {
  yaw_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float TrackedObject::_internal_yaw() const {
  return yaw_;
}
inline float TrackedObject::yaw() const {
  // @@protoc_insertion_point(field_get:perception.TrackedObject.yaw)
  return _internal_yaw();
}
inline void TrackedObject::_internal_set_yaw(float value) {
  _has_bits_[0] |= 0x00000004u;
  yaw_ = value;
}
inline void TrackedObject::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:perception.TrackedObject.yaw)
}

// optional float yaw_rate = 3;
inline bool TrackedObject::_internal_has_yaw_rate() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TrackedObject::has_yaw_rate() const {
  return _internal_has_yaw_rate();
}
inline void TrackedObject::clear_yaw_rate() {
  yaw_rate_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float TrackedObject::_internal_yaw_rate() const {
  return yaw_rate_;
}
inline float TrackedObject::yaw_rate() const {
  // @@protoc_insertion_point(field_get:perception.TrackedObject.yaw_rate)
  return _internal_yaw_rate();
}
inline void TrackedObject::_internal_set_yaw_rate(float value) {
  _has_bits_[0] |= 0x00000008u;
  yaw_rate_ = value;
}
inline void TrackedObject::set_yaw_rate(float value) {
  _internal_set_yaw_rate(value);
  // @@protoc_insertion_point(field_set:perception.TrackedObject.yaw_rate)
}

// optional .geometry.Vector3 velocity = 4;
inline bool TrackedObject::_internal_has_velocity() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || velocity_ != nullptr);
  return value;
}
inline bool TrackedObject::has_velocity() const {
  return _internal_has_velocity();
}
inline const ::geometry::Vector3& TrackedObject::_internal_velocity() const {
  const ::geometry::Vector3* p = velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::geometry::Vector3*>(
      &::geometry::_Vector3_default_instance_);
}
inline const ::geometry::Vector3& TrackedObject::velocity() const {
  // @@protoc_insertion_point(field_get:perception.TrackedObject.velocity)
  return _internal_velocity();
}
inline ::geometry::Vector3* TrackedObject::release_velocity() {
  // @@protoc_insertion_point(field_release:perception.TrackedObject.velocity)
  _has_bits_[0] &= ~0x00000002u;
  ::geometry::Vector3* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::geometry::Vector3* TrackedObject::_internal_mutable_velocity() {
  _has_bits_[0] |= 0x00000002u;
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::geometry::Vector3>(GetArenaNoVirtual());
    velocity_ = p;
  }
  return velocity_;
}
inline ::geometry::Vector3* TrackedObject::mutable_velocity() {
  // @@protoc_insertion_point(field_mutable:perception.TrackedObject.velocity)
  return _internal_mutable_velocity();
}
inline void TrackedObject::set_allocated_velocity(::geometry::Vector3* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:perception.TrackedObject.velocity)
}

// repeated .geometry.Point trace = 5;
inline int TrackedObject::_internal_trace_size() const {
  return trace_.size();
}
inline int TrackedObject::trace_size() const {
  return _internal_trace_size();
}
inline ::geometry::Point* TrackedObject::mutable_trace(int index) {
  // @@protoc_insertion_point(field_mutable:perception.TrackedObject.trace)
  return trace_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::geometry::Point >*
TrackedObject::mutable_trace() {
  // @@protoc_insertion_point(field_mutable_list:perception.TrackedObject.trace)
  return &trace_;
}
inline const ::geometry::Point& TrackedObject::_internal_trace(int index) const {
  return trace_.Get(index);
}
inline const ::geometry::Point& TrackedObject::trace(int index) const {
  // @@protoc_insertion_point(field_get:perception.TrackedObject.trace)
  return _internal_trace(index);
}
inline ::geometry::Point* TrackedObject::_internal_add_trace() {
  return trace_.Add();
}
inline ::geometry::Point* TrackedObject::add_trace() {
  // @@protoc_insertion_point(field_add:perception.TrackedObject.trace)
  return _internal_add_trace();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::geometry::Point >&
TrackedObject::trace() const {
  // @@protoc_insertion_point(field_list:perception.TrackedObject.trace)
  return trace_;
}

// optional float absolute_longitude_v = 6;
inline bool TrackedObject::_internal_has_absolute_longitude_v() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TrackedObject::has_absolute_longitude_v() const {
  return _internal_has_absolute_longitude_v();
}
inline void TrackedObject::clear_absolute_longitude_v() {
  absolute_longitude_v_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float TrackedObject::_internal_absolute_longitude_v() const {
  return absolute_longitude_v_;
}
inline float TrackedObject::absolute_longitude_v() const {
  // @@protoc_insertion_point(field_get:perception.TrackedObject.absolute_longitude_v)
  return _internal_absolute_longitude_v();
}
inline void TrackedObject::_internal_set_absolute_longitude_v(float value) {
  _has_bits_[0] |= 0x00000010u;
  absolute_longitude_v_ = value;
}
inline void TrackedObject::set_absolute_longitude_v(float value) {
  _internal_set_absolute_longitude_v(value);
  // @@protoc_insertion_point(field_set:perception.TrackedObject.absolute_longitude_v)
}

// optional float absolute_longitude_a = 7;
inline bool TrackedObject::_internal_has_absolute_longitude_a() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TrackedObject::has_absolute_longitude_a() const {
  return _internal_has_absolute_longitude_a();
}
inline void TrackedObject::clear_absolute_longitude_a() {
  absolute_longitude_a_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float TrackedObject::_internal_absolute_longitude_a() const {
  return absolute_longitude_a_;
}
inline float TrackedObject::absolute_longitude_a() const {
  // @@protoc_insertion_point(field_get:perception.TrackedObject.absolute_longitude_a)
  return _internal_absolute_longitude_a();
}
inline void TrackedObject::_internal_set_absolute_longitude_a(float value) {
  _has_bits_[0] |= 0x00000020u;
  absolute_longitude_a_ = value;
}
inline void TrackedObject::set_absolute_longitude_a(float value) {
  _internal_set_absolute_longitude_a(value);
  // @@protoc_insertion_point(field_set:perception.TrackedObject.absolute_longitude_a)
}

// optional float absolute_lateral_v = 8;
inline bool TrackedObject::_internal_has_absolute_lateral_v() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TrackedObject::has_absolute_lateral_v() const {
  return _internal_has_absolute_lateral_v();
}
inline void TrackedObject::clear_absolute_lateral_v() {
  absolute_lateral_v_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float TrackedObject::_internal_absolute_lateral_v() const {
  return absolute_lateral_v_;
}
inline float TrackedObject::absolute_lateral_v() const {
  // @@protoc_insertion_point(field_get:perception.TrackedObject.absolute_lateral_v)
  return _internal_absolute_lateral_v();
}
inline void TrackedObject::_internal_set_absolute_lateral_v(float value) {
  _has_bits_[0] |= 0x00000040u;
  absolute_lateral_v_ = value;
}
inline void TrackedObject::set_absolute_lateral_v(float value) {
  _internal_set_absolute_lateral_v(value);
  // @@protoc_insertion_point(field_set:perception.TrackedObject.absolute_lateral_v)
}

// -------------------------------------------------------------------

// TrackedObjects

// optional .common.Header header = 1;
inline bool TrackedObjects::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool TrackedObjects::has_header() const {
  return _internal_has_header();
}
inline const ::common::Header& TrackedObjects::_internal_header() const {
  const ::common::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::Header*>(
      &::common::_Header_default_instance_);
}
inline const ::common::Header& TrackedObjects::header() const {
  // @@protoc_insertion_point(field_get:perception.TrackedObjects.header)
  return _internal_header();
}
inline ::common::Header* TrackedObjects::release_header() {
  // @@protoc_insertion_point(field_release:perception.TrackedObjects.header)
  _has_bits_[0] &= ~0x00000001u;
  ::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::common::Header* TrackedObjects::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::common::Header* TrackedObjects::mutable_header() {
  // @@protoc_insertion_point(field_mutable:perception.TrackedObjects.header)
  return _internal_mutable_header();
}
inline void TrackedObjects::set_allocated_header(::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:perception.TrackedObjects.header)
}

// repeated .perception.TrackedObject objs = 2;
inline int TrackedObjects::_internal_objs_size() const {
  return objs_.size();
}
inline int TrackedObjects::objs_size() const {
  return _internal_objs_size();
}
inline void TrackedObjects::clear_objs() {
  objs_.Clear();
}
inline ::perception::TrackedObject* TrackedObjects::mutable_objs(int index) {
  // @@protoc_insertion_point(field_mutable:perception.TrackedObjects.objs)
  return objs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::TrackedObject >*
TrackedObjects::mutable_objs() {
  // @@protoc_insertion_point(field_mutable_list:perception.TrackedObjects.objs)
  return &objs_;
}
inline const ::perception::TrackedObject& TrackedObjects::_internal_objs(int index) const {
  return objs_.Get(index);
}
inline const ::perception::TrackedObject& TrackedObjects::objs(int index) const {
  // @@protoc_insertion_point(field_get:perception.TrackedObjects.objs)
  return _internal_objs(index);
}
inline ::perception::TrackedObject* TrackedObjects::_internal_add_objs() {
  return objs_.Add();
}
inline ::perception::TrackedObject* TrackedObjects::add_objs() {
  // @@protoc_insertion_point(field_add:perception.TrackedObjects.objs)
  return _internal_add_objs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::TrackedObject >&
TrackedObjects::objs() const {
  // @@protoc_insertion_point(field_list:perception.TrackedObjects.objs)
  return objs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perception::ObjectType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::perception::ObjectType>() {
  return ::perception::ObjectType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_object_2eproto
