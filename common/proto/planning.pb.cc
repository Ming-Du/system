// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning.proto

#include "planning.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace planning {
class PlanningConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlanningConfig> _instance;
} _PlanningConfig_default_instance_;
}  // namespace planning
static void InitDefaultsscc_info_PlanningConfig_planning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::planning::_PlanningConfig_default_instance_;
    new (ptr) ::planning::PlanningConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning::PlanningConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlanningConfig_planning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlanningConfig_planning_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_planning_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_planning_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_planning_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_planning_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::planning::PlanningConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::planning::PlanningConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::planning::PlanningConfig, frequency_),
  PROTOBUF_FIELD_OFFSET(::planning::PlanningConfig, speed_max_),
  PROTOBUF_FIELD_OFFSET(::planning::PlanningConfig, acc_min_),
  PROTOBUF_FIELD_OFFSET(::planning::PlanningConfig, acc_max_),
  PROTOBUF_FIELD_OFFSET(::planning::PlanningConfig, jerk_min_),
  PROTOBUF_FIELD_OFFSET(::planning::PlanningConfig, jerk_max_),
  PROTOBUF_FIELD_OFFSET(::planning::PlanningConfig, time_sample_),
  PROTOBUF_FIELD_OFFSET(::planning::PlanningConfig, path_sample_),
  PROTOBUF_FIELD_OFFSET(::planning::PlanningConfig, safe_long_dis_),
  8,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::planning::PlanningConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::planning::_PlanningConfig_default_instance_),
};

const char descriptor_table_protodef_planning_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016planning.proto\022\010planning\"\275\001\n\016PlanningC"
  "onfig\022\021\n\tfrequency\030\001 \001(\r\022\021\n\tspeed_max\030\002 "
  "\001(\001\022\017\n\007acc_min\030\003 \001(\001\022\017\n\007acc_max\030\004 \001(\001\022\020\n"
  "\010jerk_min\030\005 \001(\001\022\020\n\010jerk_max\030\006 \001(\001\022\023\n\013tim"
  "e_sample\030\007 \001(\001\022\023\n\013path_sample\030\010 \001(\001\022\025\n\rs"
  "afe_long_dis\030\t \001(\001*%\n\014PlanningMode\022\t\n\005LO"
  "CAL\020\000\022\n\n\006GLOBAL\020\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_planning_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_planning_2eproto_sccs[1] = {
  &scc_info_PlanningConfig_planning_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_planning_2eproto_once;
static bool descriptor_table_planning_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_planning_2eproto = {
  &descriptor_table_planning_2eproto_initialized, descriptor_table_protodef_planning_2eproto, "planning.proto", 257,
  &descriptor_table_planning_2eproto_once, descriptor_table_planning_2eproto_sccs, descriptor_table_planning_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_planning_2eproto::offsets,
  file_level_metadata_planning_2eproto, 1, file_level_enum_descriptors_planning_2eproto, file_level_service_descriptors_planning_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_planning_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_planning_2eproto), true);
namespace planning {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlanningMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_planning_2eproto);
  return file_level_enum_descriptors_planning_2eproto[0];
}
bool PlanningMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PlanningConfig::InitAsDefaultInstance() {
}
class PlanningConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PlanningConfig>()._has_bits_);
  static void set_has_frequency(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_speed_max(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_acc_min(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_acc_max(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_jerk_min(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_jerk_max(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_time_sample(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_path_sample(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_safe_long_dis(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

PlanningConfig::PlanningConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning.PlanningConfig)
}
PlanningConfig::PlanningConfig(const PlanningConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&speed_max_, &from.speed_max_,
    static_cast<size_t>(reinterpret_cast<char*>(&frequency_) -
    reinterpret_cast<char*>(&speed_max_)) + sizeof(frequency_));
  // @@protoc_insertion_point(copy_constructor:planning.PlanningConfig)
}

void PlanningConfig::SharedCtor() {
  ::memset(&speed_max_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frequency_) -
      reinterpret_cast<char*>(&speed_max_)) + sizeof(frequency_));
}

PlanningConfig::~PlanningConfig() {
  // @@protoc_insertion_point(destructor:planning.PlanningConfig)
  SharedDtor();
}

void PlanningConfig::SharedDtor() {
}

void PlanningConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlanningConfig& PlanningConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlanningConfig_planning_2eproto.base);
  return *internal_default_instance();
}


void PlanningConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:planning.PlanningConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&speed_max_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&safe_long_dis_) -
        reinterpret_cast<char*>(&speed_max_)) + sizeof(safe_long_dis_));
  }
  frequency_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PlanningConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 frequency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_frequency(&has_bits);
          frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double speed_max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_speed_max(&has_bits);
          speed_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acc_min = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_acc_min(&has_bits);
          acc_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acc_max = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_acc_max(&has_bits);
          acc_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double jerk_min = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_jerk_min(&has_bits);
          jerk_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double jerk_max = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_jerk_max(&has_bits);
          jerk_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double time_sample = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_time_sample(&has_bits);
          time_sample_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double path_sample = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_path_sample(&has_bits);
          path_sample_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double safe_long_dis = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_safe_long_dis(&has_bits);
          safe_long_dis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlanningConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:planning.PlanningConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 frequency = 1;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_frequency(), target);
  }

  // optional double speed_max = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_speed_max(), target);
  }

  // optional double acc_min = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_acc_min(), target);
  }

  // optional double acc_max = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_acc_max(), target);
  }

  // optional double jerk_min = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_jerk_min(), target);
  }

  // optional double jerk_max = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_jerk_max(), target);
  }

  // optional double time_sample = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_time_sample(), target);
  }

  // optional double path_sample = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_path_sample(), target);
  }

  // optional double safe_long_dis = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_safe_long_dis(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning.PlanningConfig)
  return target;
}

size_t PlanningConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning.PlanningConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double speed_max = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double acc_min = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double acc_max = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double jerk_min = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double jerk_max = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double time_sample = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double path_sample = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double safe_long_dis = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  // optional uint32 frequency = 1;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frequency());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlanningConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning.PlanningConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanningConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlanningConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning.PlanningConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning.PlanningConfig)
    MergeFrom(*source);
  }
}

void PlanningConfig::MergeFrom(const PlanningConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning.PlanningConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      speed_max_ = from.speed_max_;
    }
    if (cached_has_bits & 0x00000002u) {
      acc_min_ = from.acc_min_;
    }
    if (cached_has_bits & 0x00000004u) {
      acc_max_ = from.acc_max_;
    }
    if (cached_has_bits & 0x00000008u) {
      jerk_min_ = from.jerk_min_;
    }
    if (cached_has_bits & 0x00000010u) {
      jerk_max_ = from.jerk_max_;
    }
    if (cached_has_bits & 0x00000020u) {
      time_sample_ = from.time_sample_;
    }
    if (cached_has_bits & 0x00000040u) {
      path_sample_ = from.path_sample_;
    }
    if (cached_has_bits & 0x00000080u) {
      safe_long_dis_ = from.safe_long_dis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_frequency(from._internal_frequency());
  }
}

void PlanningConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning.PlanningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningConfig::CopyFrom(const PlanningConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning.PlanningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningConfig::IsInitialized() const {
  return true;
}

void PlanningConfig::InternalSwap(PlanningConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(speed_max_, other->speed_max_);
  swap(acc_min_, other->acc_min_);
  swap(acc_max_, other->acc_max_);
  swap(jerk_min_, other->jerk_min_);
  swap(jerk_max_, other->jerk_max_);
  swap(time_sample_, other->time_sample_);
  swap(path_sample_, other->path_sample_);
  swap(safe_long_dis_, other->safe_long_dis_);
  swap(frequency_, other->frequency_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanningConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::planning::PlanningConfig* Arena::CreateMaybeMessage< ::planning::PlanningConfig >(Arena* arena) {
  return Arena::CreateInternal< ::planning::PlanningConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
