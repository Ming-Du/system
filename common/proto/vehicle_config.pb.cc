// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "vehicle_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace chassis {

namespace {

const ::google::protobuf::Descriptor* VehicleConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VehicleConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_vehicle_5fconfig_2eproto() {
  protobuf_AddDesc_vehicle_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "vehicle_config.proto");
  GOOGLE_CHECK(file != NULL);
  VehicleConfig_descriptor_ = file->message_type(0);
  static const int VehicleConfig_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleConfig, vin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleConfig, plate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleConfig, brand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleConfig, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleConfig, widht_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleConfig, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleConfig, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleConfig, accel_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleConfig, accel_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleConfig, steering_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleConfig, steering_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleConfig, wheel_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleConfig, front_wheel_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleConfig, rear_wheel_base_),
  };
  VehicleConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VehicleConfig_descriptor_,
      VehicleConfig::default_instance_,
      VehicleConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VehicleConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_vehicle_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VehicleConfig_descriptor_, &VehicleConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_vehicle_5fconfig_2eproto() {
  delete VehicleConfig::default_instance_;
  delete VehicleConfig_reflection_;
}

void protobuf_AddDesc_vehicle_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::common::protobuf_AddDesc_header_2eproto();
  ::chassis::protobuf_AddDesc_chassis_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024vehicle_config.proto\022\007chassis\032\014header."
    "proto\032\rchassis.proto\"\222\002\n\rVehicleConfig\022\013"
    "\n\003vin\030\001 \001(\t\022\r\n\005plate\030\002 \001(\t\022\r\n\005brand\030\003 \001("
    "\t\022\016\n\006length\030\006 \001(\002\022\r\n\005widht\030\007 \001(\002\022\016\n\006heig"
    "ht\030\010 \001(\002\022\016\n\006weight\030\t \001(\002\022\021\n\taccel_min\030\n "
    "\001(\002\022\021\n\taccel_max\030\013 \001(\002\022\024\n\014steering_min\030\014"
    " \001(\002\022\024\n\014steering_max\030\r \001(\002\022\022\n\nwheel_base"
    "\030\016 \001(\002\022\030\n\020front_wheel_base\030\017 \001(\002\022\027\n\017rear"
    "_wheel_base\030\020 \001(\002", 337);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vehicle_config.proto", &protobuf_RegisterTypes);
  VehicleConfig::default_instance_ = new VehicleConfig();
  VehicleConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_vehicle_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_vehicle_5fconfig_2eproto {
  StaticDescriptorInitializer_vehicle_5fconfig_2eproto() {
    protobuf_AddDesc_vehicle_5fconfig_2eproto();
  }
} static_descriptor_initializer_vehicle_5fconfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int VehicleConfig::kVinFieldNumber;
const int VehicleConfig::kPlateFieldNumber;
const int VehicleConfig::kBrandFieldNumber;
const int VehicleConfig::kLengthFieldNumber;
const int VehicleConfig::kWidhtFieldNumber;
const int VehicleConfig::kHeightFieldNumber;
const int VehicleConfig::kWeightFieldNumber;
const int VehicleConfig::kAccelMinFieldNumber;
const int VehicleConfig::kAccelMaxFieldNumber;
const int VehicleConfig::kSteeringMinFieldNumber;
const int VehicleConfig::kSteeringMaxFieldNumber;
const int VehicleConfig::kWheelBaseFieldNumber;
const int VehicleConfig::kFrontWheelBaseFieldNumber;
const int VehicleConfig::kRearWheelBaseFieldNumber;
#endif  // !_MSC_VER

VehicleConfig::VehicleConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chassis.VehicleConfig)
}

void VehicleConfig::InitAsDefaultInstance() {
}

VehicleConfig::VehicleConfig(const VehicleConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chassis.VehicleConfig)
}

void VehicleConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  vin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  length_ = 0;
  widht_ = 0;
  height_ = 0;
  weight_ = 0;
  accel_min_ = 0;
  accel_max_ = 0;
  steering_min_ = 0;
  steering_max_ = 0;
  wheel_base_ = 0;
  front_wheel_base_ = 0;
  rear_wheel_base_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VehicleConfig::~VehicleConfig() {
  // @@protoc_insertion_point(destructor:chassis.VehicleConfig)
  SharedDtor();
}

void VehicleConfig::SharedDtor() {
  if (vin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vin_;
  }
  if (plate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete plate_;
  }
  if (brand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete brand_;
  }
  if (this != default_instance_) {
  }
}

void VehicleConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleConfig_descriptor_;
}

const VehicleConfig& VehicleConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vehicle_5fconfig_2eproto();
  return *default_instance_;
}

VehicleConfig* VehicleConfig::default_instance_ = NULL;

VehicleConfig* VehicleConfig::New() const {
  return new VehicleConfig;
}

void VehicleConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VehicleConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(length_, accel_min_);
    if (has_vin()) {
      if (vin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vin_->clear();
      }
    }
    if (has_plate()) {
      if (plate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        plate_->clear();
      }
    }
    if (has_brand()) {
      if (brand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        brand_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(accel_max_, rear_wheel_base_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VehicleConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chassis.VehicleConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string vin = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vin().data(), this->vin().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vin");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_plate;
        break;
      }

      // optional string plate = 2;
      case 2: {
        if (tag == 18) {
         parse_plate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->plate().data(), this->plate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "plate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_brand;
        break;
      }

      // optional string brand = 3;
      case 3: {
        if (tag == 26) {
         parse_brand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brand()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->brand().data(), this->brand().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brand");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_length;
        break;
      }

      // optional float length = 6;
      case 6: {
        if (tag == 53) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_widht;
        break;
      }

      // optional float widht = 7;
      case 7: {
        if (tag == 61) {
         parse_widht:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &widht_)));
          set_has_widht();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_height;
        break;
      }

      // optional float height = 8;
      case 8: {
        if (tag == 69) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_weight;
        break;
      }

      // optional float weight = 9;
      case 9: {
        if (tag == 77) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_accel_min;
        break;
      }

      // optional float accel_min = 10;
      case 10: {
        if (tag == 85) {
         parse_accel_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accel_min_)));
          set_has_accel_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_accel_max;
        break;
      }

      // optional float accel_max = 11;
      case 11: {
        if (tag == 93) {
         parse_accel_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accel_max_)));
          set_has_accel_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_steering_min;
        break;
      }

      // optional float steering_min = 12;
      case 12: {
        if (tag == 101) {
         parse_steering_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steering_min_)));
          set_has_steering_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_steering_max;
        break;
      }

      // optional float steering_max = 13;
      case 13: {
        if (tag == 109) {
         parse_steering_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steering_max_)));
          set_has_steering_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_wheel_base;
        break;
      }

      // optional float wheel_base = 14;
      case 14: {
        if (tag == 117) {
         parse_wheel_base:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheel_base_)));
          set_has_wheel_base();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_front_wheel_base;
        break;
      }

      // optional float front_wheel_base = 15;
      case 15: {
        if (tag == 125) {
         parse_front_wheel_base:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &front_wheel_base_)));
          set_has_front_wheel_base();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(133)) goto parse_rear_wheel_base;
        break;
      }

      // optional float rear_wheel_base = 16;
      case 16: {
        if (tag == 133) {
         parse_rear_wheel_base:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rear_wheel_base_)));
          set_has_rear_wheel_base();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chassis.VehicleConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chassis.VehicleConfig)
  return false;
#undef DO_
}

void VehicleConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chassis.VehicleConfig)
  // optional string vin = 1;
  if (has_vin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vin().data(), this->vin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->vin(), output);
  }

  // optional string plate = 2;
  if (has_plate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->plate().data(), this->plate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "plate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->plate(), output);
  }

  // optional string brand = 3;
  if (has_brand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brand().data(), this->brand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brand");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->brand(), output);
  }

  // optional float length = 6;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->length(), output);
  }

  // optional float widht = 7;
  if (has_widht()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->widht(), output);
  }

  // optional float height = 8;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->height(), output);
  }

  // optional float weight = 9;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->weight(), output);
  }

  // optional float accel_min = 10;
  if (has_accel_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->accel_min(), output);
  }

  // optional float accel_max = 11;
  if (has_accel_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->accel_max(), output);
  }

  // optional float steering_min = 12;
  if (has_steering_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->steering_min(), output);
  }

  // optional float steering_max = 13;
  if (has_steering_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->steering_max(), output);
  }

  // optional float wheel_base = 14;
  if (has_wheel_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->wheel_base(), output);
  }

  // optional float front_wheel_base = 15;
  if (has_front_wheel_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->front_wheel_base(), output);
  }

  // optional float rear_wheel_base = 16;
  if (has_rear_wheel_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->rear_wheel_base(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chassis.VehicleConfig)
}

::google::protobuf::uint8* VehicleConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chassis.VehicleConfig)
  // optional string vin = 1;
  if (has_vin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vin().data(), this->vin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->vin(), target);
  }

  // optional string plate = 2;
  if (has_plate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->plate().data(), this->plate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "plate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->plate(), target);
  }

  // optional string brand = 3;
  if (has_brand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brand().data(), this->brand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brand");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->brand(), target);
  }

  // optional float length = 6;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->length(), target);
  }

  // optional float widht = 7;
  if (has_widht()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->widht(), target);
  }

  // optional float height = 8;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->height(), target);
  }

  // optional float weight = 9;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->weight(), target);
  }

  // optional float accel_min = 10;
  if (has_accel_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->accel_min(), target);
  }

  // optional float accel_max = 11;
  if (has_accel_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->accel_max(), target);
  }

  // optional float steering_min = 12;
  if (has_steering_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->steering_min(), target);
  }

  // optional float steering_max = 13;
  if (has_steering_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->steering_max(), target);
  }

  // optional float wheel_base = 14;
  if (has_wheel_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->wheel_base(), target);
  }

  // optional float front_wheel_base = 15;
  if (has_front_wheel_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->front_wheel_base(), target);
  }

  // optional float rear_wheel_base = 16;
  if (has_rear_wheel_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->rear_wheel_base(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chassis.VehicleConfig)
  return target;
}

int VehicleConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string vin = 1;
    if (has_vin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vin());
    }

    // optional string plate = 2;
    if (has_plate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->plate());
    }

    // optional string brand = 3;
    if (has_brand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brand());
    }

    // optional float length = 6;
    if (has_length()) {
      total_size += 1 + 4;
    }

    // optional float widht = 7;
    if (has_widht()) {
      total_size += 1 + 4;
    }

    // optional float height = 8;
    if (has_height()) {
      total_size += 1 + 4;
    }

    // optional float weight = 9;
    if (has_weight()) {
      total_size += 1 + 4;
    }

    // optional float accel_min = 10;
    if (has_accel_min()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float accel_max = 11;
    if (has_accel_max()) {
      total_size += 1 + 4;
    }

    // optional float steering_min = 12;
    if (has_steering_min()) {
      total_size += 1 + 4;
    }

    // optional float steering_max = 13;
    if (has_steering_max()) {
      total_size += 1 + 4;
    }

    // optional float wheel_base = 14;
    if (has_wheel_base()) {
      total_size += 1 + 4;
    }

    // optional float front_wheel_base = 15;
    if (has_front_wheel_base()) {
      total_size += 1 + 4;
    }

    // optional float rear_wheel_base = 16;
    if (has_rear_wheel_base()) {
      total_size += 2 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VehicleConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VehicleConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VehicleConfig::MergeFrom(const VehicleConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vin()) {
      set_vin(from.vin());
    }
    if (from.has_plate()) {
      set_plate(from.plate());
    }
    if (from.has_brand()) {
      set_brand(from.brand());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_widht()) {
      set_widht(from.widht());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_accel_min()) {
      set_accel_min(from.accel_min());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_accel_max()) {
      set_accel_max(from.accel_max());
    }
    if (from.has_steering_min()) {
      set_steering_min(from.steering_min());
    }
    if (from.has_steering_max()) {
      set_steering_max(from.steering_max());
    }
    if (from.has_wheel_base()) {
      set_wheel_base(from.wheel_base());
    }
    if (from.has_front_wheel_base()) {
      set_front_wheel_base(from.front_wheel_base());
    }
    if (from.has_rear_wheel_base()) {
      set_rear_wheel_base(from.rear_wheel_base());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VehicleConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleConfig::CopyFrom(const VehicleConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleConfig::IsInitialized() const {

  return true;
}

void VehicleConfig::Swap(VehicleConfig* other) {
  if (other != this) {
    std::swap(vin_, other->vin_);
    std::swap(plate_, other->plate_);
    std::swap(brand_, other->brand_);
    std::swap(length_, other->length_);
    std::swap(widht_, other->widht_);
    std::swap(height_, other->height_);
    std::swap(weight_, other->weight_);
    std::swap(accel_min_, other->accel_min_);
    std::swap(accel_max_, other->accel_max_);
    std::swap(steering_min_, other->steering_min_);
    std::swap(steering_max_, other->steering_max_);
    std::swap(wheel_base_, other->wheel_base_);
    std::swap(front_wheel_base_, other->front_wheel_base_);
    std::swap(rear_wheel_base_, other->rear_wheel_base_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VehicleConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VehicleConfig_descriptor_;
  metadata.reflection = VehicleConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace chassis

// @@protoc_insertion_point(global_scope)
