// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vehicle_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vehicle_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
#include "chassis.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vehicle_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vehicle_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vehicle_5fconfig_2eproto;
namespace chassis {
class VehicleConfig;
class VehicleConfigDefaultTypeInternal;
extern VehicleConfigDefaultTypeInternal _VehicleConfig_default_instance_;
}  // namespace chassis
PROTOBUF_NAMESPACE_OPEN
template<> ::chassis::VehicleConfig* Arena::CreateMaybeMessage<::chassis::VehicleConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chassis {

// ===================================================================

class VehicleConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chassis.VehicleConfig) */ {
 public:
  VehicleConfig();
  virtual ~VehicleConfig();

  VehicleConfig(const VehicleConfig& from);
  VehicleConfig(VehicleConfig&& from) noexcept
    : VehicleConfig() {
    *this = ::std::move(from);
  }

  inline VehicleConfig& operator=(const VehicleConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleConfig& operator=(VehicleConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VehicleConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleConfig* internal_default_instance() {
    return reinterpret_cast<const VehicleConfig*>(
               &_VehicleConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VehicleConfig& a, VehicleConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehicleConfig* New() const final {
    return CreateMaybeMessage<VehicleConfig>(nullptr);
  }

  VehicleConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VehicleConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VehicleConfig& from);
  void MergeFrom(const VehicleConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chassis.VehicleConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vehicle_5fconfig_2eproto);
    return ::descriptor_table_vehicle_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVinFieldNumber = 1,
    kPlateFieldNumber = 2,
    kBrandFieldNumber = 3,
    kLengthFieldNumber = 6,
    kWidthFieldNumber = 7,
    kHeightFieldNumber = 8,
    kWeightFieldNumber = 9,
    kAccelMinFieldNumber = 10,
    kAccelMaxFieldNumber = 11,
    kSteeringMinFieldNumber = 12,
    kSteeringMaxFieldNumber = 13,
    kWheelBaseFieldNumber = 14,
    kFrontWheelBaseFieldNumber = 15,
    kRearWheelBaseFieldNumber = 16,
  };
  // optional string vin = 1;
  bool has_vin() const;
  private:
  bool _internal_has_vin() const;
  public:
  void clear_vin();
  const std::string& vin() const;
  void set_vin(const std::string& value);
  void set_vin(std::string&& value);
  void set_vin(const char* value);
  void set_vin(const char* value, size_t size);
  std::string* mutable_vin();
  std::string* release_vin();
  void set_allocated_vin(std::string* vin);
  private:
  const std::string& _internal_vin() const;
  void _internal_set_vin(const std::string& value);
  std::string* _internal_mutable_vin();
  public:

  // optional string plate = 2;
  bool has_plate() const;
  private:
  bool _internal_has_plate() const;
  public:
  void clear_plate();
  const std::string& plate() const;
  void set_plate(const std::string& value);
  void set_plate(std::string&& value);
  void set_plate(const char* value);
  void set_plate(const char* value, size_t size);
  std::string* mutable_plate();
  std::string* release_plate();
  void set_allocated_plate(std::string* plate);
  private:
  const std::string& _internal_plate() const;
  void _internal_set_plate(const std::string& value);
  std::string* _internal_mutable_plate();
  public:

  // optional string brand = 3;
  bool has_brand() const;
  private:
  bool _internal_has_brand() const;
  public:
  void clear_brand();
  const std::string& brand() const;
  void set_brand(const std::string& value);
  void set_brand(std::string&& value);
  void set_brand(const char* value);
  void set_brand(const char* value, size_t size);
  std::string* mutable_brand();
  std::string* release_brand();
  void set_allocated_brand(std::string* brand);
  private:
  const std::string& _internal_brand() const;
  void _internal_set_brand(const std::string& value);
  std::string* _internal_mutable_brand();
  public:

  // optional float length = 6;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  float length() const;
  void set_length(float value);
  private:
  float _internal_length() const;
  void _internal_set_length(float value);
  public:

  // optional float width = 7;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  float width() const;
  void set_width(float value);
  private:
  float _internal_width() const;
  void _internal_set_width(float value);
  public:

  // optional float height = 8;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // optional float weight = 9;
  bool has_weight() const;
  private:
  bool _internal_has_weight() const;
  public:
  void clear_weight();
  float weight() const;
  void set_weight(float value);
  private:
  float _internal_weight() const;
  void _internal_set_weight(float value);
  public:

  // optional float accel_min = 10;
  bool has_accel_min() const;
  private:
  bool _internal_has_accel_min() const;
  public:
  void clear_accel_min();
  float accel_min() const;
  void set_accel_min(float value);
  private:
  float _internal_accel_min() const;
  void _internal_set_accel_min(float value);
  public:

  // optional float accel_max = 11;
  bool has_accel_max() const;
  private:
  bool _internal_has_accel_max() const;
  public:
  void clear_accel_max();
  float accel_max() const;
  void set_accel_max(float value);
  private:
  float _internal_accel_max() const;
  void _internal_set_accel_max(float value);
  public:

  // optional float steering_min = 12;
  bool has_steering_min() const;
  private:
  bool _internal_has_steering_min() const;
  public:
  void clear_steering_min();
  float steering_min() const;
  void set_steering_min(float value);
  private:
  float _internal_steering_min() const;
  void _internal_set_steering_min(float value);
  public:

  // optional float steering_max = 13;
  bool has_steering_max() const;
  private:
  bool _internal_has_steering_max() const;
  public:
  void clear_steering_max();
  float steering_max() const;
  void set_steering_max(float value);
  private:
  float _internal_steering_max() const;
  void _internal_set_steering_max(float value);
  public:

  // optional float wheel_base = 14;
  bool has_wheel_base() const;
  private:
  bool _internal_has_wheel_base() const;
  public:
  void clear_wheel_base();
  float wheel_base() const;
  void set_wheel_base(float value);
  private:
  float _internal_wheel_base() const;
  void _internal_set_wheel_base(float value);
  public:

  // optional float front_wheel_base = 15;
  bool has_front_wheel_base() const;
  private:
  bool _internal_has_front_wheel_base() const;
  public:
  void clear_front_wheel_base();
  float front_wheel_base() const;
  void set_front_wheel_base(float value);
  private:
  float _internal_front_wheel_base() const;
  void _internal_set_front_wheel_base(float value);
  public:

  // optional float rear_wheel_base = 16;
  bool has_rear_wheel_base() const;
  private:
  bool _internal_has_rear_wheel_base() const;
  public:
  void clear_rear_wheel_base();
  float rear_wheel_base() const;
  void set_rear_wheel_base(float value);
  private:
  float _internal_rear_wheel_base() const;
  void _internal_set_rear_wheel_base(float value);
  public:

  // @@protoc_insertion_point(class_scope:chassis.VehicleConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr brand_;
  float length_;
  float width_;
  float height_;
  float weight_;
  float accel_min_;
  float accel_max_;
  float steering_min_;
  float steering_max_;
  float wheel_base_;
  float front_wheel_base_;
  float rear_wheel_base_;
  friend struct ::TableStruct_vehicle_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VehicleConfig

// optional string vin = 1;
inline bool VehicleConfig::_internal_has_vin() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VehicleConfig::has_vin() const {
  return _internal_has_vin();
}
inline void VehicleConfig::clear_vin() {
  vin_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VehicleConfig::vin() const {
  // @@protoc_insertion_point(field_get:chassis.VehicleConfig.vin)
  return _internal_vin();
}
inline void VehicleConfig::set_vin(const std::string& value) {
  _internal_set_vin(value);
  // @@protoc_insertion_point(field_set:chassis.VehicleConfig.vin)
}
inline std::string* VehicleConfig::mutable_vin() {
  // @@protoc_insertion_point(field_mutable:chassis.VehicleConfig.vin)
  return _internal_mutable_vin();
}
inline const std::string& VehicleConfig::_internal_vin() const {
  return vin_.GetNoArena();
}
inline void VehicleConfig::_internal_set_vin(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  vin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VehicleConfig::set_vin(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  vin_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chassis.VehicleConfig.vin)
}
inline void VehicleConfig::set_vin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  vin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chassis.VehicleConfig.vin)
}
inline void VehicleConfig::set_vin(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  vin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chassis.VehicleConfig.vin)
}
inline std::string* VehicleConfig::_internal_mutable_vin() {
  _has_bits_[0] |= 0x00000001u;
  return vin_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VehicleConfig::release_vin() {
  // @@protoc_insertion_point(field_release:chassis.VehicleConfig.vin)
  if (!_internal_has_vin()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return vin_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleConfig::set_allocated_vin(std::string* vin) {
  if (vin != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  vin_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vin);
  // @@protoc_insertion_point(field_set_allocated:chassis.VehicleConfig.vin)
}

// optional string plate = 2;
inline bool VehicleConfig::_internal_has_plate() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VehicleConfig::has_plate() const {
  return _internal_has_plate();
}
inline void VehicleConfig::clear_plate() {
  plate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& VehicleConfig::plate() const {
  // @@protoc_insertion_point(field_get:chassis.VehicleConfig.plate)
  return _internal_plate();
}
inline void VehicleConfig::set_plate(const std::string& value) {
  _internal_set_plate(value);
  // @@protoc_insertion_point(field_set:chassis.VehicleConfig.plate)
}
inline std::string* VehicleConfig::mutable_plate() {
  // @@protoc_insertion_point(field_mutable:chassis.VehicleConfig.plate)
  return _internal_mutable_plate();
}
inline const std::string& VehicleConfig::_internal_plate() const {
  return plate_.GetNoArena();
}
inline void VehicleConfig::_internal_set_plate(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  plate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VehicleConfig::set_plate(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  plate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chassis.VehicleConfig.plate)
}
inline void VehicleConfig::set_plate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  plate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chassis.VehicleConfig.plate)
}
inline void VehicleConfig::set_plate(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  plate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chassis.VehicleConfig.plate)
}
inline std::string* VehicleConfig::_internal_mutable_plate() {
  _has_bits_[0] |= 0x00000002u;
  return plate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VehicleConfig::release_plate() {
  // @@protoc_insertion_point(field_release:chassis.VehicleConfig.plate)
  if (!_internal_has_plate()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return plate_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleConfig::set_allocated_plate(std::string* plate) {
  if (plate != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  plate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plate);
  // @@protoc_insertion_point(field_set_allocated:chassis.VehicleConfig.plate)
}

// optional string brand = 3;
inline bool VehicleConfig::_internal_has_brand() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VehicleConfig::has_brand() const {
  return _internal_has_brand();
}
inline void VehicleConfig::clear_brand() {
  brand_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& VehicleConfig::brand() const {
  // @@protoc_insertion_point(field_get:chassis.VehicleConfig.brand)
  return _internal_brand();
}
inline void VehicleConfig::set_brand(const std::string& value) {
  _internal_set_brand(value);
  // @@protoc_insertion_point(field_set:chassis.VehicleConfig.brand)
}
inline std::string* VehicleConfig::mutable_brand() {
  // @@protoc_insertion_point(field_mutable:chassis.VehicleConfig.brand)
  return _internal_mutable_brand();
}
inline const std::string& VehicleConfig::_internal_brand() const {
  return brand_.GetNoArena();
}
inline void VehicleConfig::_internal_set_brand(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  brand_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VehicleConfig::set_brand(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  brand_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chassis.VehicleConfig.brand)
}
inline void VehicleConfig::set_brand(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  brand_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chassis.VehicleConfig.brand)
}
inline void VehicleConfig::set_brand(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  brand_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chassis.VehicleConfig.brand)
}
inline std::string* VehicleConfig::_internal_mutable_brand() {
  _has_bits_[0] |= 0x00000004u;
  return brand_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VehicleConfig::release_brand() {
  // @@protoc_insertion_point(field_release:chassis.VehicleConfig.brand)
  if (!_internal_has_brand()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return brand_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleConfig::set_allocated_brand(std::string* brand) {
  if (brand != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  brand_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), brand);
  // @@protoc_insertion_point(field_set_allocated:chassis.VehicleConfig.brand)
}

// optional float length = 6;
inline bool VehicleConfig::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VehicleConfig::has_length() const {
  return _internal_has_length();
}
inline void VehicleConfig::clear_length() {
  length_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float VehicleConfig::_internal_length() const {
  return length_;
}
inline float VehicleConfig::length() const {
  // @@protoc_insertion_point(field_get:chassis.VehicleConfig.length)
  return _internal_length();
}
inline void VehicleConfig::_internal_set_length(float value) {
  _has_bits_[0] |= 0x00000008u;
  length_ = value;
}
inline void VehicleConfig::set_length(float value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:chassis.VehicleConfig.length)
}

// optional float width = 7;
inline bool VehicleConfig::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool VehicleConfig::has_width() const {
  return _internal_has_width();
}
inline void VehicleConfig::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float VehicleConfig::_internal_width() const {
  return width_;
}
inline float VehicleConfig::width() const {
  // @@protoc_insertion_point(field_get:chassis.VehicleConfig.width)
  return _internal_width();
}
inline void VehicleConfig::_internal_set_width(float value) {
  _has_bits_[0] |= 0x00000010u;
  width_ = value;
}
inline void VehicleConfig::set_width(float value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:chassis.VehicleConfig.width)
}

// optional float height = 8;
inline bool VehicleConfig::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool VehicleConfig::has_height() const {
  return _internal_has_height();
}
inline void VehicleConfig::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float VehicleConfig::_internal_height() const {
  return height_;
}
inline float VehicleConfig::height() const {
  // @@protoc_insertion_point(field_get:chassis.VehicleConfig.height)
  return _internal_height();
}
inline void VehicleConfig::_internal_set_height(float value) {
  _has_bits_[0] |= 0x00000020u;
  height_ = value;
}
inline void VehicleConfig::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:chassis.VehicleConfig.height)
}

// optional float weight = 9;
inline bool VehicleConfig::_internal_has_weight() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool VehicleConfig::has_weight() const {
  return _internal_has_weight();
}
inline void VehicleConfig::clear_weight() {
  weight_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float VehicleConfig::_internal_weight() const {
  return weight_;
}
inline float VehicleConfig::weight() const {
  // @@protoc_insertion_point(field_get:chassis.VehicleConfig.weight)
  return _internal_weight();
}
inline void VehicleConfig::_internal_set_weight(float value) {
  _has_bits_[0] |= 0x00000040u;
  weight_ = value;
}
inline void VehicleConfig::set_weight(float value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:chassis.VehicleConfig.weight)
}

// optional float accel_min = 10;
inline bool VehicleConfig::_internal_has_accel_min() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool VehicleConfig::has_accel_min() const {
  return _internal_has_accel_min();
}
inline void VehicleConfig::clear_accel_min() {
  accel_min_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float VehicleConfig::_internal_accel_min() const {
  return accel_min_;
}
inline float VehicleConfig::accel_min() const {
  // @@protoc_insertion_point(field_get:chassis.VehicleConfig.accel_min)
  return _internal_accel_min();
}
inline void VehicleConfig::_internal_set_accel_min(float value) {
  _has_bits_[0] |= 0x00000080u;
  accel_min_ = value;
}
inline void VehicleConfig::set_accel_min(float value) {
  _internal_set_accel_min(value);
  // @@protoc_insertion_point(field_set:chassis.VehicleConfig.accel_min)
}

// optional float accel_max = 11;
inline bool VehicleConfig::_internal_has_accel_max() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool VehicleConfig::has_accel_max() const {
  return _internal_has_accel_max();
}
inline void VehicleConfig::clear_accel_max() {
  accel_max_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float VehicleConfig::_internal_accel_max() const {
  return accel_max_;
}
inline float VehicleConfig::accel_max() const {
  // @@protoc_insertion_point(field_get:chassis.VehicleConfig.accel_max)
  return _internal_accel_max();
}
inline void VehicleConfig::_internal_set_accel_max(float value) {
  _has_bits_[0] |= 0x00000100u;
  accel_max_ = value;
}
inline void VehicleConfig::set_accel_max(float value) {
  _internal_set_accel_max(value);
  // @@protoc_insertion_point(field_set:chassis.VehicleConfig.accel_max)
}

// optional float steering_min = 12;
inline bool VehicleConfig::_internal_has_steering_min() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool VehicleConfig::has_steering_min() const {
  return _internal_has_steering_min();
}
inline void VehicleConfig::clear_steering_min() {
  steering_min_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float VehicleConfig::_internal_steering_min() const {
  return steering_min_;
}
inline float VehicleConfig::steering_min() const {
  // @@protoc_insertion_point(field_get:chassis.VehicleConfig.steering_min)
  return _internal_steering_min();
}
inline void VehicleConfig::_internal_set_steering_min(float value) {
  _has_bits_[0] |= 0x00000200u;
  steering_min_ = value;
}
inline void VehicleConfig::set_steering_min(float value) {
  _internal_set_steering_min(value);
  // @@protoc_insertion_point(field_set:chassis.VehicleConfig.steering_min)
}

// optional float steering_max = 13;
inline bool VehicleConfig::_internal_has_steering_max() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool VehicleConfig::has_steering_max() const {
  return _internal_has_steering_max();
}
inline void VehicleConfig::clear_steering_max() {
  steering_max_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float VehicleConfig::_internal_steering_max() const {
  return steering_max_;
}
inline float VehicleConfig::steering_max() const {
  // @@protoc_insertion_point(field_get:chassis.VehicleConfig.steering_max)
  return _internal_steering_max();
}
inline void VehicleConfig::_internal_set_steering_max(float value) {
  _has_bits_[0] |= 0x00000400u;
  steering_max_ = value;
}
inline void VehicleConfig::set_steering_max(float value) {
  _internal_set_steering_max(value);
  // @@protoc_insertion_point(field_set:chassis.VehicleConfig.steering_max)
}

// optional float wheel_base = 14;
inline bool VehicleConfig::_internal_has_wheel_base() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool VehicleConfig::has_wheel_base() const {
  return _internal_has_wheel_base();
}
inline void VehicleConfig::clear_wheel_base() {
  wheel_base_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float VehicleConfig::_internal_wheel_base() const {
  return wheel_base_;
}
inline float VehicleConfig::wheel_base() const {
  // @@protoc_insertion_point(field_get:chassis.VehicleConfig.wheel_base)
  return _internal_wheel_base();
}
inline void VehicleConfig::_internal_set_wheel_base(float value) {
  _has_bits_[0] |= 0x00000800u;
  wheel_base_ = value;
}
inline void VehicleConfig::set_wheel_base(float value) {
  _internal_set_wheel_base(value);
  // @@protoc_insertion_point(field_set:chassis.VehicleConfig.wheel_base)
}

// optional float front_wheel_base = 15;
inline bool VehicleConfig::_internal_has_front_wheel_base() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool VehicleConfig::has_front_wheel_base() const {
  return _internal_has_front_wheel_base();
}
inline void VehicleConfig::clear_front_wheel_base() {
  front_wheel_base_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float VehicleConfig::_internal_front_wheel_base() const {
  return front_wheel_base_;
}
inline float VehicleConfig::front_wheel_base() const {
  // @@protoc_insertion_point(field_get:chassis.VehicleConfig.front_wheel_base)
  return _internal_front_wheel_base();
}
inline void VehicleConfig::_internal_set_front_wheel_base(float value) {
  _has_bits_[0] |= 0x00001000u;
  front_wheel_base_ = value;
}
inline void VehicleConfig::set_front_wheel_base(float value) {
  _internal_set_front_wheel_base(value);
  // @@protoc_insertion_point(field_set:chassis.VehicleConfig.front_wheel_base)
}

// optional float rear_wheel_base = 16;
inline bool VehicleConfig::_internal_has_rear_wheel_base() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool VehicleConfig::has_rear_wheel_base() const {
  return _internal_has_rear_wheel_base();
}
inline void VehicleConfig::clear_rear_wheel_base() {
  rear_wheel_base_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float VehicleConfig::_internal_rear_wheel_base() const {
  return rear_wheel_base_;
}
inline float VehicleConfig::rear_wheel_base() const {
  // @@protoc_insertion_point(field_get:chassis.VehicleConfig.rear_wheel_base)
  return _internal_rear_wheel_base();
}
inline void VehicleConfig::_internal_set_rear_wheel_base(float value) {
  _has_bits_[0] |= 0x00002000u;
  rear_wheel_base_ = value;
}
inline void VehicleConfig::set_rear_wheel_base(float value) {
  _internal_set_rear_wheel_base(value);
  // @@protoc_insertion_point(field_set:chassis.VehicleConfig.rear_wheel_base)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace chassis

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vehicle_5fconfig_2eproto
