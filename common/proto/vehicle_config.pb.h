// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle_config.proto

#ifndef PROTOBUF_vehicle_5fconfig_2eproto__INCLUDED
#define PROTOBUF_vehicle_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
#include "chassis.pb.h"
// @@protoc_insertion_point(includes)

namespace chassis {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_vehicle_5fconfig_2eproto();
void protobuf_AssignDesc_vehicle_5fconfig_2eproto();
void protobuf_ShutdownFile_vehicle_5fconfig_2eproto();

class VehicleConfig;

// ===================================================================

class VehicleConfig : public ::google::protobuf::Message {
 public:
  VehicleConfig();
  virtual ~VehicleConfig();

  VehicleConfig(const VehicleConfig& from);

  inline VehicleConfig& operator=(const VehicleConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleConfig& default_instance();

  void Swap(VehicleConfig* other);

  // implements Message ----------------------------------------------

  VehicleConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VehicleConfig& from);
  void MergeFrom(const VehicleConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string vin = 1;
  inline bool has_vin() const;
  inline void clear_vin();
  static const int kVinFieldNumber = 1;
  inline const ::std::string& vin() const;
  inline void set_vin(const ::std::string& value);
  inline void set_vin(const char* value);
  inline void set_vin(const char* value, size_t size);
  inline ::std::string* mutable_vin();
  inline ::std::string* release_vin();
  inline void set_allocated_vin(::std::string* vin);

  // optional string plate = 2;
  inline bool has_plate() const;
  inline void clear_plate();
  static const int kPlateFieldNumber = 2;
  inline const ::std::string& plate() const;
  inline void set_plate(const ::std::string& value);
  inline void set_plate(const char* value);
  inline void set_plate(const char* value, size_t size);
  inline ::std::string* mutable_plate();
  inline ::std::string* release_plate();
  inline void set_allocated_plate(::std::string* plate);

  // optional string brand = 3;
  inline bool has_brand() const;
  inline void clear_brand();
  static const int kBrandFieldNumber = 3;
  inline const ::std::string& brand() const;
  inline void set_brand(const ::std::string& value);
  inline void set_brand(const char* value);
  inline void set_brand(const char* value, size_t size);
  inline ::std::string* mutable_brand();
  inline ::std::string* release_brand();
  inline void set_allocated_brand(::std::string* brand);

  // optional float length = 6;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 6;
  inline float length() const;
  inline void set_length(float value);

  // optional float widht = 7;
  inline bool has_widht() const;
  inline void clear_widht();
  static const int kWidhtFieldNumber = 7;
  inline float widht() const;
  inline void set_widht(float value);

  // optional float height = 8;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 8;
  inline float height() const;
  inline void set_height(float value);

  // optional float weight = 9;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 9;
  inline float weight() const;
  inline void set_weight(float value);

  // optional float accel_min = 10;
  inline bool has_accel_min() const;
  inline void clear_accel_min();
  static const int kAccelMinFieldNumber = 10;
  inline float accel_min() const;
  inline void set_accel_min(float value);

  // optional float accel_max = 11;
  inline bool has_accel_max() const;
  inline void clear_accel_max();
  static const int kAccelMaxFieldNumber = 11;
  inline float accel_max() const;
  inline void set_accel_max(float value);

  // optional float steering_min = 12;
  inline bool has_steering_min() const;
  inline void clear_steering_min();
  static const int kSteeringMinFieldNumber = 12;
  inline float steering_min() const;
  inline void set_steering_min(float value);

  // optional float steering_max = 13;
  inline bool has_steering_max() const;
  inline void clear_steering_max();
  static const int kSteeringMaxFieldNumber = 13;
  inline float steering_max() const;
  inline void set_steering_max(float value);

  // optional float wheel_base = 14;
  inline bool has_wheel_base() const;
  inline void clear_wheel_base();
  static const int kWheelBaseFieldNumber = 14;
  inline float wheel_base() const;
  inline void set_wheel_base(float value);

  // optional float front_wheel_base = 15;
  inline bool has_front_wheel_base() const;
  inline void clear_front_wheel_base();
  static const int kFrontWheelBaseFieldNumber = 15;
  inline float front_wheel_base() const;
  inline void set_front_wheel_base(float value);

  // optional float rear_wheel_base = 16;
  inline bool has_rear_wheel_base() const;
  inline void clear_rear_wheel_base();
  static const int kRearWheelBaseFieldNumber = 16;
  inline float rear_wheel_base() const;
  inline void set_rear_wheel_base(float value);

  // @@protoc_insertion_point(class_scope:chassis.VehicleConfig)
 private:
  inline void set_has_vin();
  inline void clear_has_vin();
  inline void set_has_plate();
  inline void clear_has_plate();
  inline void set_has_brand();
  inline void clear_has_brand();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_widht();
  inline void clear_has_widht();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_weight();
  inline void clear_has_weight();
  inline void set_has_accel_min();
  inline void clear_has_accel_min();
  inline void set_has_accel_max();
  inline void clear_has_accel_max();
  inline void set_has_steering_min();
  inline void clear_has_steering_min();
  inline void set_has_steering_max();
  inline void clear_has_steering_max();
  inline void set_has_wheel_base();
  inline void clear_has_wheel_base();
  inline void set_has_front_wheel_base();
  inline void clear_has_front_wheel_base();
  inline void set_has_rear_wheel_base();
  inline void clear_has_rear_wheel_base();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* vin_;
  ::std::string* plate_;
  ::std::string* brand_;
  float length_;
  float widht_;
  float height_;
  float weight_;
  float accel_min_;
  float accel_max_;
  float steering_min_;
  float steering_max_;
  float wheel_base_;
  float front_wheel_base_;
  float rear_wheel_base_;
  friend void  protobuf_AddDesc_vehicle_5fconfig_2eproto();
  friend void protobuf_AssignDesc_vehicle_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_vehicle_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static VehicleConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// VehicleConfig

// optional string vin = 1;
inline bool VehicleConfig::has_vin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VehicleConfig::set_has_vin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VehicleConfig::clear_has_vin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VehicleConfig::clear_vin() {
  if (vin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vin_->clear();
  }
  clear_has_vin();
}
inline const ::std::string& VehicleConfig::vin() const {
  // @@protoc_insertion_point(field_get:chassis.VehicleConfig.vin)
  return *vin_;
}
inline void VehicleConfig::set_vin(const ::std::string& value) {
  set_has_vin();
  if (vin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vin_ = new ::std::string;
  }
  vin_->assign(value);
  // @@protoc_insertion_point(field_set:chassis.VehicleConfig.vin)
}
inline void VehicleConfig::set_vin(const char* value) {
  set_has_vin();
  if (vin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vin_ = new ::std::string;
  }
  vin_->assign(value);
  // @@protoc_insertion_point(field_set_char:chassis.VehicleConfig.vin)
}
inline void VehicleConfig::set_vin(const char* value, size_t size) {
  set_has_vin();
  if (vin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vin_ = new ::std::string;
  }
  vin_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chassis.VehicleConfig.vin)
}
inline ::std::string* VehicleConfig::mutable_vin() {
  set_has_vin();
  if (vin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vin_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:chassis.VehicleConfig.vin)
  return vin_;
}
inline ::std::string* VehicleConfig::release_vin() {
  clear_has_vin();
  if (vin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = vin_;
    vin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VehicleConfig::set_allocated_vin(::std::string* vin) {
  if (vin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vin_;
  }
  if (vin) {
    set_has_vin();
    vin_ = vin;
  } else {
    clear_has_vin();
    vin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:chassis.VehicleConfig.vin)
}

// optional string plate = 2;
inline bool VehicleConfig::has_plate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VehicleConfig::set_has_plate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VehicleConfig::clear_has_plate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VehicleConfig::clear_plate() {
  if (plate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    plate_->clear();
  }
  clear_has_plate();
}
inline const ::std::string& VehicleConfig::plate() const {
  // @@protoc_insertion_point(field_get:chassis.VehicleConfig.plate)
  return *plate_;
}
inline void VehicleConfig::set_plate(const ::std::string& value) {
  set_has_plate();
  if (plate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    plate_ = new ::std::string;
  }
  plate_->assign(value);
  // @@protoc_insertion_point(field_set:chassis.VehicleConfig.plate)
}
inline void VehicleConfig::set_plate(const char* value) {
  set_has_plate();
  if (plate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    plate_ = new ::std::string;
  }
  plate_->assign(value);
  // @@protoc_insertion_point(field_set_char:chassis.VehicleConfig.plate)
}
inline void VehicleConfig::set_plate(const char* value, size_t size) {
  set_has_plate();
  if (plate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    plate_ = new ::std::string;
  }
  plate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chassis.VehicleConfig.plate)
}
inline ::std::string* VehicleConfig::mutable_plate() {
  set_has_plate();
  if (plate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    plate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:chassis.VehicleConfig.plate)
  return plate_;
}
inline ::std::string* VehicleConfig::release_plate() {
  clear_has_plate();
  if (plate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = plate_;
    plate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VehicleConfig::set_allocated_plate(::std::string* plate) {
  if (plate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete plate_;
  }
  if (plate) {
    set_has_plate();
    plate_ = plate;
  } else {
    clear_has_plate();
    plate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:chassis.VehicleConfig.plate)
}

// optional string brand = 3;
inline bool VehicleConfig::has_brand() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VehicleConfig::set_has_brand() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VehicleConfig::clear_has_brand() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VehicleConfig::clear_brand() {
  if (brand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    brand_->clear();
  }
  clear_has_brand();
}
inline const ::std::string& VehicleConfig::brand() const {
  // @@protoc_insertion_point(field_get:chassis.VehicleConfig.brand)
  return *brand_;
}
inline void VehicleConfig::set_brand(const ::std::string& value) {
  set_has_brand();
  if (brand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    brand_ = new ::std::string;
  }
  brand_->assign(value);
  // @@protoc_insertion_point(field_set:chassis.VehicleConfig.brand)
}
inline void VehicleConfig::set_brand(const char* value) {
  set_has_brand();
  if (brand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    brand_ = new ::std::string;
  }
  brand_->assign(value);
  // @@protoc_insertion_point(field_set_char:chassis.VehicleConfig.brand)
}
inline void VehicleConfig::set_brand(const char* value, size_t size) {
  set_has_brand();
  if (brand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    brand_ = new ::std::string;
  }
  brand_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chassis.VehicleConfig.brand)
}
inline ::std::string* VehicleConfig::mutable_brand() {
  set_has_brand();
  if (brand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    brand_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:chassis.VehicleConfig.brand)
  return brand_;
}
inline ::std::string* VehicleConfig::release_brand() {
  clear_has_brand();
  if (brand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = brand_;
    brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VehicleConfig::set_allocated_brand(::std::string* brand) {
  if (brand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete brand_;
  }
  if (brand) {
    set_has_brand();
    brand_ = brand;
  } else {
    clear_has_brand();
    brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:chassis.VehicleConfig.brand)
}

// optional float length = 6;
inline bool VehicleConfig::has_length() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VehicleConfig::set_has_length() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VehicleConfig::clear_has_length() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VehicleConfig::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline float VehicleConfig::length() const {
  // @@protoc_insertion_point(field_get:chassis.VehicleConfig.length)
  return length_;
}
inline void VehicleConfig::set_length(float value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:chassis.VehicleConfig.length)
}

// optional float widht = 7;
inline bool VehicleConfig::has_widht() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VehicleConfig::set_has_widht() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VehicleConfig::clear_has_widht() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VehicleConfig::clear_widht() {
  widht_ = 0;
  clear_has_widht();
}
inline float VehicleConfig::widht() const {
  // @@protoc_insertion_point(field_get:chassis.VehicleConfig.widht)
  return widht_;
}
inline void VehicleConfig::set_widht(float value) {
  set_has_widht();
  widht_ = value;
  // @@protoc_insertion_point(field_set:chassis.VehicleConfig.widht)
}

// optional float height = 8;
inline bool VehicleConfig::has_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VehicleConfig::set_has_height() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VehicleConfig::clear_has_height() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VehicleConfig::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline float VehicleConfig::height() const {
  // @@protoc_insertion_point(field_get:chassis.VehicleConfig.height)
  return height_;
}
inline void VehicleConfig::set_height(float value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:chassis.VehicleConfig.height)
}

// optional float weight = 9;
inline bool VehicleConfig::has_weight() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VehicleConfig::set_has_weight() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VehicleConfig::clear_has_weight() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VehicleConfig::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
inline float VehicleConfig::weight() const {
  // @@protoc_insertion_point(field_get:chassis.VehicleConfig.weight)
  return weight_;
}
inline void VehicleConfig::set_weight(float value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:chassis.VehicleConfig.weight)
}

// optional float accel_min = 10;
inline bool VehicleConfig::has_accel_min() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VehicleConfig::set_has_accel_min() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VehicleConfig::clear_has_accel_min() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VehicleConfig::clear_accel_min() {
  accel_min_ = 0;
  clear_has_accel_min();
}
inline float VehicleConfig::accel_min() const {
  // @@protoc_insertion_point(field_get:chassis.VehicleConfig.accel_min)
  return accel_min_;
}
inline void VehicleConfig::set_accel_min(float value) {
  set_has_accel_min();
  accel_min_ = value;
  // @@protoc_insertion_point(field_set:chassis.VehicleConfig.accel_min)
}

// optional float accel_max = 11;
inline bool VehicleConfig::has_accel_max() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VehicleConfig::set_has_accel_max() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VehicleConfig::clear_has_accel_max() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VehicleConfig::clear_accel_max() {
  accel_max_ = 0;
  clear_has_accel_max();
}
inline float VehicleConfig::accel_max() const {
  // @@protoc_insertion_point(field_get:chassis.VehicleConfig.accel_max)
  return accel_max_;
}
inline void VehicleConfig::set_accel_max(float value) {
  set_has_accel_max();
  accel_max_ = value;
  // @@protoc_insertion_point(field_set:chassis.VehicleConfig.accel_max)
}

// optional float steering_min = 12;
inline bool VehicleConfig::has_steering_min() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VehicleConfig::set_has_steering_min() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VehicleConfig::clear_has_steering_min() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VehicleConfig::clear_steering_min() {
  steering_min_ = 0;
  clear_has_steering_min();
}
inline float VehicleConfig::steering_min() const {
  // @@protoc_insertion_point(field_get:chassis.VehicleConfig.steering_min)
  return steering_min_;
}
inline void VehicleConfig::set_steering_min(float value) {
  set_has_steering_min();
  steering_min_ = value;
  // @@protoc_insertion_point(field_set:chassis.VehicleConfig.steering_min)
}

// optional float steering_max = 13;
inline bool VehicleConfig::has_steering_max() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VehicleConfig::set_has_steering_max() {
  _has_bits_[0] |= 0x00000400u;
}
inline void VehicleConfig::clear_has_steering_max() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void VehicleConfig::clear_steering_max() {
  steering_max_ = 0;
  clear_has_steering_max();
}
inline float VehicleConfig::steering_max() const {
  // @@protoc_insertion_point(field_get:chassis.VehicleConfig.steering_max)
  return steering_max_;
}
inline void VehicleConfig::set_steering_max(float value) {
  set_has_steering_max();
  steering_max_ = value;
  // @@protoc_insertion_point(field_set:chassis.VehicleConfig.steering_max)
}

// optional float wheel_base = 14;
inline bool VehicleConfig::has_wheel_base() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void VehicleConfig::set_has_wheel_base() {
  _has_bits_[0] |= 0x00000800u;
}
inline void VehicleConfig::clear_has_wheel_base() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void VehicleConfig::clear_wheel_base() {
  wheel_base_ = 0;
  clear_has_wheel_base();
}
inline float VehicleConfig::wheel_base() const {
  // @@protoc_insertion_point(field_get:chassis.VehicleConfig.wheel_base)
  return wheel_base_;
}
inline void VehicleConfig::set_wheel_base(float value) {
  set_has_wheel_base();
  wheel_base_ = value;
  // @@protoc_insertion_point(field_set:chassis.VehicleConfig.wheel_base)
}

// optional float front_wheel_base = 15;
inline bool VehicleConfig::has_front_wheel_base() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void VehicleConfig::set_has_front_wheel_base() {
  _has_bits_[0] |= 0x00001000u;
}
inline void VehicleConfig::clear_has_front_wheel_base() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void VehicleConfig::clear_front_wheel_base() {
  front_wheel_base_ = 0;
  clear_has_front_wheel_base();
}
inline float VehicleConfig::front_wheel_base() const {
  // @@protoc_insertion_point(field_get:chassis.VehicleConfig.front_wheel_base)
  return front_wheel_base_;
}
inline void VehicleConfig::set_front_wheel_base(float value) {
  set_has_front_wheel_base();
  front_wheel_base_ = value;
  // @@protoc_insertion_point(field_set:chassis.VehicleConfig.front_wheel_base)
}

// optional float rear_wheel_base = 16;
inline bool VehicleConfig::has_rear_wheel_base() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void VehicleConfig::set_has_rear_wheel_base() {
  _has_bits_[0] |= 0x00002000u;
}
inline void VehicleConfig::clear_has_rear_wheel_base() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void VehicleConfig::clear_rear_wheel_base() {
  rear_wheel_base_ = 0;
  clear_has_rear_wheel_base();
}
inline float VehicleConfig::rear_wheel_base() const {
  // @@protoc_insertion_point(field_get:chassis.VehicleConfig.rear_wheel_base)
  return rear_wheel_base_;
}
inline void VehicleConfig::set_rear_wheel_base(float value) {
  set_has_rear_wheel_base();
  rear_wheel_base_ = value;
  // @@protoc_insertion_point(field_set:chassis.VehicleConfig.rear_wheel_base)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace chassis

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_vehicle_5fconfig_2eproto__INCLUDED
