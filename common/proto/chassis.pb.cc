// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chassis.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "chassis.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace chassis {

namespace {

const ::google::protobuf::EnumDescriptor* GearPosition_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LightSwitch_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PilotMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LongitudeDrivingMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EPSSteeringMode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_chassis_2eproto() {
  protobuf_AddDesc_chassis_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "chassis.proto");
  GOOGLE_CHECK(file != NULL);
  GearPosition_descriptor_ = file->enum_type(0);
  LightSwitch_descriptor_ = file->enum_type(1);
  PilotMode_descriptor_ = file->enum_type(2);
  LongitudeDrivingMode_descriptor_ = file->enum_type(3);
  EPSSteeringMode_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_chassis_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_chassis_2eproto() {
}

void protobuf_AddDesc_chassis_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rchassis.proto\022\007chassis*M\n\014GearPosition"
    "\022\r\n\tGEAR_NONE\020\000\022\n\n\006GEAR_N\020\001\022\n\n\006GEAR_R\020\002\022"
    "\n\n\006GEAR_P\020\003\022\n\n\006GEAR_D\020\004*q\n\013LightSwitch\022\016"
    "\n\nLIGHT_NONE\020\000\022\016\n\nLIGHT_LEFT\020\001\022\017\n\013LIGHT_"
    "RIGHT\020\002\022\017\n\013LIGHT_FLASH\020\003\022\020\n\014LIGHT_MANUAL"
    "\020\004\022\016\n\nLIGHT_AUTO\020\005*[\n\tPilotMode\022\017\n\013MODE_"
    "MANUAL\020\000\022\023\n\017MODE_AUTO_DRIVE\020\001\022\023\n\017MODE_ST"
    "EER_ONLY\020\002\022\023\n\017MODE_SPEED_ONLY\020\003*r\n\024Longi"
    "tudeDrivingMode\022\016\n\nManualMode\020\000\022\024\n\020Autom"
    "aticStandby\020\001\022\031\n\025AutomaticAcceleration\020\002"
    "\022\031\n\025AutomaticDeceleration\020\003*z\n\017EPSSteeri"
    "ngMode\022\n\n\006Manual\020\000\022\r\n\tAutomatic\020\001\022\032\n\026Man"
    "ualFromInterference\020\002\022\030\n\024ManualFromEPSFa"
    "ilure\020\003\022\026\n\022TemporaryInhibited\020\004", 551);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chassis.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_chassis_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_chassis_2eproto {
  StaticDescriptorInitializer_chassis_2eproto() {
    protobuf_AddDesc_chassis_2eproto();
  }
} static_descriptor_initializer_chassis_2eproto_;
const ::google::protobuf::EnumDescriptor* GearPosition_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GearPosition_descriptor_;
}
bool GearPosition_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LightSwitch_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LightSwitch_descriptor_;
}
bool LightSwitch_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PilotMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PilotMode_descriptor_;
}
bool PilotMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LongitudeDrivingMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LongitudeDrivingMode_descriptor_;
}
bool LongitudeDrivingMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EPSSteeringMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPSSteeringMode_descriptor_;
}
bool EPSSteeringMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace chassis

// @@protoc_insertion_point(global_scope)
