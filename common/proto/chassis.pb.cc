// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chassis.proto

#include "chassis.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace chassis {
}  // namespace chassis
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_chassis_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_chassis_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_chassis_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_chassis_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_chassis_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rchassis.proto\022\007chassis*M\n\014GearPosition"
  "\022\r\n\tGEAR_NONE\020\000\022\n\n\006GEAR_N\020\001\022\n\n\006GEAR_R\020\002\022"
  "\n\n\006GEAR_P\020\003\022\n\n\006GEAR_D\020\004*q\n\013LightSwitch\022\016"
  "\n\nLIGHT_NONE\020\000\022\016\n\nLIGHT_LEFT\020\001\022\017\n\013LIGHT_"
  "RIGHT\020\002\022\017\n\013LIGHT_FLASH\020\003\022\020\n\014LIGHT_MANUAL"
  "\020\004\022\016\n\nLIGHT_AUTO\020\005*[\n\tPilotMode\022\017\n\013MODE_"
  "MANUAL\020\000\022\023\n\017MODE_AUTO_DRIVE\020\001\022\023\n\017MODE_ST"
  "EER_ONLY\020\002\022\023\n\017MODE_SPEED_ONLY\020\003*r\n\024Longi"
  "tudeDrivingMode\022\016\n\nManualMode\020\000\022\024\n\020Autom"
  "aticStandby\020\001\022\031\n\025AutomaticAcceleration\020\002"
  "\022\031\n\025AutomaticDeceleration\020\003*z\n\017EPSSteeri"
  "ngMode\022\n\n\006Manual\020\000\022\r\n\tAutomatic\020\001\022\032\n\026Man"
  "ualFromInterference\020\002\022\030\n\024ManualFromEPSFa"
  "ilure\020\003\022\026\n\022TemporaryInhibited\020\004"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_chassis_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_chassis_2eproto_sccs[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_chassis_2eproto_once;
static bool descriptor_table_chassis_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chassis_2eproto = {
  &descriptor_table_chassis_2eproto_initialized, descriptor_table_protodef_chassis_2eproto, "chassis.proto", 551,
  &descriptor_table_chassis_2eproto_once, descriptor_table_chassis_2eproto_sccs, descriptor_table_chassis_2eproto_deps, 0, 0,
  schemas, file_default_instances, TableStruct_chassis_2eproto::offsets,
  file_level_metadata_chassis_2eproto, 0, file_level_enum_descriptors_chassis_2eproto, file_level_service_descriptors_chassis_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_chassis_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_chassis_2eproto), true);
namespace chassis {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GearPosition_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chassis_2eproto);
  return file_level_enum_descriptors_chassis_2eproto[0];
}
bool GearPosition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LightSwitch_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chassis_2eproto);
  return file_level_enum_descriptors_chassis_2eproto[1];
}
bool LightSwitch_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PilotMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chassis_2eproto);
  return file_level_enum_descriptors_chassis_2eproto[2];
}
bool PilotMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LongitudeDrivingMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chassis_2eproto);
  return file_level_enum_descriptors_chassis_2eproto[3];
}
bool LongitudeDrivingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPSSteeringMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chassis_2eproto);
  return file_level_enum_descriptors_chassis_2eproto[4];
}
bool EPSSteeringMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace chassis
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
