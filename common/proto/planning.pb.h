// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_planning_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_planning_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_planning_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_planning_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_planning_2eproto;
namespace planning {
class PlanningConfig;
class PlanningConfigDefaultTypeInternal;
extern PlanningConfigDefaultTypeInternal _PlanningConfig_default_instance_;
}  // namespace planning
PROTOBUF_NAMESPACE_OPEN
template<> ::planning::PlanningConfig* Arena::CreateMaybeMessage<::planning::PlanningConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace planning {

enum PlanningMode : int {
  LOCAL = 0,
  GLOBAL = 1
};
bool PlanningMode_IsValid(int value);
constexpr PlanningMode PlanningMode_MIN = LOCAL;
constexpr PlanningMode PlanningMode_MAX = GLOBAL;
constexpr int PlanningMode_ARRAYSIZE = PlanningMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlanningMode_descriptor();
template<typename T>
inline const std::string& PlanningMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlanningMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlanningMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PlanningMode_descriptor(), enum_t_value);
}
inline bool PlanningMode_Parse(
    const std::string& name, PlanningMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlanningMode>(
    PlanningMode_descriptor(), name, value);
}
// ===================================================================

class PlanningConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:planning.PlanningConfig) */ {
 public:
  PlanningConfig();
  virtual ~PlanningConfig();

  PlanningConfig(const PlanningConfig& from);
  PlanningConfig(PlanningConfig&& from) noexcept
    : PlanningConfig() {
    *this = ::std::move(from);
  }

  inline PlanningConfig& operator=(const PlanningConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanningConfig& operator=(PlanningConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlanningConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlanningConfig* internal_default_instance() {
    return reinterpret_cast<const PlanningConfig*>(
               &_PlanningConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlanningConfig& a, PlanningConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanningConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlanningConfig* New() const final {
    return CreateMaybeMessage<PlanningConfig>(nullptr);
  }

  PlanningConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlanningConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlanningConfig& from);
  void MergeFrom(const PlanningConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanningConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "planning.PlanningConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_planning_2eproto);
    return ::descriptor_table_planning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeedMaxFieldNumber = 2,
    kAccMinFieldNumber = 3,
    kAccMaxFieldNumber = 4,
    kJerkMinFieldNumber = 5,
    kJerkMaxFieldNumber = 6,
    kTimeSampleFieldNumber = 7,
    kPathSampleFieldNumber = 8,
    kSafeLongDisFieldNumber = 9,
    kFrequencyFieldNumber = 1,
  };
  // optional double speed_max = 2;
  bool has_speed_max() const;
  private:
  bool _internal_has_speed_max() const;
  public:
  void clear_speed_max();
  double speed_max() const;
  void set_speed_max(double value);
  private:
  double _internal_speed_max() const;
  void _internal_set_speed_max(double value);
  public:

  // optional double acc_min = 3;
  bool has_acc_min() const;
  private:
  bool _internal_has_acc_min() const;
  public:
  void clear_acc_min();
  double acc_min() const;
  void set_acc_min(double value);
  private:
  double _internal_acc_min() const;
  void _internal_set_acc_min(double value);
  public:

  // optional double acc_max = 4;
  bool has_acc_max() const;
  private:
  bool _internal_has_acc_max() const;
  public:
  void clear_acc_max();
  double acc_max() const;
  void set_acc_max(double value);
  private:
  double _internal_acc_max() const;
  void _internal_set_acc_max(double value);
  public:

  // optional double jerk_min = 5;
  bool has_jerk_min() const;
  private:
  bool _internal_has_jerk_min() const;
  public:
  void clear_jerk_min();
  double jerk_min() const;
  void set_jerk_min(double value);
  private:
  double _internal_jerk_min() const;
  void _internal_set_jerk_min(double value);
  public:

  // optional double jerk_max = 6;
  bool has_jerk_max() const;
  private:
  bool _internal_has_jerk_max() const;
  public:
  void clear_jerk_max();
  double jerk_max() const;
  void set_jerk_max(double value);
  private:
  double _internal_jerk_max() const;
  void _internal_set_jerk_max(double value);
  public:

  // optional double time_sample = 7;
  bool has_time_sample() const;
  private:
  bool _internal_has_time_sample() const;
  public:
  void clear_time_sample();
  double time_sample() const;
  void set_time_sample(double value);
  private:
  double _internal_time_sample() const;
  void _internal_set_time_sample(double value);
  public:

  // optional double path_sample = 8;
  bool has_path_sample() const;
  private:
  bool _internal_has_path_sample() const;
  public:
  void clear_path_sample();
  double path_sample() const;
  void set_path_sample(double value);
  private:
  double _internal_path_sample() const;
  void _internal_set_path_sample(double value);
  public:

  // optional double safe_long_dis = 9;
  bool has_safe_long_dis() const;
  private:
  bool _internal_has_safe_long_dis() const;
  public:
  void clear_safe_long_dis();
  double safe_long_dis() const;
  void set_safe_long_dis(double value);
  private:
  double _internal_safe_long_dis() const;
  void _internal_set_safe_long_dis(double value);
  public:

  // optional uint32 frequency = 1;
  bool has_frequency() const;
  private:
  bool _internal_has_frequency() const;
  public:
  void clear_frequency();
  ::PROTOBUF_NAMESPACE_ID::uint32 frequency() const;
  void set_frequency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_frequency() const;
  void _internal_set_frequency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:planning.PlanningConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double speed_max_;
  double acc_min_;
  double acc_max_;
  double jerk_min_;
  double jerk_max_;
  double time_sample_;
  double path_sample_;
  double safe_long_dis_;
  ::PROTOBUF_NAMESPACE_ID::uint32 frequency_;
  friend struct ::TableStruct_planning_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlanningConfig

// optional uint32 frequency = 1;
inline bool PlanningConfig::_internal_has_frequency() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PlanningConfig::has_frequency() const {
  return _internal_has_frequency();
}
inline void PlanningConfig::clear_frequency() {
  frequency_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlanningConfig::_internal_frequency() const {
  return frequency_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlanningConfig::frequency() const {
  // @@protoc_insertion_point(field_get:planning.PlanningConfig.frequency)
  return _internal_frequency();
}
inline void PlanningConfig::_internal_set_frequency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  frequency_ = value;
}
inline void PlanningConfig::set_frequency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_frequency(value);
  // @@protoc_insertion_point(field_set:planning.PlanningConfig.frequency)
}

// optional double speed_max = 2;
inline bool PlanningConfig::_internal_has_speed_max() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlanningConfig::has_speed_max() const {
  return _internal_has_speed_max();
}
inline void PlanningConfig::clear_speed_max() {
  speed_max_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double PlanningConfig::_internal_speed_max() const {
  return speed_max_;
}
inline double PlanningConfig::speed_max() const {
  // @@protoc_insertion_point(field_get:planning.PlanningConfig.speed_max)
  return _internal_speed_max();
}
inline void PlanningConfig::_internal_set_speed_max(double value) {
  _has_bits_[0] |= 0x00000001u;
  speed_max_ = value;
}
inline void PlanningConfig::set_speed_max(double value) {
  _internal_set_speed_max(value);
  // @@protoc_insertion_point(field_set:planning.PlanningConfig.speed_max)
}

// optional double acc_min = 3;
inline bool PlanningConfig::_internal_has_acc_min() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PlanningConfig::has_acc_min() const {
  return _internal_has_acc_min();
}
inline void PlanningConfig::clear_acc_min() {
  acc_min_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double PlanningConfig::_internal_acc_min() const {
  return acc_min_;
}
inline double PlanningConfig::acc_min() const {
  // @@protoc_insertion_point(field_get:planning.PlanningConfig.acc_min)
  return _internal_acc_min();
}
inline void PlanningConfig::_internal_set_acc_min(double value) {
  _has_bits_[0] |= 0x00000002u;
  acc_min_ = value;
}
inline void PlanningConfig::set_acc_min(double value) {
  _internal_set_acc_min(value);
  // @@protoc_insertion_point(field_set:planning.PlanningConfig.acc_min)
}

// optional double acc_max = 4;
inline bool PlanningConfig::_internal_has_acc_max() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PlanningConfig::has_acc_max() const {
  return _internal_has_acc_max();
}
inline void PlanningConfig::clear_acc_max() {
  acc_max_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double PlanningConfig::_internal_acc_max() const {
  return acc_max_;
}
inline double PlanningConfig::acc_max() const {
  // @@protoc_insertion_point(field_get:planning.PlanningConfig.acc_max)
  return _internal_acc_max();
}
inline void PlanningConfig::_internal_set_acc_max(double value) {
  _has_bits_[0] |= 0x00000004u;
  acc_max_ = value;
}
inline void PlanningConfig::set_acc_max(double value) {
  _internal_set_acc_max(value);
  // @@protoc_insertion_point(field_set:planning.PlanningConfig.acc_max)
}

// optional double jerk_min = 5;
inline bool PlanningConfig::_internal_has_jerk_min() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PlanningConfig::has_jerk_min() const {
  return _internal_has_jerk_min();
}
inline void PlanningConfig::clear_jerk_min() {
  jerk_min_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double PlanningConfig::_internal_jerk_min() const {
  return jerk_min_;
}
inline double PlanningConfig::jerk_min() const {
  // @@protoc_insertion_point(field_get:planning.PlanningConfig.jerk_min)
  return _internal_jerk_min();
}
inline void PlanningConfig::_internal_set_jerk_min(double value) {
  _has_bits_[0] |= 0x00000008u;
  jerk_min_ = value;
}
inline void PlanningConfig::set_jerk_min(double value) {
  _internal_set_jerk_min(value);
  // @@protoc_insertion_point(field_set:planning.PlanningConfig.jerk_min)
}

// optional double jerk_max = 6;
inline bool PlanningConfig::_internal_has_jerk_max() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PlanningConfig::has_jerk_max() const {
  return _internal_has_jerk_max();
}
inline void PlanningConfig::clear_jerk_max() {
  jerk_max_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double PlanningConfig::_internal_jerk_max() const {
  return jerk_max_;
}
inline double PlanningConfig::jerk_max() const {
  // @@protoc_insertion_point(field_get:planning.PlanningConfig.jerk_max)
  return _internal_jerk_max();
}
inline void PlanningConfig::_internal_set_jerk_max(double value) {
  _has_bits_[0] |= 0x00000010u;
  jerk_max_ = value;
}
inline void PlanningConfig::set_jerk_max(double value) {
  _internal_set_jerk_max(value);
  // @@protoc_insertion_point(field_set:planning.PlanningConfig.jerk_max)
}

// optional double time_sample = 7;
inline bool PlanningConfig::_internal_has_time_sample() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PlanningConfig::has_time_sample() const {
  return _internal_has_time_sample();
}
inline void PlanningConfig::clear_time_sample() {
  time_sample_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double PlanningConfig::_internal_time_sample() const {
  return time_sample_;
}
inline double PlanningConfig::time_sample() const {
  // @@protoc_insertion_point(field_get:planning.PlanningConfig.time_sample)
  return _internal_time_sample();
}
inline void PlanningConfig::_internal_set_time_sample(double value) {
  _has_bits_[0] |= 0x00000020u;
  time_sample_ = value;
}
inline void PlanningConfig::set_time_sample(double value) {
  _internal_set_time_sample(value);
  // @@protoc_insertion_point(field_set:planning.PlanningConfig.time_sample)
}

// optional double path_sample = 8;
inline bool PlanningConfig::_internal_has_path_sample() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PlanningConfig::has_path_sample() const {
  return _internal_has_path_sample();
}
inline void PlanningConfig::clear_path_sample() {
  path_sample_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double PlanningConfig::_internal_path_sample() const {
  return path_sample_;
}
inline double PlanningConfig::path_sample() const {
  // @@protoc_insertion_point(field_get:planning.PlanningConfig.path_sample)
  return _internal_path_sample();
}
inline void PlanningConfig::_internal_set_path_sample(double value) {
  _has_bits_[0] |= 0x00000040u;
  path_sample_ = value;
}
inline void PlanningConfig::set_path_sample(double value) {
  _internal_set_path_sample(value);
  // @@protoc_insertion_point(field_set:planning.PlanningConfig.path_sample)
}

// optional double safe_long_dis = 9;
inline bool PlanningConfig::_internal_has_safe_long_dis() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PlanningConfig::has_safe_long_dis() const {
  return _internal_has_safe_long_dis();
}
inline void PlanningConfig::clear_safe_long_dis() {
  safe_long_dis_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double PlanningConfig::_internal_safe_long_dis() const {
  return safe_long_dis_;
}
inline double PlanningConfig::safe_long_dis() const {
  // @@protoc_insertion_point(field_get:planning.PlanningConfig.safe_long_dis)
  return _internal_safe_long_dis();
}
inline void PlanningConfig::_internal_set_safe_long_dis(double value) {
  _has_bits_[0] |= 0x00000080u;
  safe_long_dis_ = value;
}
inline void PlanningConfig::set_safe_long_dis(double value) {
  _internal_set_safe_long_dis(value);
  // @@protoc_insertion_point(field_set:planning.PlanningConfig.safe_long_dis)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::planning::PlanningMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::planning::PlanningMode>() {
  return ::planning::PlanningMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_planning_2eproto
