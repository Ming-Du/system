// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning.proto

#ifndef PROTOBUF_planning_2eproto__INCLUDED
#define PROTOBUF_planning_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace planning {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_planning_2eproto();
void protobuf_AssignDesc_planning_2eproto();
void protobuf_ShutdownFile_planning_2eproto();

class PlanningConfig;

enum PlanningMode {
  LOCAL = 0,
  GLOBAL = 1
};
bool PlanningMode_IsValid(int value);
const PlanningMode PlanningMode_MIN = LOCAL;
const PlanningMode PlanningMode_MAX = GLOBAL;
const int PlanningMode_ARRAYSIZE = PlanningMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlanningMode_descriptor();
inline const ::std::string& PlanningMode_Name(PlanningMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlanningMode_descriptor(), value);
}
inline bool PlanningMode_Parse(
    const ::std::string& name, PlanningMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlanningMode>(
    PlanningMode_descriptor(), name, value);
}
// ===================================================================

class PlanningConfig : public ::google::protobuf::Message {
 public:
  PlanningConfig();
  virtual ~PlanningConfig();

  PlanningConfig(const PlanningConfig& from);

  inline PlanningConfig& operator=(const PlanningConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlanningConfig& default_instance();

  void Swap(PlanningConfig* other);

  // implements Message ----------------------------------------------

  PlanningConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlanningConfig& from);
  void MergeFrom(const PlanningConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 frequency = 1;
  inline bool has_frequency() const;
  inline void clear_frequency();
  static const int kFrequencyFieldNumber = 1;
  inline ::google::protobuf::uint32 frequency() const;
  inline void set_frequency(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:planning.PlanningConfig)
 private:
  inline void set_has_frequency();
  inline void clear_has_frequency();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 frequency_;
  friend void  protobuf_AddDesc_planning_2eproto();
  friend void protobuf_AssignDesc_planning_2eproto();
  friend void protobuf_ShutdownFile_planning_2eproto();

  void InitAsDefaultInstance();
  static PlanningConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// PlanningConfig

// optional uint32 frequency = 1;
inline bool PlanningConfig::has_frequency() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanningConfig::set_has_frequency() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlanningConfig::clear_has_frequency() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlanningConfig::clear_frequency() {
  frequency_ = 0u;
  clear_has_frequency();
}
inline ::google::protobuf::uint32 PlanningConfig::frequency() const {
  // @@protoc_insertion_point(field_get:planning.PlanningConfig.frequency)
  return frequency_;
}
inline void PlanningConfig::set_frequency(::google::protobuf::uint32 value) {
  set_has_frequency();
  frequency_ = value;
  // @@protoc_insertion_point(field_set:planning.PlanningConfig.frequency)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::planning::PlanningMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::planning::PlanningMode>() {
  return ::planning::PlanningMode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_planning_2eproto__INCLUDED
